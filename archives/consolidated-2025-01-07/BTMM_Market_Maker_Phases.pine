//@version=5
indicator("BTMM Performance Tracker - Script 7/10", 
         shorttitle="BTMM-Performance", 
         overlay=false, 
         max_boxes_count=50,
         max_lines_count=50, 
         max_labels_count=100,
         max_tables_count=3)

// ═══════════════════════════════════════════════════════════════════════════════════
// 📊 BTMM PERFORMANCE TRACKER - SCRIPT 7 OF 10
// Steve Mauro's Beat The Market Maker Methodology
// Focus: Trade Performance Analytics, Win Rate Tracking, R:R Analysis, Strategy Stats
// ═══════════════════════════════════════════════════════════════════════════════════

import TradingView/ta/7 as ta

// === PERFORMANCE TRACKING CONFIGURATION ===
perf_group = "📊 Performance Tracking"
track_signals = input.bool(true, "Track Trading Signals", group=perf_group)
initial_balance = input.float(10000.0, "Initial Account Balance", minval=1000.0, group=perf_group)
risk_per_trade = input.float(1.0, "Risk Per Trade (%)", minval=0.1, maxval=5.0, group=perf_group)
show_performance_table = input.bool(true, "Show Performance Table", group=perf_group)
reset_stats = input.bool(false, "Reset Statistics", group=perf_group)

// === SIGNAL DETECTION SETTINGS ===
signal_group = "🎯 Signal Detection"
signal_source = input.string("AUTO", "Signal Source", options=["AUTO", "MANUAL", "EXTERNAL"], group=signal_group)
manual_long_signal = input.bool(false, "Manual Long Signal", group=signal_group)
manual_short_signal = input.bool(false, "Manual Short Signal", group=signal_group)
auto_signal_sensitivity = input.float(1.0, "Auto Signal Sensitivity", minval=0.5, maxval=2.0, group=signal_group)

// === RISK MANAGEMENT ===
risk_group = "🛡️ Risk Management"
stop_loss_atr_mult = input.float(2.0, "Stop Loss ATR Multiplier", minval=0.5, maxval=5.0, group=risk_group)
take_profit_rr = input.float(2.0, "Take Profit R:R Ratio", minval=1.0, maxval=5.0, group=risk_group)
max_open_trades = input.int(3, "Max Concurrent Trades", minval=1, maxval=10, group=risk_group)
enable_trailing_stop = input.bool(true, "Enable Trailing Stop", group=risk_group)

// === VISUAL SETTINGS ===
visual_group = "🎨 Visual Configuration"
show_equity_curve = input.bool(true, "Show Equity Curve", group=visual_group)
show_drawdown = input.bool(true, "Show Drawdown", group=visual_group)
show_trade_markers = input.bool(true, "Show Trade Entry/Exit Markers", group=visual_group)
equity_line_color = input.color(color.blue, "Equity Line Color", group=visual_group)
drawdown_color = input.color(color.red, "Drawdown Color", group=visual_group)

// ═══════════════════════════════════════════════════════════════════════════════════
// 📊 PERFORMANCE VARIABLES
// ═══════════════════════════════════════════════════════════════════════════════════

// Trading Statistics
var int total_trades = 0
var int winning_trades = 0
var int losing_trades = 0
var float total_profit = 0.0
var float total_loss = 0.0
var float current_balance = initial_balance
var float peak_balance = initial_balance
var float max_drawdown = 0.0
var float max_consecutive_wins = 0.0
var float max_consecutive_losses = 0.0
var float current_consecutive_wins = 0.0
var float current_consecutive_losses = 0.0

// Trade Tracking Arrays
var array<float> trade_returns = array.new<float>()
var array<float> equity_curve = array.new<float>()
var array<float> drawdown_curve = array.new<float>()

// Current Trade State
var bool in_long_trade = false
var bool in_short_trade = false
var float trade_entry_price = na
var float trade_stop_loss = na
var float trade_take_profit = na
var int trade_entry_bar = na
var float trade_risk_amount = 0.0

// Reset statistics if requested
if reset_stats and not reset_stats[1]
    total_trades := 0
    winning_trades := 0
    losing_trades := 0
    total_profit := 0.0
    total_loss := 0.0
    current_balance := initial_balance
    peak_balance := initial_balance
    max_drawdown := 0.0
    max_consecutive_wins := 0.0
    max_consecutive_losses := 0.0
    current_consecutive_wins := 0.0
    current_consecutive_losses := 0.0
    array.clear(trade_returns)
    array.clear(equity_curve)
    array.clear(drawdown_curve)

// ═══════════════════════════════════════════════════════════════════════════════════
// 🎯 SIGNAL DETECTION LOGIC
// ═══════════════════════════════════════════════════════════════════════════════════

// ATR for stop loss calculation
atr_value = ta.atr(14)

// EMA for trend detection
ema_13 = ta.ema(close, 13)
ema_50 = ta.ema(close, 50)

// Auto signal generation based on BTMM principles
generate_auto_signals() =>
    var bool long_signal = false
    var bool short_signal = false
    
    // EMA alignment check
    ema_bullish = ema_13 > ema_50
    ema_bearish = ema_13 < ema_50
    
    // Price action signals
    bullish_candle = close > open and close > ema_13
    bearish_candle = close < open and close < ema_13
    
    // Volume confirmation
    avg_volume = ta.sma(volume, 20)
    volume_spike = volume > avg_volume * 1.2
    
    // Generate signals with confluence
    if ema_bullish and bullish_candle and volume_spike and not in_long_trade
        long_signal := true
    
    if ema_bearish and bearish_candle and volume_spike and not in_short_trade
        short_signal := true
    
    [long_signal, short_signal]

// Signal detection based on source
[auto_long, auto_short] = generate_auto_signals()

long_signal = switch signal_source
    "AUTO" => auto_long
    "MANUAL" => manual_long_signal and not manual_long_signal[1]
    "EXTERNAL" => false  // Would integrate with external signals
    => auto_long

short_signal = switch signal_source
    "AUTO" => auto_short
    "MANUAL" => manual_short_signal and not manual_short_signal[1]
    "EXTERNAL" => false  // Would integrate with external signals
    => auto_short

// ═══════════════════════════════════════════════════════════════════════════════════
// 💼 TRADE MANAGEMENT
// ═══════════════════════════════════════════════════════════════════════════════════

// Enter Long Trade
if long_signal and not in_long_trade
    in_long_trade := true
    trade_entry_price := close
    trade_stop_loss := close - (atr_value * stop_loss_atr_mult)
    trade_take_profit := close + ((close - trade_stop_loss) * take_profit_rr)
    trade_entry_bar := bar_index
    trade_risk_amount := current_balance * (risk_per_trade / 100)

// Enter Short Trade
if short_signal and not in_short_trade
    in_short_trade := true
    trade_entry_price := close
    trade_stop_loss := close + (atr_value * stop_loss_atr_mult)
    trade_take_profit := close - ((trade_stop_loss - close) * take_profit_rr)
    trade_entry_bar := bar_index
    trade_risk_amount := current_balance * (risk_per_trade / 100)

// Exit Long Trade
if in_long_trade
    long_tp_hit = high >= trade_take_profit
    long_sl_hit = low <= trade_stop_loss
    
    if long_tp_hit or long_sl_hit
        // Calculate trade result
        exit_price = long_tp_hit ? trade_take_profit : trade_stop_loss
        trade_return = long_tp_hit ? trade_risk_amount * take_profit_rr : -trade_risk_amount
        
        // Update statistics
        total_trades += 1
        if trade_return > 0
            winning_trades += 1
            total_profit += trade_return
            current_consecutive_wins += 1
            current_consecutive_losses := 0
            max_consecutive_wins := math.max(max_consecutive_wins, current_consecutive_wins)
        else
            losing_trades += 1
            total_loss += math.abs(trade_return)
            current_consecutive_losses += 1
            current_consecutive_wins := 0
            max_consecutive_losses := math.max(max_consecutive_losses, current_consecutive_losses)
        
        // Update balance and equity
        current_balance += trade_return
        array.push(trade_returns, trade_return)
        array.push(equity_curve, current_balance)
        
        // Calculate drawdown
        peak_balance := math.max(peak_balance, current_balance)
        current_drawdown = (peak_balance - current_balance) / peak_balance * 100
        max_drawdown := math.max(max_drawdown, current_drawdown)
        array.push(drawdown_curve, current_drawdown)
        
        in_long_trade := false

// Exit Short Trade
if in_short_trade
    short_tp_hit = low <= trade_take_profit
    short_sl_hit = high >= trade_stop_loss
    
    if short_tp_hit or short_sl_hit
        // Calculate trade result
        exit_price = short_tp_hit ? trade_take_profit : trade_stop_loss
        trade_return = short_tp_hit ? trade_risk_amount * take_profit_rr : -trade_risk_amount
        
        // Update statistics
        total_trades += 1
        if trade_return > 0
            winning_trades += 1
            total_profit += trade_return
            current_consecutive_wins += 1
            current_consecutive_losses := 0
            max_consecutive_wins := math.max(max_consecutive_wins, current_consecutive_wins)
        else
            losing_trades += 1
            total_loss += math.abs(trade_return)
            current_consecutive_losses += 1
            current_consecutive_wins := 0
            max_consecutive_losses := math.max(max_consecutive_losses, current_consecutive_losses)
        
        # Update balance and equity
        current_balance += trade_return
        array.push(trade_returns, trade_return)
        array.push(equity_curve, current_balance)
        
        # Calculate drawdown
        peak_balance := math.max(peak_balance, current_balance)
        current_drawdown = (peak_balance - current_balance) / peak_balance * 100
        max_drawdown := math.max(max_drawdown, current_drawdown)
        array.push(drawdown_curve, current_drawdown)
        
        in_short_trade := false

// ═══════════════════════════════════════════════════════════════════════════════════
// 📊 PERFORMANCE CALCULATIONS
// ═══════════════════════════════════════════════════════════════════════════════════

// Calculate key performance metrics
win_rate = total_trades > 0 ? (winning_trades / total_trades) * 100 : 0
avg_win = winning_trades > 0 ? total_profit / winning_trades : 0
avg_loss = losing_trades > 0 ? total_loss / losing_trades : 0
profit_factor = total_loss > 0 ? total_profit / total_loss : na
total_return = ((current_balance - initial_balance) / initial_balance) * 100
sharpe_ratio = array.size(trade_returns) > 0 ? array.avg(trade_returns) / array.stdev(trade_returns) : na

// Risk-adjusted returns
calmar_ratio = max_drawdown > 0 ? total_return / max_drawdown : na
recovery_factor = total_loss > 0 ? (current_balance - initial_balance) / total_loss : na

// ═══════════════════════════════════════════════════════════════════════════════════
// 🎨 VISUAL DISPLAY
// ═══════════════════════════════════════════════════════════════════════════════════

// Plot Equity Curve
equity_normalized = show_equity_curve ? (current_balance / initial_balance - 1) * 100 : na
plot(equity_normalized, "Equity Curve (%)", color=equity_line_color, linewidth=2)

// Plot Drawdown
current_dd = array.size(drawdown_curve) > 0 ? array.get(drawdown_curve, array.size(drawdown_curve) - 1) : 0
plot(show_drawdown ? -current_dd : na, "Drawdown (%)", color=drawdown_color, linewidth=2)

// Zero line
hline(0, "Zero Line", color=color.gray, linestyle=hline.style_dashed)

// Trade Entry/Exit Markers
if show_trade_markers
    if long_signal
        label.new(bar_index, 0, "🔺 LONG", style=label.style_label_up, color=color.green, textcolor=color.white, size=size.small)
    
    if short_signal
        label.new(bar_index, 0, "🔻 SHORT", style=label.style_label_down, color=color.red, textcolor=color.white, size=size.small)

// ═══════════════════════════════════════════════════════════════════════════════════
// 📊 PERFORMANCE TABLES
// ═══════════════════════════════════════════════════════════════════════════════════

if show_performance_table and barstate.islast
    // Main Performance Table
    var table perf_table = table.new(position.bottom_left, 3, 10, bgcolor=color.new(color.white, 10), border_width=2)
    
    // Header
    table.cell(perf_table, 0, 0, "BTMM PERFORMANCE", bgcolor=color.navy, text_color=color.white, text_size=size.normal)
    table.cell(perf_table, 1, 0, "VALUE", bgcolor=color.gray, text_color=color.white, text_size=size.normal)
    table.cell(perf_table, 2, 0, "RATING", bgcolor=color.gray, text_color=color.white, text_size=size.normal)
    
    // Total Trades
    table.cell(perf_table, 0, 1, "Total Trades", bgcolor=color.blue, text_color=color.white)
    table.cell(perf_table, 1, 1, str.tostring(total_trades), bgcolor=color.new(color.blue, 70), text_color=color.white)
    trade_rating = total_trades >= 30 ? "✅ SUFFICIENT" : total_trades >= 10 ? "⚠️ LIMITED" : "❌ TOO FEW"
    trade_color = total_trades >= 30 ? color.new(color.green, 70) : total_trades >= 10 ? color.new(color.orange, 70) : color.new(color.red, 70)
    table.cell(perf_table, 2, 1, trade_rating, bgcolor=trade_color, text_color=color.white)
    
    // Win Rate
    table.cell(perf_table, 0, 2, "Win Rate", bgcolor=color.green, text_color=color.white)
    table.cell(perf_table, 1, 2, str.tostring(win_rate, "#.#") + "%", bgcolor=color.new(color.green, 70), text_color=color.white)
    wr_rating = win_rate >= 60 ? "🔥 EXCELLENT" : win_rate >= 50 ? "✅ GOOD" : win_rate >= 40 ? "⚠️ AVERAGE" : "❌ POOR"
    wr_color = win_rate >= 60 ? color.new(color.green, 50) : win_rate >= 50 ? color.new(color.green, 70) : win_rate >= 40 ? color.new(color.orange, 70) : color.new(color.red, 70)
    table.cell(perf_table, 2, 2, wr_rating, bgcolor=wr_color, text_color=color.white)
    
    // Profit Factor
    table.cell(perf_table, 0, 3, "Profit Factor", bgcolor=color.purple, text_color=color.white)
    pf_text = not na(profit_factor) ? str.tostring(profit_factor, "#.##") : "N/A"
    table.cell(perf_table, 1, 3, pf_text, bgcolor=color.new(color.purple, 70), text_color=color.white)
    pf_rating = not na(profit_factor) ? (profit_factor >= 2.0 ? "🔥 EXCELLENT" : profit_factor >= 1.5 ? "✅ GOOD" : profit_factor >= 1.0 ? "📊 BREAK-EVEN" : "❌ LOSING") : "❓ N/A"
    pf_color = not na(profit_factor) ? (profit_factor >= 2.0 ? color.new(color.green, 50) : profit_factor >= 1.5 ? color.new(color.green, 70) : profit_factor >= 1.0 ? color.new(color.orange, 70) : color.new(color.red, 70)) : color.new(color.gray, 70)
    table.cell(perf_table, 2, 3, pf_rating, bgcolor=pf_color, text_color=color.white)
    
    // Total Return
    table.cell(perf_table, 0, 4, "Total Return", bgcolor=color.orange, text_color=color.white)
    table.cell(perf_table, 1, 4, str.tostring(total_return, "#.#") + "%", bgcolor=color.new(color.orange, 70), text_color=color.white)
    return_rating = total_return >= 20 ? "🔥 EXCELLENT" : total_return >= 10 ? "✅ GOOD" : total_return >= 0 ? "📊 POSITIVE" : "❌ NEGATIVE"
    return_color = total_return >= 20 ? color.new(color.green, 50) : total_return >= 10 ? color.new(color.green, 70) : total_return >= 0 ? color.new(color.orange, 70) : color.new(color.red, 70)
    table.cell(perf_table, 2, 4, return_rating, bgcolor=return_color, text_color=color.white)
    
    // Max Drawdown
    table.cell(perf_table, 0, 5, "Max Drawdown", bgcolor=color.red, text_color=color.white)
    table.cell(perf_table, 1, 5, str.tostring(max_drawdown, "#.#") + "%", bgcolor=color.new(color.red, 70), text_color=color.white)
    dd_rating = max_drawdown <= 5 ? "✅ EXCELLENT" : max_drawdown <= 10 ? "📊 GOOD" : max_drawdown <= 20 ? "⚠️ MODERATE" : "❌ HIGH"
    dd_color = max_drawdown <= 5 ? color.new(color.green, 70) : max_drawdown <= 10 ? color.new(color.orange, 70) : max_drawdown <= 20 ? color.new(color.orange, 50) : color.new(color.red, 50)
    table.cell(perf_table, 2, 5, dd_rating, bgcolor=dd_color, text_color=color.white)
    
    // Current Balance
    table.cell(perf_table, 0, 6, "Current Balance", bgcolor=color.teal, text_color=color.white)
    table.cell(perf_table, 1, 6, "$" + str.tostring(current_balance, "#,###"), bgcolor=color.new(color.teal, 70), text_color=color.white)
    balance_status = current_balance > initial_balance ? "📈 PROFIT" : current_balance == initial_balance ? "📊 BREAK-EVEN" : "📉 LOSS"
    balance_color = current_balance > initial_balance ? color.new(color.green, 70) : current_balance == initial_balance ? color.new(color.gray, 70) : color.new(color.red, 70)
    table.cell(perf_table, 2, 6, balance_status, bgcolor=balance_color, text_color=color.white)
    
    // Sharpe Ratio
    table.cell(perf_table, 0, 7, "Sharpe Ratio", bgcolor=color.yellow, text_color=color.black)
    sharpe_text = not na(sharpe_ratio) ? str.tostring(sharpe_ratio, "#.##") : "N/A"
    table.cell(perf_table, 1, 7, sharpe_text, bgcolor=color.new(color.yellow, 70), text_color=color.black)
    sharpe_rating = not na(sharpe_ratio) ? (sharpe_ratio >= 2.0 ? "🔥 EXCELLENT" : sharpe_ratio >= 1.0 ? "✅ GOOD" : sharpe_ratio >= 0 ? "📊 POSITIVE" : "❌ POOR") : "❓ N/A"
    table.cell(perf_table, 2, 7, sharpe_rating, bgcolor=color.new(color.yellow, 70), text_color=color.black)
    
    // Consecutive Wins/Losses
    table.cell(perf_table, 0, 8, "Max Consec Wins", bgcolor=color.lime, text_color=color.black)
    table.cell(perf_table, 1, 8, str.tostring(max_consecutive_wins), bgcolor=color.new(color.lime, 70), text_color=color.black)
    win_streak_rating = max_consecutive_wins >= 5 ? "🔥 STRONG" : max_consecutive_wins >= 3 ? "✅ GOOD" : "📊 NORMAL"
    table.cell(perf_table, 2, 8, win_streak_rating, bgcolor=color.new(color.lime, 70), text_color=color.black)
    
    table.cell(perf_table, 0, 9, "Max Consec Losses", bgcolor=color.maroon, text_color=color.white)
    table.cell(perf_table, 1, 9, str.tostring(max_consecutive_losses), bgcolor=color.new(color.maroon, 70), text_color=color.white)
    loss_streak_rating = max_consecutive_losses <= 2 ? "✅ EXCELLENT" : max_consecutive_losses <= 4 ? "📊 ACCEPTABLE" : "⚠️ CONCERNING"
    loss_streak_color = max_consecutive_losses <= 2 ? color.new(color.green, 70) : max_consecutive_losses <= 4 ? color.new(color.orange, 70) : color.new(color.red, 50)
    table.cell(perf_table, 2, 9, loss_streak_rating, bgcolor=loss_streak_color, text_color=color.white)

// Strategy Summary Table
if show_performance_table and barstate.islast
    var table summary_table = table.new(position.top_right, 2, 6, bgcolor=color.new(color.white, 10), border_width=2)
    
    // Header
    table.cell(summary_table, 0, 0, "STRATEGY SUMMARY", bgcolor=color.navy, text_color=color.white, text_size=size.normal)
    table.cell(summary_table, 1, 0, "STATUS", bgcolor=color.gray, text_color=color.white, text_size=size.normal)
    
    // Overall Rating
    overall_score = 0
    if win_rate >= 50: overall_score += 1
    if not na(profit_factor) and profit_factor >= 1.5: overall_score += 1
    if max_drawdown <= 10: overall_score += 1
    if total_return >= 10: overall_score += 1
    if total_trades >= 20: overall_score += 1
    
    overall_rating = overall_score >= 4 ? "🔥 EXCELLENT" : overall_score >= 3 ? "✅ GOOD" : overall_score >= 2 ? "📊 AVERAGE" : "❌ NEEDS WORK"
    overall_color = overall_score >= 4 ? color.new(color.green, 50) : overall_score >= 3 ? color.new(color.green, 70) : overall_score >= 2 ? color.new(color.orange, 70) : color.new(color.red, 70)
    table.cell(summary_table, 0, 1, "Overall Rating", bgcolor=color.purple, text_color=color.white)
    table.cell(summary_table, 1, 1, overall_rating, bgcolor=overall_color, text_color=color.white)
    
    // Current Trade Status
    trade_status = in_long_trade ? "🔺 LONG ACTIVE" : in_short_trade ? "🔻 SHORT ACTIVE" : "❌ NO TRADE"
    trade_status_color = in_long_trade or in_short_trade ? color.new(color.blue, 70) : color.new(color.gray, 70)
    table.cell(summary_table, 0, 2, "Trade Status", bgcolor=color.blue, text_color=color.white)
    table.cell(summary_table, 1, 2, trade_status, bgcolor=trade_status_color, text_color=color.white)
    
    // Strategy Health
    health_score = 0
    if win_rate >= 45: health_score += 1
    if max_drawdown <= 15: health_score += 1
    if not na(profit_factor) and profit_factor >= 1.2: health_score += 1
    
    health_status = health_score >= 3 ? "💪 HEALTHY" : health_score >= 2 ? "📊 STABLE" : "⚠️ NEEDS ATTENTION"
    health_color = health_score >= 3 ? color.new(color.green, 70) : health_score >= 2 ? color.new(color.orange, 70) : color.new(color.red, 70)
    table.cell(summary_table, 0, 3, "Strategy Health", bgcolor=color.orange, text_color=color.white)
    table.cell(summary_table, 1, 3, health_status, bgcolor=health_color, text_color=color.white)
    
    // Risk Level
    risk_level = max_drawdown <= 5 ? "🟢 LOW" : max_drawdown <= 15 ? "🟡 MODERATE" : "🔴 HIGH"
    risk_color = max_drawdown <= 5 ? color.new(color.green, 70) : max_drawdown <= 15 ? color.new(color.orange, 70) : color.new(color.red, 70)
    table.cell(summary_table, 0, 4, "Risk Level", bgcolor=color.red, text_color=color.white)
    table.cell(summary_table, 1, 4, risk_level, bgcolor=risk_color, text_color=color.white)
    
    // Recommendation
    recommendation = overall_score >= 4 ? "🚀 CONTINUE" : overall_score >= 2 ? "🔧 OPTIMIZE" : "🛑 REVISE"
    rec_color = overall_score >= 4 ? color.new(color.green, 50) : overall_score >= 2 ? color.new(color.orange, 60) : color.new(color.red, 60)
    table.cell(summary_table, 0, 5, "Recommendation", bgcolor=color.navy, text_color=color.white)
    table.cell(summary_table, 1, 5, recommendation, bgcolor=rec_color, text_color=color.white)

// ═══════════════════════════════════════════════════════════════════════════════════
// 📤 EXPORT FOR INTEGRATION WITH OTHER SCRIPTS
// ═══════════════════════════════════════════════════════════════════════════════════

export win_rate
export profit_factor
export total_return
export max_drawdown
export current_balance
export total_trades
export in_long_trade
export in_short_trade