//@version=5
indicator("BTMM M&W Pattern Detection - Script 3/10", 
         shorttitle="BTMM-MW", 
         overlay=true, 
         max_boxes_count=100,
         max_lines_count=150, 
         max_labels_count=200,
         max_tables_count=2)

// ═══════════════════════════════════════════════════════════════════════════════════
// 📈 BTMM M&W PATTERN DETECTION - SCRIPT 3 OF 10
// Steve Mauro's Beat The Market Maker Methodology
// Focus: Second Leg M&W Patterns, 13 EMA Confirmation, Pattern Validation
// ═══════════════════════════════════════════════════════════════════════════════════

import TradingView/ta/7 as ta

// === M&W PATTERN DETECTION WITH SIMPLIFIED 13 EMA CONFIRMATION
// User's Method: Clean close above/below 13 EMA at second leg top/bottom
// ═══════════════════════════════════════════════════════════════════════════════════

// === ENHANCED PATTERN CONFIGURATION ===
pattern_group = "📈 M&W Pattern Detection"
enable_m_patterns = input.bool(true, "Enable M Patterns (Bearish)", group=pattern_group)
enable_w_patterns = input.bool(true, "Enable W Patterns (Bullish)", group=pattern_group)
enable_second_leg_only = input.bool(true, "Second Leg Focus (Steve Mauro)", group=pattern_group)
pattern_lookback = input.int(15, "Pattern Detection Lookback", minval=8, maxval=30, group=pattern_group)
pattern_tolerance = input.float(0.002, "Pattern Tolerance %", minval=0.001, maxval=0.01, step=0.001, group=pattern_group)

// === USER'S SIMPLIFIED CONFIRMATION METHOD ===
confirmation_group = "✅ User's Simplified Method"
simple_ema_confirmation = input.bool(true, "Simple 13 EMA Close Confirmation", group=confirmation_group, tooltip="User's method: Clean close above/below 13 EMA")
require_volume_confirmation = input.bool(true, "Require Volume Confirmation", group=confirmation_group)
min_pattern_height = input.float(0.5, "Minimum Pattern Height (ATR)", minval=0.2, maxval=2.0, step=0.1, group=confirmation_group)

// === VISUAL SETTINGS ===
visual_group = "🎨 Visual Configuration"
show_pattern_labels = input.bool(true, "Show Pattern Labels", group=visual_group)
show_entry_zones = input.bool(true, "Show Entry Zones", group=visual_group)
show_pattern_structure = input.bool(true, "Show Pattern Structure Lines", group=visual_group)
label_size_setting = input.string("normal", "Label Size", options=["tiny", "small", "normal", "large"], group=visual_group)
pattern_line_width = input.int(2, "Pattern Line Width", minval=1, maxval=5, group=visual_group)

// === ALERT CONFIGURATION ===
alert_group = "🚨 M&W Alert Settings"
enable_pattern_alerts = input.bool(true, "Pattern Formation Alerts", group=alert_group)
enable_second_leg_alerts = input.bool(true, "Second Leg Entry Alerts", group=alert_group)
enable_confirmation_alerts = input.bool(true, "Pattern Confirmation Alerts", group=alert_group)
alert_frequency = input.string("once_per_bar", "Alert Frequency", options=["once_per_bar", "once_per_bar_close"], group=alert_group)

// === EARLY ENTRY NAMABLE PATTERNS ===
early_entry_group = "🔍 Early Entry Namable Patterns"
enable_early_entries = input.bool(true, "Enable Early Entry Patterns", group=early_entry_group)
enable_flag_patterns = input.bool(true, "Flag Patterns", group=early_entry_group)
enable_pennant_patterns = input.bool(true, "Pennant Patterns", group=early_entry_group)
enable_rectangle_patterns = input.bool(true, "Rectangle/Channel Patterns", group=early_entry_group)
enable_triangle_patterns = input.bool(true, "Triangle Patterns", group=early_entry_group)
early_entry_bars = input.int(8, "Early Entry Pattern Bars", minval=4, maxval=15, group=early_entry_group)

// ═══════════════════════════════════════════════════════════════════════════════════
// 📊 HELPER FUNCTIONS AND CALCULATIONS
// ═══════════════════════════════════════════════════════════════════════════════════

// EMA 13 for confirmation (Ketchup Line)
ema_13 = ta.ema(close, 13)

// ATR for pattern height validation
atr_value = ta.atr(14)

// Volume analysis
avg_volume = ta.sma(volume, 20)
volume_spike = volume > avg_volume * 1.5

// Pivot detection
pivot_high = ta.pivothigh(high, pattern_lookback, pattern_lookback)
pivot_low = ta.pivotlow(low, pattern_lookback, pattern_lookback)

// ═══════════════════════════════════════════════════════════════════════════════════
// 📈 M PATTERN DETECTION (BEARISH REVERSAL)
// ═══════════════════════════════════════════════════════════════════════════════════

detect_m_pattern() =>
    var float left_shoulder_high = na
    var float head_high = na
    var float right_shoulder_high = na
    var int left_shoulder_bar = na
    var int head_bar = na
    var int right_shoulder_bar = na
    var bool m_pattern_active = false
    var bool second_leg_triggered = false
    
    // Look for pivot highs to form M pattern
    if not na(pivot_high)
        current_high = pivot_high
        current_bar = bar_index[pattern_lookback]
        
        // Initialize or update pattern points
        if na(left_shoulder_high)
            left_shoulder_high := current_high
            left_shoulder_bar := current_bar
        else if na(head_high) and current_high > left_shoulder_high
            head_high := current_high
            head_bar := current_bar
        else if na(right_shoulder_high) and not na(head_high) and current_high < head_high
            right_shoulder_high := current_high
            right_shoulder_bar := current_bar
            
            // Validate M pattern structure
            shoulder_symmetry = math.abs(left_shoulder_high - right_shoulder_high) / head_high <= pattern_tolerance
            pattern_height = head_high - math.min(left_shoulder_high, right_shoulder_high)
            sufficient_height = pattern_height >= atr_value * min_pattern_height
            
            if shoulder_symmetry and sufficient_height
                m_pattern_active := true
    
    // User's Simplified Second Leg Detection (Clean 13 EMA Close)
    if m_pattern_active and enable_second_leg_only and not second_leg_triggered
        // User's Method: Simple close below 13 EMA at second leg top
        if simple_ema_confirmation
            // Clean break below 13 EMA with close (user's preferred method)
            ema_break_confirmed = close < ema_13 and close[1] >= ema_13
            if ema_break_confirmed and (not require_volume_confirmation or volume_spike)
                second_leg_triggered := true
        else
            // Original neckline method (backup)
            neckline_level = math.min(left_shoulder_high, right_shoulder_high)
            if close < neckline_level and close < ema_13
                second_leg_triggered := true
    
    // Reset pattern if invalidated
    if m_pattern_active and high > head_high
        left_shoulder_high := na
        head_high := na
        right_shoulder_high := na
        m_pattern_active := false
        second_leg_triggered := false
    
    [m_pattern_active, second_leg_triggered, left_shoulder_high, head_high, right_shoulder_high, left_shoulder_bar, head_bar, right_shoulder_bar]

[m_pattern_formed, m_second_leg_active, m_left_shoulder, m_head, m_right_shoulder, m_left_bar, m_head_bar, m_right_bar] = detect_m_pattern()

// ═══════════════════════════════════════════════════════════════════════════════════
// 📉 W PATTERN DETECTION (BULLISH REVERSAL)
// ═══════════════════════════════════════════════════════════════════════════════════

detect_w_pattern() =>
    var float left_shoulder_low = na
    var float head_low = na
    var float right_shoulder_low = na
    var int left_shoulder_bar = na
    var int head_bar = na
    var int right_shoulder_bar = na
    var bool w_pattern_active = false
    var bool second_leg_triggered = false
    
    // Look for pivot lows to form W pattern
    if not na(pivot_low)
        current_low = pivot_low
        current_bar = bar_index[pattern_lookback]
        
        // Initialize or update pattern points
        if na(left_shoulder_low)
            left_shoulder_low := current_low
            left_shoulder_bar := current_bar
        else if na(head_low) and current_low < left_shoulder_low
            head_low := current_low
            head_bar := current_bar
        else if na(right_shoulder_low) and not na(head_low) and current_low > head_low
            right_shoulder_low := current_low
            right_shoulder_bar := current_bar
            
            // Validate W pattern structure
            shoulder_symmetry = math.abs(left_shoulder_low - right_shoulder_low) / head_low <= pattern_tolerance
            pattern_height = math.max(left_shoulder_low, right_shoulder_low) - head_low
            sufficient_height = pattern_height >= atr_value * min_pattern_height
            
            if shoulder_symmetry and sufficient_height
                w_pattern_active := true
    
    // User's Simplified Second Leg Detection (Clean 13 EMA Close)
    if w_pattern_active and enable_second_leg_only and not second_leg_triggered
        // User's Method: Simple close above 13 EMA at second leg bottom
        if simple_ema_confirmation
            // Clean break above 13 EMA with close (user's preferred method)
            ema_break_confirmed = close > ema_13 and close[1] <= ema_13
            if ema_break_confirmed and (not require_volume_confirmation or volume_spike)
                second_leg_triggered := true
        else
            // Original neckline method (backup)
            neckline_level = math.max(left_shoulder_low, right_shoulder_low)
            if close > neckline_level and close > ema_13
                second_leg_triggered := true
    
    // Reset pattern if invalidated
    if w_pattern_active and low < head_low
        left_shoulder_low := na
        head_low := na
        right_shoulder_low := na
        w_pattern_active := false
        second_leg_triggered := false
    
    [w_pattern_active, second_leg_triggered, left_shoulder_low, head_low, right_shoulder_low, left_shoulder_bar, head_bar, right_shoulder_bar]

[w_pattern_formed, w_second_leg_active, w_left_shoulder, w_head, w_right_shoulder, w_left_bar, w_head_bar, w_right_bar] = detect_w_pattern()

// ═══════════════════════════════════════════════════════════════════════════════════
// ✅ PATTERN CONFIRMATION AND CONFLUENCE
// ═══════════════════════════════════════════════════════════════════════════════════

calculate_confluence_score(pattern_type) =>
    score = 0
    
    // User's Simplified 13 EMA Confirmation (Primary Factor)
    if simple_ema_confirmation
        if pattern_type == "M" and close < ema_13
            score += 2  // Higher weight for user's primary method
        else if pattern_type == "W" and close > ema_13
            score += 2  // Higher weight for user's primary method
    else
        // Traditional EMA confirmation (backup method)
        if pattern_type == "M" and close < ema_13
            score += 1
        else if pattern_type == "W" and close > ema_13
            score += 1
    
    // Volume Confirmation
    if require_volume_confirmation and volume_spike
        score += 1
    
    // Price action confluence (clean candle close)
    if pattern_type == "M" and close < open  // Bearish candle
        score += 1
    else if pattern_type == "W" and close > open  // Bullish candle
        score += 1
    
    // Early Entry Pattern Bonus
    if early_entry_signal
        score += 1
    
    score

m_confluence_score = m_pattern_formed ? calculate_confluence_score("M") : 0
w_confluence_score = w_pattern_formed ? calculate_confluence_score("W") : 0

// Simplified confirmation requirements (user's preference)
confluence_threshold = simple_ema_confirmation ? 2 : 3  // Lower threshold for user's method
m_pattern_confirmed = m_pattern_formed and m_confluence_score >= confluence_threshold
w_pattern_confirmed = w_pattern_formed and w_confluence_score >= confluence_threshold

// ═══════════════════════════════════════════════════════════════════════════════════
// 🎨 VISUAL PATTERN DISPLAY
// ═══════════════════════════════════════════════════════════════════════════════════

label_size = switch label_size_setting
    "tiny" => size.tiny
    "small" => size.small
    "normal" => size.normal
    "large" => size.large
    => size.normal

// M Pattern Visualization
if show_pattern_structure and enable_m_patterns and m_pattern_formed and not na(m_left_shoulder) and not na(m_head) and not na(m_right_shoulder)
    // Draw pattern structure lines
    line.new(m_left_bar, m_left_shoulder, m_head_bar, m_head, color=color.red, width=pattern_line_width, style=line.style_solid)
    line.new(m_head_bar, m_head, m_right_bar, m_right_shoulder, color=color.red, width=pattern_line_width, style=line.style_solid)
    
    // Draw neckline
    neckline = math.min(m_left_shoulder, m_right_shoulder)
    line.new(m_left_bar, neckline, m_right_bar, neckline, color=color.orange, width=1, style=line.style_dashed)

// W Pattern Visualization
if show_pattern_structure and enable_w_patterns and w_pattern_formed and not na(w_left_shoulder) and not na(w_head) and not na(w_right_shoulder)
    // Draw pattern structure lines
    line.new(w_left_bar, w_left_shoulder, w_head_bar, w_head, color=color.green, width=pattern_line_width, style=line.style_solid)
    line.new(w_head_bar, w_head, w_right_bar, w_right_shoulder, color=color.green, width=pattern_line_width, style=line.style_solid)
    
    // Draw neckline
    neckline = math.max(w_left_shoulder, w_right_shoulder)
    line.new(w_left_bar, neckline, w_right_bar, neckline, color=color.lime, width=1, style=line.style_dashed)

// Pattern Labels
if show_pattern_labels
    if m_pattern_confirmed and not m_pattern_confirmed[1]
        label.new(bar_index, high + atr_value, 
                  "🔻 M PATTERN\n" + (m_second_leg_active ? "2ND LEG" : "FORMING") + 
                  "\nConfluence: " + str.tostring(m_confluence_score) + "/" + str.tostring(confluence_threshold), 
                  style=label.style_label_down, color=color.red, textcolor=color.white, size=label_size)
    
    if w_pattern_confirmed and not w_pattern_confirmed[1]
        label.new(bar_index, low - atr_value, 
                  "🔺 W PATTERN\n" + (w_second_leg_active ? "2ND LEG" : "FORMING") + 
                  "\nConfluence: " + str.tostring(w_confluence_score) + "/" + str.tostring(confluence_threshold), 
                  style=label.style_label_up, color=color.green, textcolor=color.white, size=label_size)

// Entry Zone Visualization
if show_entry_zones
    if m_second_leg_active and not na(m_right_shoulder)
        entry_zone_top = m_right_shoulder
        entry_zone_bottom = m_right_shoulder * (1 - pattern_tolerance)
        box.new(bar_index - 5, entry_zone_top, bar_index + 5, entry_zone_bottom, 
                bgcolor=color.new(color.red, 80), border_color=color.red, border_width=1)
    
    if w_second_leg_active and not na(w_right_shoulder)
        entry_zone_bottom = w_right_shoulder
        entry_zone_top = w_right_shoulder * (1 + pattern_tolerance)
        box.new(bar_index - 5, entry_zone_top, bar_index + 5, entry_zone_bottom, 
                bgcolor=color.new(color.green, 80), border_color=color.green, border_width=1)

// ═══════════════════════════════════════════════════════════════════════════════════
// 📊 M&W PATTERN STATUS TABLE
// ═══════════════════════════════════════════════════════════════════════════════════

if barstate.islast
    var table pattern_table = table.new(position.bottom_right, 3, 6, bgcolor=color.new(color.white, 10), border_width=2)
    
    // Header
    table.cell(pattern_table, 0, 0, "M&W PATTERNS", bgcolor=color.navy, text_color=color.white, text_size=size.normal)
    table.cell(pattern_table, 1, 0, "STATUS", bgcolor=color.gray, text_color=color.white, text_size=size.normal)
    table.cell(pattern_table, 2, 0, "CONFLUENCE", bgcolor=color.gray, text_color=color.white, text_size=size.normal)
    
    // M Pattern Status
    m_status_color = m_pattern_confirmed ? color.new(color.red, 50) : m_pattern_formed ? color.new(color.orange, 70) : color.new(color.gray, 80)
    m_status_text = m_pattern_confirmed ? "✅ CONFIRMED" : m_pattern_formed ? "⏳ FORMING" : "❌ NONE"
    table.cell(pattern_table, 0, 1, "M Pattern", bgcolor=color.red, text_color=color.white)
    table.cell(pattern_table, 1, 1, m_status_text, bgcolor=m_status_color, text_color=color.white)
    table.cell(pattern_table, 2, 1, str.tostring(m_confluence_score) + "/" + str.tostring(confluence_threshold), bgcolor=m_status_color, text_color=color.white)
    
    // W Pattern Status
    w_status_color = w_pattern_confirmed ? color.new(color.green, 50) : w_pattern_formed ? color.new(color.lime, 70) : color.new(color.gray, 80)
    w_status_text = w_pattern_confirmed ? "✅ CONFIRMED" : w_pattern_formed ? "⏳ FORMING" : "❌ NONE"
    table.cell(pattern_table, 0, 2, "W Pattern", bgcolor=color.green, text_color=color.white)
    table.cell(pattern_table, 1, 2, w_status_text, bgcolor=w_status_color, text_color=color.white)
    table.cell(pattern_table, 2, 2, str.tostring(w_confluence_score) + "/" + str.tostring(confluence_threshold), bgcolor=w_status_color, text_color=color.white)
    
    // Second Leg Status
    second_leg_status = m_second_leg_active ? "🔻 M 2ND LEG" : w_second_leg_active ? "🔺 W 2ND LEG" : "❌ NO ACTIVE"
    second_leg_color = m_second_leg_active ? color.new(color.red, 50) : w_second_leg_active ? color.new(color.green, 50) : color.new(color.gray, 80)
    table.cell(pattern_table, 0, 3, "Second Leg", bgcolor=color.purple, text_color=color.white)
    table.cell(pattern_table, 1, 3, second_leg_status, bgcolor=second_leg_color, text_color=color.white)
    table.cell(pattern_table, 2, 3, enable_second_leg_only ? "✅ ENABLED" : "❌ DISABLED", bgcolor=second_leg_color, text_color=color.white)
    
    // EMA 13 Confirmation
    ema_status = close > ema_13 ? "🔺 ABOVE" : "🔻 BELOW"
    ema_color = close > ema_13 ? color.new(color.green, 70) : color.new(color.red, 70)
    table.cell(pattern_table, 0, 4, "EMA 13", bgcolor=color.orange, text_color=color.white)
    table.cell(pattern_table, 1, 4, ema_status, bgcolor=ema_color, text_color=color.white)
    table.cell(pattern_table, 2, 4, str.tostring(ema_13, "#.#####"), bgcolor=ema_color, text_color=color.white)
    
    // Volume Analysis
    vol_status = volume_spike ? "🔥 SPIKE" : "📊 NORMAL"
    vol_color = volume_spike ? color.new(color.yellow, 50) : color.new(color.gray, 70)
    table.cell(pattern_table, 0, 5, "Volume", bgcolor=color.blue, text_color=color.white)
    table.cell(pattern_table, 1, 5, vol_status, bgcolor=vol_color, text_color=color.white)
    table.cell(pattern_table, 2, 5, str.tostring(volume / avg_volume, "#.#") + "x Avg", bgcolor=vol_color, text_color=color.white)

// Early Entry Pattern Labels and Alerts
if show_pattern_labels and enable_candlestick_patterns
    // Convert label size
    pattern_label_size_converted = switch pattern_label_size
        "tiny" => size.tiny
        "small" => size.small
        "large" => size.large
        => size.normal
    
    // === BULLISH CANDLESTICK PATTERNS ===
    
    // Single Candle Bullish
    if hammer
        label.new(bar_index, low, "🔨\nHAMMER", style=label.style_label_up, color=color.green, textcolor=color.white, size=pattern_label_size_converted)
    
    if inverted_hammer  
        label.new(bar_index, high, "🔨\nINV HAMMER", style=label.style_label_down, color=color.green, textcolor=color.white, size=pattern_label_size_converted)
    
    if dragonfly_doji
        label.new(bar_index, low, "🐉\nDRAGONFLY", style=label.style_label_up, color=color.blue, textcolor=color.white, size=pattern_label_size_converted)
    
    // Two Candle Bullish
    if railroad_bull
        label.new(bar_index, low, "🚂\nRAILROAD\nBULL", style=label.style_label_up, color=color.lime, textcolor=color.black, size=pattern_label_size_converted)
    
    if bullish_engulfing
        label.new(bar_index, low, "🫂\nBULL\nENGULF", style=label.style_label_up, color=color.green, textcolor=color.white, size=pattern_label_size_converted)
    
    if bullish_harami
        label.new(bar_index, low, "🤱\nBULL\nHARAMI", style=label.style_label_up, color=color.aqua, textcolor=color.white, size=pattern_label_size_converted)
    
    // Three Candle Bullish
    if morning_star
        label.new(bar_index, low, "⭐\nMORNING\nSTAR", style=label.style_label_up, color=color.yellow, textcolor=color.black, size=pattern_label_size_converted)
    
    if morning_doji_star
        label.new(bar_index, low, "⭐\nMORN DOJI\nSTAR", style=label.style_label_up, color=color.orange, textcolor=color.white, size=pattern_label_size_converted)
    
    if three_white_soldiers
        label.new(bar_index, low, "⚔️\nTHREE\nSOLDIERS", style=label.style_label_up, color=color.lime, textcolor=color.black, size=pattern_label_size_converted)
    
    // === BEARISH CANDLESTICK PATTERNS ===
    
    // Single Candle Bearish
    if shooting_star
        label.new(bar_index, high, "⭐\nSHOOTING\nSTAR", style=label.style_label_down, color=color.red, textcolor=color.white, size=pattern_label_size_converted)
    
    if hanging_man
        label.new(bar_index, high, "🪓\nHANGING\nMAN", style=label.style_label_down, color=color.maroon, textcolor=color.white, size=pattern_label_size_converted)
    
    if gravestone_doji
        label.new(bar_index, high, "🪦\nGRAVESTONE", style=label.style_label_down, color=color.purple, textcolor=color.white, size=pattern_label_size_converted)
    
    // Two Candle Bearish
    if railroad_bear
        label.new(bar_index, high, "🚂\nRAILROAD\nBEAR", style=label.style_label_down, color=color.red, textcolor=color.white, size=pattern_label_size_converted)
    
    if bearish_engulfing
        label.new(bar_index, high, "🫂\nBEAR\nENGULF", style=label.style_label_down, color=color.red, textcolor=color.white, size=pattern_label_size_converted)
    
    if bearish_harami
        label.new(bar_index, high, "🤱\nBEAR\nHARAMI", style=label.style_label_down, color=color.orange, textcolor=color.white, size=pattern_label_size_converted)
    
    // Three Candle Bearish
    if evening_star
        label.new(bar_index, high, "🌅\nEVENING\nSTAR", style=label.style_label_down, color=color.orange, textcolor=color.white, size=pattern_label_size_converted)
    
    if evening_doji_star
        label.new(bar_index, high, "🌅\nEVE DOJI\nSTAR", style=label.style_label_down, color=color.red, textcolor=color.white, size=pattern_label_size_converted)
    
    if three_black_crows
        label.new(bar_index, high, "🐦\nTHREE\nCROWS", style=label.style_label_down, color=color.black, textcolor=color.white, size=pattern_label_size_converted)
    
    // === NEUTRAL/SPECIAL PATTERNS ===
    
    if doji
        label.new(bar_index, high, "✚\nDOJI", style=label.style_label_center, color=color.gray, textcolor=color.white, size=pattern_label_size_converted)
    
    if cord_of_wood
        label.new(bar_index, math.avg(high, low), "🪵\nCORD OF\nWOOD", style=label.style_label_center, color=color.brown, textcolor=color.white, size=pattern_label_size_converted)
    
    if spinning_top
        label.new(bar_index, math.avg(high, low), "🌪️\nSPIN TOP", style=label.style_label_center, color=color.gray, textcolor=color.white, size=pattern_label_size_converted)
    
    // === RARE PATTERNS (if enabled) ===
    
    if show_rare_patterns
        if abandoned_baby_bull
            label.new(bar_index, low, "👶\nABANDONED\nBABY BULL", style=label.style_label_up, color=color.purple, textcolor=color.white, size=pattern_label_size_converted)
        
        if abandoned_baby_bear
            label.new(bar_index, high, "👶\nABANDONED\nBABY BEAR", style=label.style_label_down, color=color.purple, textcolor=color.white, size=pattern_label_size_converted)
        
        if white_marubozu
            label.new(bar_index, low, "💪\nWHITE\nMARUBOZU", style=label.style_label_up, color=color.lime, textcolor=color.black, size=pattern_label_size_converted)
        
        if black_marubozu
            label.new(bar_index, high, "💪\nBLACK\nMARUBOZU", style=label.style_label_down, color=color.black, textcolor=color.white, size=pattern_label_size_converted)
        
        if belt_hold_bull
            label.new(bar_index, low, "🥋\nBELT HOLD\nBULL", style=label.style_label_up, color=color.green, textcolor=color.white, size=pattern_label_size_converted)
        
        if belt_hold_bear
            label.new(bar_index, high, "🥋\nBELT HOLD\nBEAR", style=label.style_label_down, color=color.red, textcolor=color.white, size=pattern_label_size_converted)

    // === EARLY ENTRY CONFIRMATION LABELS ===
    
    if early_bullish_entry and not early_bullish_entry[1]
        label.new(bar_index, low - atr_value, 
                  "🔺 EARLY ENTRY\n" + pattern_name + "\n13 EMA BREAK UP", 
                  style=label.style_label_up, color=color.blue, textcolor=color.white, size=label_size)
    
    if early_bearish_entry and not early_bearish_entry[1]
        label.new(bar_index, high + atr_value, 
                  "🔻 EARLY ENTRY\n" + pattern_name + "\n13 EMA BREAK DOWN", 
                  style=label.style_label_down, color=color.purple, textcolor=color.white, size=label_size)

// Early Entry Pattern Table Status
if barstate.islast and enable_candlestick_patterns
    // Update pattern table with candlestick patterns
    table.cell(pattern_table, 0, 4, "Candlestick Patterns", bgcolor=color.blue, text_color=color.white)
    pattern_status_text = any_pattern_active ? "✅ " + pattern_name : "❌ NONE"
    pattern_status_color = any_pattern_active ? color.new(color.blue, 50) : color.new(color.gray, 80)
    table.cell(pattern_table, 1, 4, pattern_status_text, bgcolor=pattern_status_color, text_color=color.white)
    table.cell(pattern_table, 2, 4, "13 EMA ENTRY", bgcolor=pattern_status_color, text_color=color.white)
    
    // Early entry status
    table.cell(pattern_table, 0, 5, "Early Entry", bgcolor=color.purple, text_color=color.white)
    early_entry_text = early_entry_signal ? (early_bullish_entry ? "🔺 BULLISH" : "🔻 BEARISH") : "❌ NONE"
    early_entry_color = early_entry_signal ? color.new(color.purple, 50) : color.new(color.gray, 80)
    table.cell(pattern_table, 1, 5, early_entry_text, bgcolor=early_entry_color, text_color=color.white)
    table.cell(pattern_table, 2, 5, early_entry_signal ? pattern_name : "WAITING", bgcolor=early_entry_color, text_color=color.white)

// ═══════════════════════════════════════════════════════════════════════════════════
// 🚨 CANDLESTICK PATTERN ALERTS + 13 EMA CONFIRMATION
// ═══════════════════════════════════════════════════════════════════════════════════

alert_freq = alert_frequency == "once_per_bar" ? alert.freq_once_per_bar : alert.freq_once_per_bar_close

// M&W Pattern Formation Alerts
if enable_pattern_alerts
    if m_pattern_confirmed and not m_pattern_confirmed[1]
        alert("🔻 M PATTERN CONFIRMED!\n" +
              "Symbol: " + syminfo.ticker + "\n" +
              "Timeframe: " + timeframe.period + "\n" +
              "Pattern Type: BEARISH M\n" +
              "Confluence Score: " + str.tostring(m_confluence_score) + "/" + str.tostring(confluence_threshold) + "\n" +
              "EMA 13: " + str.tostring(ema_13, "#.#####") + "\n" +
              "Second Leg: " + (m_second_leg_active ? "ACTIVE" : "PENDING"), alert_freq)
    
    if w_pattern_confirmed and not w_pattern_confirmed[1]
        alert("🔺 W PATTERN CONFIRMED!\n" +
              "Symbol: " + syminfo.ticker + "\n" +
              "Timeframe: " + timeframe.period + "\n" +
              "Pattern Type: BULLISH W\n" +
              "Confluence Score: " + str.tostring(w_confluence_score) + "/" + str.tostring(confluence_threshold) + "\n" +
              "EMA 13: " + str.tostring(ema_13, "#.#####") + "\n" +
              "Second Leg: " + (w_second_leg_active ? "ACTIVE" : "PENDING"), alert_freq)

// Second Leg Entry Alerts
if enable_second_leg_alerts
    if m_second_leg_active and not m_second_leg_active[1]
        alert("🎯 M PATTERN SECOND LEG TRIGGERED!\n" +
              "Symbol: " + syminfo.ticker + "\n" +
              "Entry Signal: BEARISH\n" +
              "Price: " + str.tostring(close, "#.#####") + "\n" +
              "Pattern: M Formation\n" +
              "Action: Consider short entry", alert_freq)
    
    if w_second_leg_active and not w_second_leg_active[1]
        alert("🎯 W PATTERN SECOND LEG TRIGGERED!\n" +
              "Symbol: " + syminfo.ticker + "\n" +
              "Entry Signal: BULLISH\n" +
              "Price: " + str.tostring(close, "#.#####") + "\n" +
              "Pattern: W Formation\n" +
              "Action: Consider long entry", alert_freq)

// Major Reversal Pattern Alerts
if enable_confirmation_alerts and hammer and not hammer[1]
    alert("🔨 HAMMER PATTERN DETECTED\n" +
          "Symbol: " + syminfo.ticker + "\n" +
          "Timeframe: " + timeframe.period + "\n" +
          "Pattern: HAMMER - Potential Bullish Reversal\n" +
          "EMA 13: " + str.tostring(ema_13, "#.#####") + "\n" +
          "Close: " + str.tostring(close, "#.#####"), alert_freq)

if enable_confirmation_alerts and shooting_star and not shooting_star[1]
    alert("⭐ SHOOTING STAR PATTERN DETECTED\n" +
          "Symbol: " + syminfo.ticker + "\n" +
          "Timeframe: " + timeframe.period + "\n" +
          "Pattern: SHOOTING STAR - Potential Bearish Reversal\n" +
          "EMA 13: " + str.tostring(ema_13, "#.#####") + "\n" +
          "Close: " + str.tostring(close, "#.#####"), alert_freq)

if enable_confirmation_alerts and morning_star and not morning_star[1]
    alert("⭐ MORNING STAR PATTERN DETECTED\n" +
          "Symbol: " + syminfo.ticker + "\n" +
          "Timeframe: " + timeframe.period + "\n" +
          "Pattern: MORNING STAR - Strong Bullish Reversal\n" +
          "EMA 13: " + str.tostring(ema_13, "#.#####") + "\n" +
          "Close: " + str.tostring(close, "#.#####"), alert_freq)

if enable_confirmation_alerts and evening_star and not evening_star[1]
    alert("🌅 EVENING STAR PATTERN DETECTED\n" +
          "Symbol: " + syminfo.ticker + "\n" +
          "Timeframe: " + timeframe.period + "\n" +
          "Pattern: EVENING STAR - Strong Bearish Reversal\n" +
          "EMA 13: " + str.tostring(ema_13, "#.#####") + "\n" +
          "Close: " + str.tostring(close, "#.#####"), alert_freq)

// Engulfing Pattern Alerts
if enable_confirmation_alerts and bullish_engulfing and not bullish_engulfing[1]
    alert("🫂 BULLISH ENGULFING PATTERN\n" +
          "Symbol: " + syminfo.ticker + "\n" +
          "Timeframe: " + timeframe.period + "\n" +
          "Pattern: BULLISH ENGULFING - Strong Bullish Signal\n" +
          "EMA 13: " + str.tostring(ema_13, "#.#####") + "\n" +
          "Close: " + str.tostring(close, "#.#####"), alert_freq)

if enable_confirmation_alerts and bearish_engulfing and not bearish_engulfing[1]
    alert("🫂 BEARISH ENGULFING PATTERN\n" +
          "Symbol: " + syminfo.ticker + "\n" +
          "Timeframe: " + timeframe.period + "\n" +
          "Pattern: BEARISH ENGULFING - Strong Bearish Signal\n" +
          "EMA 13: " + str.tostring(ema_13, "#.#####") + "\n" +
          "Close: " + str.tostring(close, "#.#####"), alert_freq)

// Railroad Track Alerts
if enable_confirmation_alerts and railroad_bull and not railroad_bull[1]
    alert("🚂 BULLISH RAILROAD TRACKS\n" +
          "Symbol: " + syminfo.ticker + "\n" +
          "Timeframe: " + timeframe.period + "\n" +
          "Pattern: RAILROAD TRACKS - Side-by-side Bullish\n" +
          "EMA 13: " + str.tostring(ema_13, "#.#####") + "\n" +
          "Close: " + str.tostring(close, "#.#####"), alert_freq)

if enable_confirmation_alerts and railroad_bear and not railroad_bear[1]
    alert("🚂 BEARISH RAILROAD TRACKS\n" +
          "Symbol: " + syminfo.ticker + "\n" +
          "Timeframe: " + timeframe.period + "\n" +
          "Pattern: RAILROAD TRACKS - Side-by-side Bearish\n" +
          "EMA 13: " + str.tostring(ema_13, "#.#####") + "\n" +
          "Close: " + str.tostring(close, "#.#####"), alert_freq)

// Continuation Pattern Alerts
if enable_confirmation_alerts and three_white_soldiers and not three_white_soldiers[1]
    alert("⚔️ THREE WHITE SOLDIERS\n" +
          "Symbol: " + syminfo.ticker + "\n" +
          "Timeframe: " + timeframe.period + "\n" +
          "Pattern: THREE WHITE SOLDIERS - Strong Bullish Continuation\n" +
          "EMA 13: " + str.tostring(ema_13, "#.#####") + "\n" +
          "Close: " + str.tostring(close, "#.#####"), alert_freq)

if enable_confirmation_alerts and three_black_crows and not three_black_crows[1]
    alert("🐦 THREE BLACK CROWS\n" +
          "Symbol: " + syminfo.ticker + "\n" +
          "Timeframe: " + timeframe.period + "\n" +
          "Pattern: THREE BLACK CROWS - Strong Bearish Continuation\n" +
          "EMA 13: " + str.tostring(ema_13, "#.#####") + "\n" +
          "Close: " + str.tostring(close, "#.#####"), alert_freq)

// Indecision Pattern Alerts
if enable_confirmation_alerts and doji and not doji[1]
    alert("✚ DOJI PATTERN DETECTED\n" +
          "Symbol: " + syminfo.ticker + "\n" +
          "Timeframe: " + timeframe.period + "\n" +
          "Pattern: DOJI - Market Indecision\n" +
          "EMA 13: " + str.tostring(ema_13, "#.#####") + "\n" +
          "Close: " + str.tostring(close, "#.#####"), alert_freq)

if enable_confirmation_alerts and cord_of_wood and not cord_of_wood[1]
    alert("🪵 CORD OF WOOD PATTERN\n" +
          "Symbol: " + syminfo.ticker + "\n" +
          "Timeframe: " + timeframe.period + "\n" +
          "Pattern: CORD OF WOOD - Extended Indecision\n" +
          "EMA 13: " + str.tostring(ema_13, "#.#####") + "\n" +
          "Close: " + str.tostring(close, "#.#####"), alert_freq)

// User's Early Entry Pattern Alerts (Pattern + 13 EMA Confirmation)
if enable_confirmation_alerts and early_bullish_entry and not early_bullish_entry[1]
    alert("🔺 EARLY BULLISH ENTRY: " + pattern_name + " + 13 EMA BREAK\n" +
          "Symbol: " + syminfo.ticker + "\n" +
          "Timeframe: " + timeframe.period + "\n" +
          "Pattern: " + pattern_name + "\n" +
          "EMA 13: " + str.tostring(ema_13, "#.#####") + "\n" +
          "Entry Type: EARLY BULLISH CONFIRMATION\n" +
          "Close: " + str.tostring(close, "#.#####"), alert_freq)

if enable_confirmation_alerts and early_bearish_entry and not early_bearish_entry[1]
    alert("🔻 EARLY BEARISH ENTRY: " + pattern_name + " + 13 EMA BREAK\n" +
          "Symbol: " + syminfo.ticker + "\n" +
          "Timeframe: " + timeframe.period + "\n" +
          "Pattern: " + pattern_name + "\n" +
          "EMA 13: " + str.tostring(ema_13, "#.#####") + "\n" +
          "Entry Type: EARLY BEARISH CONFIRMATION\n" +
          "Close: " + str.tostring(close, "#.#####"), alert_freq)

// ═══════════════════════════════════════════════════════════════════════════════════
// 📊 CANDLESTICK PATTERN COUNTERS AND DATA OUTPUTS
// ═══════════════════════════════════════════════════════════════════════════════════

// Basic pattern occurrence tracking
var int hammer_count = 0
var int shooting_star_count = 0
var int morning_star_count = 0
var int evening_star_count = 0
var int engulfing_count = 0
var int railroad_count = 0
var int doji_count = 0

// Count patterns when they occur
if hammer and barstate.isconfirmed
    hammer_count += 1
if shooting_star and barstate.isconfirmed
    shooting_star_count += 1
if morning_star and barstate.isconfirmed
    morning_star_count += 1
if evening_star and barstate.isconfirmed
    evening_star_count += 1
if (bullish_engulfing or bearish_engulfing) and barstate.isconfirmed
    engulfing_count += 1
if (railroad_bull or railroad_bear) and barstate.isconfirmed
    railroad_count += 1
if doji and barstate.isconfirmed
    doji_count += 1

// Display pattern counts in data window
plot(hammer_count, "Hammer Count", color=color.green, display=display.data_window)
plot(shooting_star_count, "Shooting Star Count", color=color.red, display=display.data_window)
plot(morning_star_count, "Morning Star Count", color=color.yellow, display=display.data_window)
plot(evening_star_count, "Evening Star Count", color=color.orange, display=display.data_window)
plot(engulfing_count, "Engulfing Count", color=color.blue, display=display.data_window)
plot(railroad_count, "Railroad Count", color=color.purple, display=display.data_window)
plot(doji_count, "Doji Count", color=color.gray, display=display.data_window)

// Current pattern status (1 = active, 0 = none)
plot(hammer ? 1 : 0, "Current Hammer", color=color.green, display=display.data_window)
plot(shooting_star ? 1 : 0, "Current Shooting Star", color=color.red, display=display.data_window)
plot(railroad_bull ? 1 : 0, "Current Railroad Bull", color=color.lime, display=display.data_window)
plot(railroad_bear ? 1 : 0, "Current Railroad Bear", color=color.red, display=display.data_window)
plot(doji ? 1 : 0, "Current Doji", color=color.gray, display=display.data_window)
plot(cord_of_wood ? 1 : 0, "Current Cord of Wood", color=color.brown, display=display.data_window)

// Early entry signal status
plot(early_bullish_entry ? 1 : 0, "Early Bullish Entry", color=color.blue, display=display.data_window)
plot(early_bearish_entry ? 1 : 0, "Early Bearish Entry", color=color.purple, display=display.data_window)

// ═══════════════════════════════════════════════════════════════════════════════════
// 📊 EXPORT VALUES FOR OTHER SCRIPTS
// ═══════════════════════════════════════════════════════════════════════════════════

// Export user's simplified entry signals
export m_pattern_confirmed
export w_pattern_confirmed  
export m_second_leg_active
export w_second_leg_active
export early_bullish_entry
export early_bearish_entry
export pattern_name
export ema_13

// Export candlestick pattern detection
export bullish_patterns
export bearish_patterns
export indecision_patterns
export any_pattern_active

// Export specific pattern signals
export hammer
export shooting_star
export railroad_bull
export railroad_bear
export bullish_engulfing
export bearish_engulfing
export morning_star
export evening_star
export doji
export cord_of_wood