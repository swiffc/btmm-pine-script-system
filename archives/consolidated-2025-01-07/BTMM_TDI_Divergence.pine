//@version=5
indicator("BTMM TDI Divergence Scanner - Script 4/10", 
         shorttitle="BTMM-TDI", 
         overlay=false, 
         max_boxes_count=50,
         max_lines_count=100, 
         max_labels_count=100,
         max_tables_count=2)

// ═══════════════════════════════════════════════════════════════════════════════════
// 📊 BTMM TDI DIVERGENCE SCANNER - SCRIPT 4 OF 10
// Steve Mauro's Beat The Market Maker Methodology
// Focus: TDI (Traders Dynamic Index) Divergence Detection, Regular & Hidden Divergences
// ═══════════════════════════════════════════════════════════════════════════════════

import TradingView/ta/7 as ta

// === TDI CONFIGURATION ===
tdi_group = "📊 TDI Configuration"
rsi_length = input.int(13, "RSI Length", minval=5, maxval=50, group=tdi_group, tooltip="Standard RSI period for TDI calculation")
rsi_smooth = input.int(2, "RSI Smoothing", minval=1, maxval=10, group=tdi_group, tooltip="Smoothing period for RSI")
signal_length = input.int(7, "Signal Line Length", minval=3, maxval=21, group=tdi_group, tooltip="Signal line smoothing period")
base_line_length = input.int(34, "Base Line Length", minval=10, maxval=50, group=tdi_group, tooltip="Base line period")
show_tdi_lines = input.bool(true, "Show TDI Lines", group=tdi_group)

// === DIVERGENCE SETTINGS ===
divergence_group = "🔍 Divergence Detection"
enable_regular_divergence = input.bool(true, "Enable Regular Divergence", group=divergence_group)
enable_hidden_divergence = input.bool(true, "Enable Hidden Divergence", group=divergence_group)
divergence_lookback = input.int(15, "Divergence Lookback Period", minval=5, maxval=30, group=divergence_group)
divergence_sensitivity = input.float(1.0, "Divergence Sensitivity", minval=0.5, maxval=2.0, step=0.1, group=divergence_group)
min_divergence_distance = input.int(5, "Minimum Pivot Distance", minval=3, maxval=15, group=divergence_group)

// === VISUAL SETTINGS ===
visual_group = "🎨 Visual Configuration"
show_divergence_lines = input.bool(true, "Show Divergence Lines", group=visual_group)
show_divergence_labels = input.bool(true, "Show Divergence Labels", group=visual_group)
show_tdi_levels = input.bool(true, "Show TDI Overbought/Oversold", group=visual_group)
overbought_level = input.float(68.0, "Overbought Level", minval=60.0, maxval=80.0, group=visual_group)
oversold_level = input.float(32.0, "Oversold Level", minval=20.0, maxval=40.0, group=visual_group)

// === ALERT CONFIGURATION ===
alert_group = "🚨 TDI Alert Settings"
enable_divergence_alerts = input.bool(true, "Divergence Alert Notifications", group=alert_group)
enable_tdi_level_alerts = input.bool(true, "TDI Level Break Alerts", group=alert_group)
enable_signal_cross_alerts = input.bool(true, "TDI Signal Cross Alerts", group=alert_group)
alert_frequency = input.string("once_per_bar", "Alert Frequency", options=["once_per_bar", "once_per_bar_close"], group=alert_group)

// ═══════════════════════════════════════════════════════════════════════════════════
// 📊 TDI CALCULATIONS
// ═══════════════════════════════════════════════════════════════════════════════════

// Base RSI calculation
rsi_raw = ta.rsi(close, rsi_length)

// TDI Components
rsi_smoothed = ta.sma(rsi_raw, rsi_smooth)
signal_line = ta.sma(rsi_smoothed, signal_length)
base_line = ta.sma(signal_line, base_line_length)

// Volatility Band (Bollinger Bands on RSI)
bb_length = 34
bb_mult = 1.6185
rsi_bb_basis = ta.sma(rsi_smoothed, bb_length)
rsi_bb_dev = bb_mult * ta.stdev(rsi_smoothed, bb_length)
rsi_bb_upper = rsi_bb_basis + rsi_bb_dev
rsi_bb_lower = rsi_bb_basis - rsi_bb_dev

// TDI Line Colors
tdi_color = signal_line > base_line ? color.green : color.red
signal_color = rsi_smoothed > signal_line ? color.lime : color.red
base_color = signal_line > base_line ? color.blue : color.navy

// ═══════════════════════════════════════════════════════════════════════════════════
// 🔍 DIVERGENCE DETECTION LOGIC
// ═══════════════════════════════════════════════════════════════════════════════════

// Pivot detection for price and TDI
price_pivot_high = ta.pivothigh(high, divergence_lookback, divergence_lookback)
price_pivot_low = ta.pivotlow(low, divergence_lookback, divergence_lookback)
tdi_pivot_high = ta.pivothigh(rsi_smoothed, divergence_lookback, divergence_lookback)
tdi_pivot_low = ta.pivotlow(rsi_smoothed, divergence_lookback, divergence_lookback)

// Function to detect divergences
detect_divergences() =>
    var array<float> price_highs = array.new<float>()
    var array<float> price_lows = array.new<float>()
    var array<float> tdi_highs = array.new<float>()
    var array<float> tdi_lows = array.new<float>()
    var array<int> price_high_bars = array.new<int>()
    var array<int> price_low_bars = array.new<int>()
    var array<int> tdi_high_bars = array.new<int>()
    var array<int> tdi_low_bars = array.new<int>()
    
    // Store pivot highs
    if not na(price_pivot_high) and not na(tdi_pivot_high)
        array.push(price_highs, price_pivot_high)
        array.push(tdi_highs, tdi_pivot_high)
        array.push(price_high_bars, bar_index[divergence_lookback])
        array.push(tdi_high_bars, bar_index[divergence_lookback])
        
        // Keep only recent pivots
        if array.size(price_highs) > 10
            array.shift(price_highs)
            array.shift(tdi_highs)
            array.shift(price_high_bars)
            array.shift(tdi_high_bars)
    
    // Store pivot lows
    if not na(price_pivot_low) and not na(tdi_pivot_low)
        array.push(price_lows, price_pivot_low)
        array.push(tdi_lows, tdi_pivot_low)
        array.push(price_low_bars, bar_index[divergence_lookback])
        array.push(tdi_low_bars, bar_index[divergence_lookback])
        
        // Keep only recent pivots
        if array.size(price_lows) > 10
            array.shift(price_lows)
            array.shift(tdi_lows)
            array.shift(price_low_bars)
            array.shift(tdi_low_bars)
    
    // Detect Regular Bearish Divergence (Higher Highs in Price, Lower Highs in TDI)
    regular_bearish_div = false
    if enable_regular_divergence and array.size(price_highs) >= 2 and array.size(tdi_highs) >= 2
        last_price_high = array.get(price_highs, array.size(price_highs) - 1)
        prev_price_high = array.get(price_highs, array.size(price_highs) - 2)
        last_tdi_high = array.get(tdi_highs, array.size(tdi_highs) - 1)
        prev_tdi_high = array.get(tdi_highs, array.size(tdi_highs) - 2)
        
        if last_price_high > prev_price_high and last_tdi_high < prev_tdi_high
            regular_bearish_div := true
    
    // Detect Regular Bullish Divergence (Lower Lows in Price, Higher Lows in TDI)
    regular_bullish_div = false
    if enable_regular_divergence and array.size(price_lows) >= 2 and array.size(tdi_lows) >= 2
        last_price_low = array.get(price_lows, array.size(price_lows) - 1)
        prev_price_low = array.get(price_lows, array.size(price_lows) - 2)
        last_tdi_low = array.get(tdi_lows, array.size(tdi_lows) - 1)
        prev_tdi_low = array.get(tdi_lows, array.size(tdi_lows) - 2)
        
        if last_price_low < prev_price_low and last_tdi_low > prev_tdi_low
            regular_bullish_div := true
    
    // Detect Hidden Bearish Divergence (Lower Highs in Price, Higher Highs in TDI)
    hidden_bearish_div = false
    if enable_hidden_divergence and array.size(price_highs) >= 2 and array.size(tdi_highs) >= 2
        last_price_high = array.get(price_highs, array.size(price_highs) - 1)
        prev_price_high = array.get(price_highs, array.size(price_highs) - 2)
        last_tdi_high = array.get(tdi_highs, array.size(tdi_highs) - 1)
        prev_tdi_high = array.get(tdi_highs, array.size(tdi_highs) - 2)
        
        if last_price_high < prev_price_high and last_tdi_high > prev_tdi_high
            hidden_bearish_div := true
    
    // Detect Hidden Bullish Divergence (Higher Lows in Price, Lower Lows in TDI)
    hidden_bullish_div = false
    if enable_hidden_divergence and array.size(price_lows) >= 2 and array.size(tdi_lows) >= 2
        last_price_low = array.get(price_lows, array.size(price_lows) - 1)
        prev_price_low = array.get(price_lows, array.size(price_lows) - 2)
        last_tdi_low = array.get(tdi_lows, array.size(tdi_lows) - 1)
        prev_tdi_low = array.get(tdi_lows, array.size(tdi_lows) - 2)
        
        if last_price_low > prev_price_low and last_tdi_low < prev_tdi_low
            hidden_bullish_div := true
    
    [regular_bearish_div, regular_bullish_div, hidden_bearish_div, hidden_bullish_div]

[reg_bear_div, reg_bull_div, hid_bear_div, hid_bull_div] = detect_divergences()

// ═══════════════════════════════════════════════════════════════════════════════════
// 🎨 TDI VISUAL DISPLAY
// ═══════════════════════════════════════════════════════════════════════════════════

// Plot TDI Lines
plot(show_tdi_lines ? rsi_smoothed : na, "TDI Price Line", color=signal_color, linewidth=2)
plot(show_tdi_lines ? signal_line : na, "TDI Signal Line", color=tdi_color, linewidth=2)
plot(show_tdi_lines ? base_line : na, "TDI Base Line", color=base_color, linewidth=3)

// Plot Volatility Bands
plot(show_tdi_lines ? rsi_bb_upper : na, "TDI Upper Band", color=color.gray, linewidth=1)
plot(show_tdi_lines ? rsi_bb_lower : na, "TDI Lower Band", color=color.gray, linewidth=1)
fill(plot(rsi_bb_upper), plot(rsi_bb_lower), color=color.new(color.gray, 95), title="TDI Bands Fill")

// Overbought/Oversold Levels
hline(show_tdi_levels ? overbought_level : na, "Overbought", color=color.red, linestyle=hline.style_dashed)
hline(show_tdi_levels ? oversold_level : na, "Oversold", color=color.green, linestyle=hline.style_dashed)
hline(50, "Midline", color=color.gray, linestyle=hline.style_dotted)

// Background colors for extreme levels
bgcolor(rsi_smoothed > overbought_level ? color.new(color.red, 95) : na, title="Overbought BG")
bgcolor(rsi_smoothed < oversold_level ? color.new(color.green, 95) : na, title="Oversold BG")

// ═══════════════════════════════════════════════════════════════════════════════════
// 🔍 DIVERGENCE VISUALIZATION
// ═══════════════════════════════════════════════════════════════════════════════════

// Divergence Labels
if show_divergence_labels
    if reg_bear_div
        label.new(bar_index, rsi_smoothed + 5, "🔻 REG BEAR DIV", style=label.style_label_down, color=color.red, textcolor=color.white, size=size.normal)
    
    if reg_bull_div
        label.new(bar_index, rsi_smoothed - 5, "🔺 REG BULL DIV", style=label.style_label_up, color=color.green, textcolor=color.white, size=size.normal)
    
    if hid_bear_div
        label.new(bar_index, rsi_smoothed + 5, "🔸 HID BEAR DIV", style=label.style_label_down, color=color.orange, textcolor=color.white, size=size.small)
    
    if hid_bull_div
        label.new(bar_index, rsi_smoothed - 5, "🔸 HID BULL DIV", style=label.style_label_up, color=color.lime, textcolor=color.black, size=size.small)

// ═══════════════════════════════════════════════════════════════════════════════════
// 📊 TDI STATUS TABLE
// ═══════════════════════════════════════════════════════════════════════════════════

if barstate.islast
    var table tdi_table = table.new(position.bottom_left, 3, 7, bgcolor=color.new(color.white, 10), border_width=2)
    
    // Header
    table.cell(tdi_table, 0, 0, "TDI ANALYSIS", bgcolor=color.navy, text_color=color.white, text_size=size.normal)
    table.cell(tdi_table, 1, 0, "VALUE", bgcolor=color.gray, text_color=color.white, text_size=size.normal)
    table.cell(tdi_table, 2, 0, "STATUS", bgcolor=color.gray, text_color=color.white, text_size=size.normal)
    
    // TDI Price Line
    tdi_level_color = rsi_smoothed > overbought_level ? color.new(color.red, 70) : 
                     rsi_smoothed < oversold_level ? color.new(color.green, 70) : color.new(color.gray, 70)
    tdi_level_status = rsi_smoothed > overbought_level ? "🔥 OVERBOUGHT" : 
                      rsi_smoothed < oversold_level ? "🔥 OVERSOLD" : "📊 NEUTRAL"
    table.cell(tdi_table, 0, 1, "TDI Level", bgcolor=color.blue, text_color=color.white)
    table.cell(tdi_table, 1, 1, str.tostring(rsi_smoothed, "#.#"), bgcolor=tdi_level_color, text_color=color.white)
    table.cell(tdi_table, 2, 1, tdi_level_status, bgcolor=tdi_level_color, text_color=color.white)
    
    // Signal Line Relationship
    signal_status = rsi_smoothed > signal_line ? "🔺 ABOVE SIGNAL" : "🔻 BELOW SIGNAL"
    signal_color_bg = rsi_smoothed > signal_line ? color.new(color.green, 70) : color.new(color.red, 70)
    table.cell(tdi_table, 0, 2, "Signal Relation", bgcolor=color.purple, text_color=color.white)
    table.cell(tdi_table, 1, 2, str.tostring(signal_line, "#.#"), bgcolor=color.new(color.purple, 70), text_color=color.white)
    table.cell(tdi_table, 2, 2, signal_status, bgcolor=signal_color_bg, text_color=color.white)
    
    // Base Line Trend
    trend_status = signal_line > base_line ? "🔺 BULLISH" : "🔻 BEARISH"
    trend_color_bg = signal_line > base_line ? color.new(color.green, 70) : color.new(color.red, 70)
    table.cell(tdi_table, 0, 3, "TDI Trend", bgcolor=color.orange, text_color=color.white)
    table.cell(tdi_table, 1, 3, str.tostring(base_line, "#.#"), bgcolor=color.new(color.orange, 70), text_color=color.white)
    table.cell(tdi_table, 2, 3, trend_status, bgcolor=trend_color_bg, text_color=color.white)
    
    // Regular Divergence Status
    reg_div_active = reg_bear_div or reg_bull_div
    reg_div_status = reg_bear_div ? "🔻 BEARISH" : reg_bull_div ? "🔺 BULLISH" : "❌ NONE"
    reg_div_color = reg_bear_div ? color.new(color.red, 50) : reg_bull_div ? color.new(color.green, 50) : color.new(color.gray, 80)
    table.cell(tdi_table, 0, 4, "Regular Div", bgcolor=color.red, text_color=color.white)
    table.cell(tdi_table, 1, 4, reg_div_active ? "ACTIVE" : "NONE", bgcolor=reg_div_color, text_color=color.white)
    table.cell(tdi_table, 2, 4, reg_div_status, bgcolor=reg_div_color, text_color=color.white)
    
    // Hidden Divergence Status
    hid_div_active = hid_bear_div or hid_bull_div
    hid_div_status = hid_bear_div ? "🔸 BEARISH" : hid_bull_div ? "🔸 BULLISH" : "❌ NONE"
    hid_div_color = hid_bear_div ? color.new(color.orange, 50) : hid_bull_div ? color.new(color.lime, 50) : color.new(color.gray, 80)
    table.cell(tdi_table, 0, 5, "Hidden Div", bgcolor=color.orange, text_color=color.white)
    table.cell(tdi_table, 1, 5, hid_div_active ? "ACTIVE" : "NONE", bgcolor=hid_div_color, text_color=color.white)
    table.cell(tdi_table, 2, 5, hid_div_status, bgcolor=hid_div_color, text_color=color.white)
    
    // Overall TDI Signal
    overall_signal = (reg_bear_div or hid_bear_div) ? "🔻 BEARISH" : 
                    (reg_bull_div or hid_bull_div) ? "🔺 BULLISH" : 
                    signal_line > base_line and rsi_smoothed > signal_line ? "📈 TREND UP" :
                    signal_line < base_line and rsi_smoothed < signal_line ? "📉 TREND DOWN" : "📊 NEUTRAL"
    overall_color = (reg_bear_div or hid_bear_div) ? color.new(color.red, 50) : 
                   (reg_bull_div or hid_bull_div) ? color.new(color.green, 50) : 
                   signal_line > base_line ? color.new(color.blue, 70) : color.new(color.gray, 70)
    table.cell(tdi_table, 0, 6, "TDI Signal", bgcolor=color.navy, text_color=color.white)
    table.cell(tdi_table, 1, 6, "OVERALL", bgcolor=overall_color, text_color=color.white)
    table.cell(tdi_table, 2, 6, overall_signal, bgcolor=overall_color, text_color=color.white)

// ═══════════════════════════════════════════════════════════════════════════════════
// 🚨 TDI ALERTS
// ═══════════════════════════════════════════════════════════════════════════════════

alert_freq = alert_frequency == "once_per_bar" ? alert.freq_once_per_bar : alert.freq_once_per_bar_close

// Divergence Alerts
if enable_divergence_alerts
    if reg_bear_div
        alert("🔻 TDI REGULAR BEARISH DIVERGENCE!\n" +
              "Symbol: " + syminfo.ticker + "\n" +
              "Timeframe: " + timeframe.period + "\n" +
              "Type: Regular Bearish\n" +
              "TDI Level: " + str.tostring(rsi_smoothed, "#.#") + "\n" +
              "Signal: POTENTIAL REVERSAL DOWN", alert_freq)
    
    if reg_bull_div
        alert("🔺 TDI REGULAR BULLISH DIVERGENCE!\n" +
              "Symbol: " + syminfo.ticker + "\n" +
              "Timeframe: " + timeframe.period + "\n" +
              "Type: Regular Bullish\n" +
              "TDI Level: " + str.tostring(rsi_smoothed, "#.#") + "\n" +
              "Signal: POTENTIAL REVERSAL UP", alert_freq)
    
    if hid_bear_div
        alert("🔸 TDI HIDDEN BEARISH DIVERGENCE!\n" +
              "Symbol: " + syminfo.ticker + "\n" +
              "Timeframe: " + timeframe.period + "\n" +
              "Type: Hidden Bearish\n" +
              "TDI Level: " + str.tostring(rsi_smoothed, "#.#") + "\n" +
              "Signal: TREND CONTINUATION DOWN", alert_freq)
    
    if hid_bull_div
        alert("🔸 TDI HIDDEN BULLISH DIVERGENCE!\n" +
              "Symbol: " + syminfo.ticker + "\n" +
              "Timeframe: " + timeframe.period + "\n" +
              "Type: Hidden Bullish\n" +
              "TDI Level: " + str.tostring(rsi_smoothed, "#.#") + "\n" +
              "Signal: TREND CONTINUATION UP", alert_freq)

// TDI Level Alerts
if enable_tdi_level_alerts
    if ta.crossover(rsi_smoothed, overbought_level)
        alert("🔥 TDI OVERBOUGHT!\n" +
              "Symbol: " + syminfo.ticker + "\n" +
              "TDI Level: " + str.tostring(rsi_smoothed, "#.#") + "\n" +
              "Threshold: " + str.tostring(overbought_level, "#.#") + "\n" +
              "Signal: POTENTIAL REVERSAL ZONE", alert_freq)
    
    if ta.crossunder(rsi_smoothed, oversold_level)
        alert("🔥 TDI OVERSOLD!\n" +
              "Symbol: " + syminfo.ticker + "\n" +
              "TDI Level: " + str.tostring(rsi_smoothed, "#.#") + "\n" +
              "Threshold: " + str.tostring(oversold_level, "#.#") + "\n" +
              "Signal: POTENTIAL REVERSAL ZONE", alert_freq)

// Signal Cross Alerts
if enable_signal_cross_alerts
    if ta.crossover(rsi_smoothed, signal_line)
        alert("📈 TDI BULLISH CROSS!\n" +
              "Symbol: " + syminfo.ticker + "\n" +
              "TDI Price crossed above Signal Line\n" +
              "TDI Level: " + str.tostring(rsi_smoothed, "#.#") + "\n" +
              "Signal: MOMENTUM SHIFT UP", alert_freq)
    
    if ta.crossunder(rsi_smoothed, signal_line)
        alert("📉 TDI BEARISH CROSS!\n" +
              "Symbol: " + syminfo.ticker + "\n" +
              "TDI Price crossed below Signal Line\n" +
              "TDI Level: " + str.tostring(rsi_smoothed, "#.#") + "\n" +
              "Signal: MOMENTUM SHIFT DOWN", alert_freq)

// ═══════════════════════════════════════════════════════════════════════════════════
// 📤 EXPORT FOR INTEGRATION WITH OTHER SCRIPTS
// ═══════════════════════════════════════════════════════════════════════════════════

export rsi_smoothed
export signal_line
export base_line
export reg_bear_div
export reg_bull_div
export hid_bear_div
export hid_bull_div
export overbought_level
export oversold_level