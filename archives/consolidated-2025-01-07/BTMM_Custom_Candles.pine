//@version=5

// =============================================================================
// BTMM ENHANCED FOUNDATION LIBRARY - Script 9/10
// =============================================================================
// @description Enhanced core infrastructure library for all BTMM trading system components
// @purpose Provides session detection, 3-day cycle tracking, timeframe classification,
//          current-day filters, Asian-range helpers, EMA-stack analysis, volume/market
//          structure analytics, Fibonacci utilities, and risk-management calculations
// @method Centralized library functions imported by all BTMM scripts for consistency
// @author BTMM Development Team - Enhanced for Replit Platform
// @version 3.0 - Enhanced with Replit platform integration and performance optimizations
// @date July 2025
// =============================================================================

library("BTMMEnhancedFoundation", overlay=false)

// ═══════════════════════════════════════════════════════════════════════════════════
// 🎯 BTMM ENHANCED FOUNDATION LIBRARY - Core Infrastructure
// Enhanced version of your original BTMMFoundation.pine with additional features
// for the comprehensive 10-script integrated system
// ═══════════════════════════════════════════════════════════════════════════════════

import TradingView/ta/7 as ta

// ═══════════════════════════════════════════════════════════════════════════════════
// 📊 SESSION DETECTION & 3-DAY CYCLE (Enhanced)
// ═══════════════════════════════════════════════════════════════════════════════════

export session_and_cycle_enhanced() =>
    // Enhanced session time blocks with additional market maker periods
    asian = time(timeframe.period, "1700-0500", "America/New_York")
    london_pre = time(timeframe.period, "0200-0330", "America/New_York")  // Pre-London accumulation
    london = time(timeframe.period, "0330-0900", "America/New_York")      // London manipulation
    london_ny_overlap = time(timeframe.period, "0830-1100", "America/New_York")  // High volatility overlap
    ny = time(timeframe.period, "0930-1700", "America/New_York")          // NY distribution
    ny_close = time(timeframe.period, "1500-1700", "America/New_York")    // NY close positioning
    
    // Determine current session with priority hierarchy
    current_session = asian ? "ASIAN" : 
                     london_pre ? "LONDON_PRE" :
                     london_ny_overlap ? "LONDON_NY_OVERLAP" :
                     london ? "LONDON" : 
                     ny ? "NY" :
                     ny_close ? "NY_CLOSE" : "OFF_HOURS"
    
    // Enhanced 3-day cycle with Steve Mauro's institutional flow
    var int cycle_day = 1
    var int cycle_phase = 1  // 1=Accumulation, 2=Manipulation, 3=Distribution
    var int ref_start = 0
    
    // Reset at Monday London open
    reset_point = dayofweek == dayofweek.monday and london and not london[1]
    if reset_point
        cycle_day := 1
        cycle_phase := 1
        ref_start := time
    else
        elapsed_days = math.floor((time - ref_start) / (24 * 60 * 60 * 1000))
        if elapsed_days >= 0 and elapsed_days < 1
            cycle_day := 1
            cycle_phase := current_session == "ASIAN" ? 1 : current_session == "LONDON" or current_session == "LONDON_PRE" ? 2 : 3
        else if elapsed_days >= 1 and elapsed_days < 2
            cycle_day := 2
            cycle_phase := current_session == "ASIAN" ? 1 : current_session == "LONDON" or current_session == "LONDON_PRE" ? 2 : 3
        else if elapsed_days >= 2 and elapsed_days < 3
            cycle_day := 3
            cycle_phase := current_session == "ASIAN" ? 1 : current_session == "LONDON" or current_session == "LONDON_PRE" ? 2 : 3
    
    // Market maker activity level
    mm_activity_level = london_ny_overlap ? "HIGH" : (london or ny) ? "MEDIUM" : asian ? "LOW" : "MINIMAL"
    
    [asian, london, ny, london_ny_overlap, current_session, cycle_day, cycle_phase, mm_activity_level]

export is_prime_trading_session() =>
    [_, london, ny, overlap, _, _, _, _] = session_and_cycle_enhanced()
    london or ny or overlap

export get_session_volatility_factor() =>
    [_, london, ny, overlap, session, _, _, _] = session_and_cycle_enhanced()
    overlap ? 1.5 : (london or ny) ? 1.2 : session == "ASIAN" ? 0.8 : 0.5

// ═══════════════════════════════════════════════════════════════════════════════════
// ⏰ ENHANCED TIMEFRAME CLASSIFICATION
// ═══════════════════════════════════════════════════════════════════════════════════

export timeframe_classification_enhanced() =>
    tfm = timeframe.in_seconds() / 60
    
    // Steve Mauro timeframe hierarchy
    is_htf_analysis = tfm >= 240 and tfm <= 1440     // 4H-1D (Higher timeframe bias)
    is_intermediate = tfm >= 60 and tfm <= 240       // 1H-4H (Trend analysis)
    is_execution = tfm >= 15 and tfm <= 60           // 15M-1H (Entry execution)
    is_scalping = tfm >= 1 and tfm <= 15             // 1M-15M (Scalping/early entry)
    
    // BTMM optimal timeframes
    is_bias_tf = tfm >= 15                            // 15M+ for bias determination
    is_ote_tf = tfm >= 5 and tfm <= 60              // 5M-1H for OTE zones
    is_pattern_tf = tfm >= 15 and tfm <= 240        // 15M-4H for pattern recognition
    
    // Timeframe quality score (higher is better for BTMM)
    tf_quality_score = is_bias_tf ? (is_execution ? 10 : is_intermediate ? 8 : is_htf_analysis ? 6 : 4) : 2
    
    [is_htf_analysis, is_intermediate, is_execution, is_scalping, is_bias_tf, is_ote_tf, is_pattern_tf, tf_quality_score]

export get_optimal_timeframe_for_analysis(analysis_type) =>
    [htf, intermediate, execution, scalping, bias_tf, ote_tf, pattern_tf, quality] = timeframe_classification_enhanced()
    
    switch analysis_type
        "BIAS" => bias_tf
        "OTE" => ote_tf
        "PATTERNS" => pattern_tf
        "EXECUTION" => execution
        "SCALPING" => scalping
        => execution

// ═══════════════════════════════════════════════════════════════════════════════════
// 🌏 ENHANCED ASIAN RANGE ANALYSIS
// ═══════════════════════════════════════════════════════════════════════════════════

export asian_range_enhanced() =>
    [asian, _, _, _, _, _, _, _] = session_and_cycle_enhanced()
    
    var float asian_high = na
    var float asian_low = na
    var float asian_midpoint = na
    var float asian_range_size = na
    var bool asian_range_valid = false
    var int asian_range_bars = 0
    
    // Reset at Asian session start
    if asian and not asian[1]
        asian_high := high
        asian_low := low
        asian_range_bars := 0
        asian_range_valid := false
    
    // Update during Asian session
    if asian
        asian_high := math.max(asian_high, high)
        asian_low := math.min(asian_low, low)
        asian_range_bars += 1
    
    // Finalize at Asian session end
    if not asian and asian[1] and not na(asian_high) and not na(asian_low)
        asian_range_size := asian_high - asian_low
        asian_midpoint := (asian_high + asian_low) / 2
        
        // Validate range quality (Steve Mauro criteria)
        pip_size = syminfo.mintick * 10
        range_pips = asian_range_size / pip_size
        asian_range_valid := range_pips >= 20 and range_pips <= 100 and asian_range_bars >= 10
    
    // Calculate range extensions
    range_extension_up = not na(asian_high) and not na(asian_range_size) ? asian_high + (asian_range_size * 0.5) : na
    range_extension_down = not na(asian_low) and not na(asian_range_size) ? asian_low - (asian_range_size * 0.5) : na
    
    // Range breakout detection
    bullish_breakout = not na(asian_high) and close > asian_high
    bearish_breakout = not na(asian_low) and close < asian_low
    
    [asian_high, asian_low, asian_midpoint, asian_range_size, asian_range_valid, 
     range_extension_up, range_extension_down, bullish_breakout, bearish_breakout]

export asian_range_quality_score() =>
    [_, _, _, range_size, valid, _, _, _, _] = asian_range_enhanced()
    
    if not na(range_size) and valid
        pip_size = syminfo.mintick * 10
        range_pips = range_size / pip_size
        
        // Score based on optimal range criteria
        if range_pips >= 40 and range_pips <= 60
            10  // Perfect range
        else if range_pips >= 30 and range_pips <= 80
            8   // Good range
        else if range_pips >= 20 and range_pips <= 100
            6   // Acceptable range
        else
            3   // Suboptimal range
    else
        0   // Invalid range

// ═══════════════════════════════════════════════════════════════════════════════════
// 📊 ENHANCED EMA STACK ANALYSIS (Steve Mauro Food System)
// ═══════════════════════════════════════════════════════════════════════════════════

export ema_stack_analysis_enhanced(ema_5, ema_13, ema_50, ema_200, ema_800) =>
    // Perfect stack detection
    perfect_bull_stack = ema_5 > ema_13 and ema_13 > ema_50 and ema_50 > ema_200 and ema_200 > ema_800
    perfect_bear_stack = ema_5 < ema_13 and ema_13 < ema_50 and ema_50 < ema_200 and ema_200 < ema_800
    
    // Partial stack analysis
    short_term_bullish = ema_5 > ema_13 and ema_13 > ema_50
    medium_term_bullish = ema_50 > ema_200
    long_term_bullish = ema_200 > ema_800
    
    short_term_bearish = ema_5 < ema_13 and ema_13 < ema_50
    medium_term_bearish = ema_50 < ema_200
    long_term_bearish = ema_200 < ema_800
    
    // Stack strength calculation (0-10 scale)
    stack_strength = 0.0
    if perfect_bull_stack or perfect_bear_stack
        stack_strength := 10.0
    else
        strength_components = 0
        if short_term_bullish or short_term_bearish
            strength_components += 3
        if medium_term_bullish or medium_term_bearish
            strength_components += 4
        if long_term_bullish or long_term_bearish
            strength_components += 3
        stack_strength := strength_components
    
    // EMA separation analysis (confluence factor)
    ema_separation_score = 0.0
    if not na(ema_5) and not na(ema_800)
        total_range = math.abs(ema_5 - ema_800)
        avg_price = (ema_5 + ema_800) / 2
        separation_percentage = (total_range / avg_price) * 100
        
        ema_separation_score := separation_percentage >= 2.0 ? 10 : 
                               separation_percentage >= 1.0 ? 7 : 
                               separation_percentage >= 0.5 ? 5 : 3
    
    // Overall stack health
    stack_health = "POOR"
    if stack_strength >= 8
        stack_health := "EXCELLENT"
    else if stack_strength >= 6
        stack_health := "GOOD"
    else if stack_strength >= 4
        stack_health := "FAIR"
    
    [perfect_bull_stack, perfect_bear_stack, stack_strength, ema_separation_score, stack_health,
     short_term_bullish, medium_term_bullish, long_term_bullish,
     short_term_bearish, medium_term_bearish, long_term_bearish]

export calculate_btmm_bias_score_enhanced(price, ema_5, ema_13, ema_50, ema_200, ema_800) =>
    // Enhanced bias scoring with Steve Mauro methodology
    score = 0.0
    
    // Price position relative to each EMA (base score)
    score += price > ema_5 ? 1.0 : -1.0
    score += price > ema_13 ? 1.5 : -1.5    // Ketchup line gets extra weight
    score += price > ema_50 ? 1.0 : -1.0
    score += price > ema_200 ? 1.5 : -1.5   // Mayo line gets extra weight
    score += price > ema_800 ? 1.0 : -1.0
    
    // Stack alignment bonus
    [perfect_bull, perfect_bear, stack_strength, _, _, _, _, _, _, _, _] = ema_stack_analysis_enhanced(ema_5, ema_13, ema_50, ema_200, ema_800)
    
    if perfect_bull
        score += 3.0
    else if perfect_bear
        score -= 3.0
    else
        score += (stack_strength / 10) * 2.0 * (score > 0 ? 1 : -1)
    
    # Momentum factor
    ema_13_momentum = ta.change(ema_13, 3)
    if not na(ema_13_momentum)
        momentum_factor = ema_13_momentum > 0 ? 0.5 : ema_13_momentum < 0 ? -0.5 : 0
        score += momentum_factor
    
    # Cap the score between -10 and +10
    math.max(-10, math.min(10, score))

// ═══════════════════════════════════════════════════════════════════════════════════
// 📈 ENHANCED VOLUME & MARKET STRUCTURE ANALYSIS
// ═══════════════════════════════════════════════════════════════════════════════════

export volume_analysis_enhanced() =>
    // Enhanced volume analysis with institutional flow detection
    avg_volume_20 = ta.sma(volume, 20)
    avg_volume_50 = ta.sma(volume, 50)
    
    volume_ratio_20 = volume / avg_volume_20
    volume_ratio_50 = volume / avg_volume_50
    
    # Volume classification
    volume_spike = volume_ratio_20 >= 2.0
    volume_surge = volume_ratio_20 >= 1.5 and volume_ratio_20 < 2.0
    volume_normal = volume_ratio_20 >= 0.8 and volume_ratio_20 < 1.5
    volume_low = volume_ratio_20 < 0.8
    
    # Institutional volume detection
    institutional_volume = volume_ratio_50 >= 3.0 and (close > open) != (close[1] > open[1])
    
    # Volume trend analysis
    volume_trend_bullish = ta.sma(volume, 5) > ta.sma(volume, 20)
    volume_trend_bearish = ta.sma(volume, 5) < ta.sma(volume, 20)
    
    # Volume-price relationship
    volume_price_alignment = (volume_ratio_20 >= 1.2 and math.abs(ta.change(close)) >= ta.atr(14) * 0.5)
    
    [volume_spike, volume_surge, volume_normal, volume_low, institutional_volume,
     volume_trend_bullish, volume_trend_bearish, volume_price_alignment, volume_ratio_20]

export market_structure_analysis() =>
    # Enhanced market structure with Steve Mauro concepts
    atr_current = ta.atr(14)
    atr_slow = ta.sma(atr_current, 20)
    
    volatility_ratio = atr_current / atr_slow
    volatility_state = volatility_ratio >= 1.5 ? "HIGH" : volatility_ratio >= 1.2 ? "ELEVATED" : volatility_ratio <= 0.8 ? "LOW" : "NORMAL"
    
    # Market maker signature detection
    inside_bar = high <= high[1] and low >= low[1]
    outside_bar = high > high[1] and low < low[1]
    
    # Liquidity levels (simplified)
    swing_high_20 = ta.highest(high, 20)
    swing_low_20 = ta.lowest(low, 20)
    
    near_resistance = close >= swing_high_20 * 0.995
    near_support = close <= swing_low_20 * 1.005
    
    # Market phase detection
    trending = math.abs(ta.sma(close, 20) - ta.sma(close, 50)) >= atr_current
    ranging = not trending
    
    [volatility_state, inside_bar, outside_bar, near_resistance, near_support, trending, ranging, volatility_ratio]

// ═══════════════════════════════════════════════════════════════════════════════════
// 🔢 ENHANCED FIBONACCI & OTE UTILITIES
// ═══════════════════════════════════════════════════════════════════════════════════

export fibonacci_ote_analysis(swing_high, swing_low, trend_direction) =>
    if na(swing_high) or na(swing_low) or swing_high == swing_low
        [na, na, na, na, na, false, false]
    else
        range_size = swing_high - swing_low
        
        # Key Fibonacci levels
        fib_618 = trend_direction == 1 ? swing_high - (range_size * 0.618) : swing_low + (range_size * 0.618)
        fib_705 = trend_direction == 1 ? swing_high - (range_size * 0.705) : swing_low + (range_size * 0.705)
        fib_786 = trend_direction == 1 ? swing_high - (range_size * 0.786) : swing_low + (range_size * 0.786)
        fib_79 = trend_direction == 1 ? swing_high - (range_size * 0.79) : swing_low + (range_size * 0.79)
        fib_50 = swing_low + (range_size * 0.5)
        
        # OTE zone detection (70.5% to 79% retracement)
        ote_upper = trend_direction == 1 ? fib_705 : fib_79
        ote_lower = trend_direction == 1 ? fib_79 : fib_705
        
        in_ote_zone = close <= ote_upper and close >= ote_lower
        ote_zone_quality = in_ote_zone and math.abs(close - ((ote_upper + ote_lower) / 2)) <= (ote_upper - ote_lower) * 0.25
        
        [fib_618, fib_705, fib_786, fib_79, fib_50, in_ote_zone, ote_zone_quality]

export premium_discount_analysis(current_price, range_high, range_low) =>
    if na(range_high) or na(range_low) or range_high == range_low
        [na, false, false, false]
    else
        range_position = (current_price - range_low) / (range_high - range_low)
        
        in_premium = range_position >= 0.7
        in_discount = range_position <= 0.3
        in_equilibrium = range_position > 0.4 and range_position < 0.6
        
        [range_position * 100, in_premium, in_discount, in_equilibrium]

// ═══════════════════════════════════════════════════════════════════════════════════
// 💰 ENHANCED RISK MANAGEMENT CALCULATIONS
// ═══════════════════════════════════════════════════════════════════════════════════

export risk_management_enhanced(entry_price, stop_loss, take_profit, account_balance, risk_percentage) =>
    if na(entry_price) or na(stop_loss) or account_balance <= 0 or risk_percentage <= 0
        [na, na, na, na, na]
    else
        # Calculate risk metrics
        risk_distance = math.abs(entry_price - stop_loss)
        reward_distance = not na(take_profit) ? math.abs(take_profit - entry_price) : risk_distance * 2
        
        rr_ratio = reward_distance / risk_distance
        
        # Position sizing
        risk_amount = account_balance * (risk_percentage / 100)
        pip_value = syminfo.mintick * 10
        risk_pips = risk_distance / pip_value
        
        position_size = risk_pips > 0 ? risk_amount / (risk_pips * 10) : 0  # Simplified for major pairs
        position_size := math.min(position_size, account_balance * 0.1)  # Max 10% of account
        
        # Risk validation
        risk_valid = rr_ratio >= 1.5 and risk_pips >= 10 and risk_pips <= 100
        
        [risk_distance, reward_distance, rr_ratio, position_size, risk_valid]

export calculate_atr_stop_loss(entry_price, direction, atr_value, atr_multiplier) =>
    if na(entry_price) or na(atr_value) or atr_multiplier <= 0
        na
    else
        stop_distance = atr_value * atr_multiplier
        direction == 1 ? entry_price - stop_distance : entry_price + stop_distance

// ═══════════════════════════════════════════════════════════════════════════════════
// 🎯 ENHANCED CONFLUENCE SCORING SYSTEM
// ═══════════════════════════════════════════════════════════════════════════════════

export calculate_confluence_score(bias_score, session_quality, volume_quality, structure_quality, fib_quality) =>
    total_score = 0.0
    max_possible = 50.0
    
    # Bias contribution (max 15 points)
    bias_contribution = math.abs(bias_score) >= 6 ? 15 : math.abs(bias_score) >= 4 ? 10 : math.abs(bias_score) >= 2 ? 7 : 3
    total_score += bias_contribution
    
    # Session quality (max 10 points)
    session_contribution = session_quality == "HIGH" ? 10 : session_quality == "MEDIUM" ? 7 : session_quality == "LOW" ? 4 : 2
    total_score += session_contribution
    
    # Volume quality (max 10 points)
    volume_contribution = volume_quality >= 2.0 ? 10 : volume_quality >= 1.5 ? 7 : volume_quality >= 1.2 ? 5 : 2
    total_score += volume_contribution
    
    # Structure quality (max 10 points)
    structure_contribution = structure_quality == "TRENDING" ? 8 : structure_quality == "RANGING" ? 6 : 4
    total_score += structure_contribution
    
    # Fibonacci/OTE quality (max 5 points)
    fib_contribution = fib_quality ? 5 : 2
    total_score += fib_contribution
    
    confluence_percentage = (total_score / max_possible) * 100
    confluence_rating = confluence_percentage >= 80 ? "EXCELLENT" : 
                       confluence_percentage >= 65 ? "GOOD" : 
                       confluence_percentage >= 50 ? "FAIR" : "POOR"
    
    [total_score, confluence_percentage, confluence_rating]

// ═══════════════════════════════════════════════════════════════════════════════════
// 📤 EXPORT SUMMARY FUNCTION
// ═══════════════════════════════════════════════════════════════════════════════════

export get_btmm_system_status() =>
    [asian, london, ny, overlap, session, cycle_day, cycle_phase, mm_activity] = session_and_cycle_enhanced()
    [htf, intermediate, execution, scalping, bias_tf, ote_tf, pattern_tf, tf_quality] = timeframe_classification_enhanced()
    
    system_health_score = 0
    if bias_tf
        system_health_score += 25
    if is_prime_trading_session()
        system_health_score += 25
    if tf_quality >= 7
        system_health_score += 25
    if mm_activity == "HIGH" or mm_activity == "MEDIUM"
        system_health_score += 25
    
    system_status = system_health_score >= 80 ? "OPTIMAL" : 
                   system_health_score >= 60 ? "GOOD" : 
                   system_health_score >= 40 ? "FAIR" : "SUBOPTIMAL"
    
    [session, cycle_day, cycle_phase, tf_quality, system_health_score, system_status]