//@version=5
indicator("BTMM Patterns & Entries", "Patterns & Entries", overlay=true, max_labels_count=300, max_lines_count=300)

// =============================================================================
// STEVE MAURO BTMM PATTERNS & ENTRY SYSTEM (merged)
// =============================================================================
//  • Pattern detection: Railroad Tracks, Cord of Woods, OTE, 3-Candle Swing,
//    Asian-range breakouts.
//  • Entry engine: combines HTF bias + BTMM setups + patterns + EMA & session
//    confluence. Designed for execution time-frames (1-30M).
// =============================================================================

import BTMMFoundation as foundation

// -----------------------------------------------------------------------------
// 1. PATTERN DETECTION SETTINGS
// -----------------------------------------------------------------------------
var g_PAT = "Pattern Detection"
enable_railroad  = input.bool(true,  "Railroad Tracks",                group=g_PAT)
enable_cordwood   = input.bool(true,  "Cord of Woods",                  group=g_PAT)
enable_ote        = input.bool(true,  "OTE (Optimal Trade Entry)",      group=g_PAT)
enable_three_cand = input.bool(true,  "3-Candle Swing",                 group=g_PAT)
enable_asian_brk  = input.bool(true,  "Asian Range Breakouts",          group=g_PAT)

var g_ADVANCED = "Advanced Market Maker Patterns"
enable_evening_star = input.bool(true, "Evening Star Pattern",          group=g_ADVANCED)
enable_morning_star = input.bool(true, "Morning Star Pattern",          group=g_ADVANCED)
enable_shift_candle = input.bool(true, "Shift Candle (10+ Pips)",       group=g_ADVANCED)
shift_candle_pips   = input.int(10, "Min Shift Candle Pips", 5, 50,     group=g_ADVANCED)

var g_PVALID = "Pattern Validation"
require_vol_conf  = input.bool(true,  "Require Volume Confirmation",     group=g_PVALID)
vol_spike_th      = input.float(1.3,  "Volume Spike Threshold", 1.1, 3.0, group=g_PVALID)
require_sess_filt = input.bool(true,  "Only During Trading Sessions",    group=g_PVALID)
min_pat_size_atr  = input.float(0.5,  "Min Pattern Size (ATR)", 0.3, 2.0, group=g_PVALID)

var g_OTE = "OTE Settings"
ote_fib_lo   = input.float(0.618, "OTE Entry Low", 0.5, 0.8, group=g_OTE)
ote_fib_hi   = input.float(0.786, "OTE Entry High",0.7, 0.9, group=g_OTE)
ote_swingLen = input.int(20,     "OTE Swing Length",10, 50, group=g_OTE)

// -----------------------------------------------------------------------------
// 2. ENTRY ENGINE SETTINGS
// -----------------------------------------------------------------------------
var g_ENTRY = "Entry Settings"
enable_ema_entries  = input.bool(true,  "EMA-Based Entries",      group=g_ENTRY)
enable_pat_entries  = input.bool(true,  "Pattern-Based Entries",  group=g_ENTRY)
enable_confluence   = input.bool(true,  "Multi-Confluence Entries",group=g_ENTRY)
require_htf_bias    = input.bool(true,  "Require HTF Bias Alignment", group=g_ENTRY)

var g_EXT = "External Sources"
htf_bias_src       = input.source(close, "HTF Bias",          group=g_EXT)
bull_setup_src     = input.source(close, "Bullish Setup",     group=g_EXT)
bear_setup_src     = input.source(close, "Bearish Setup",     group=g_EXT)
asian_high_src     = input.source(high,  "Asian High",        group=g_EXT)
asian_low_src      = input.source(low,   "Asian Low",         group=g_EXT)

var g_LEVELS = "Level Detection Sources"
level1_formation_src = input.source(close, "Level 1 Formation", group=g_LEVELS)
level2_formation_src = input.source(close, "Level 2 Formation", group=g_LEVELS)
level3_formation_src = input.source(close, "Level 3 Formation", group=g_LEVELS)
level_test_src       = input.source(close, "Level Test",        group=g_LEVELS)
level_break_src      = input.source(close, "Level Break",       group=g_LEVELS)
enable_level_confluence = input.bool(true, "Use Level Confluence", group=g_LEVELS)

var g_CYCLE = "MM Weekly Cycle Sources"
cycle_day_src        = input.source(close, "Cycle Day",         group=g_CYCLE)
pfh_signal_src       = input.source(close, "PFH Signal",        group=g_CYCLE)
pfl_signal_src       = input.source(close, "PFL Signal",        group=g_CYCLE)
trend_reset_src      = input.source(close, "Trend Reset",       group=g_CYCLE)
psychology_complete_src = input.source(close, "Psychology Complete", group=g_CYCLE)
reversal_zone_src    = input.source(close, "Reversal Zone",     group=g_CYCLE)
false_move_src       = input.source(close, "False Move",        group=g_CYCLE)
enable_cycle_confluence = input.bool(true, "Use Cycle Confluence", group=g_CYCLE)

var g_FILTER = "Entry Filters"
min_bias_strength  = input.float(0.2, "Min HTF Bias Strength", 0.0,1.0, group=g_FILTER)
require_vol_spike  = input.bool(true,  "Require Volume Spike",          group=g_FILTER)
vol_spike_th_entry = input.float(1.4,  "Volume Spike Threshold",1.1,3.0, group=g_FILTER)
require_session_en = input.bool(true,  "Session Confluence Filter",     group=g_FILTER)
london_kz_only     = input.bool(false, "London Killzone Only",          group=g_FILTER)
ny_kz_only         = input.bool(false, "NY Killzone Only",              group=g_FILTER)

var g_STYLE = "Visual Style"
col_rr_bull   = input.color(color.lime,   "Railroad Bull", group=g_STYLE)
col_rr_bear   = input.color(color.red,    "Railroad Bear", group=g_STYLE)
col_cord_bull = input.color(color.green,  "Cord Bull",     group=g_STYLE)
col_cord_bear = input.color(color.maroon, "Cord Bear",     group=g_STYLE)
col_ote       = input.color(color.purple, "OTE",           group=g_STYLE)
col_3candle   = input.color(color.orange, "3-Candle",      group=g_STYLE)
col_early     = input.color(color.yellow, "Early Entry",   group=g_STYLE)
col_optimal   = input.color(color.lime,   "Optimal Entry", group=g_STYLE)
col_sell      = input.color(color.red,    "Sell Entry",    group=g_STYLE)
col_conf      = input.color(color.purple, "High Confluence",group=g_STYLE)
col_evening_star = input.color(color.orange, "Evening Star", group=g_STYLE)
col_morning_star = input.color(color.yellow, "Morning Star", group=g_STYLE)
col_shift_candle = input.color(color.fuchsia, "Shift Candle", group=g_STYLE)

var g_DISP = "Display"
show_pat_labels   = input.bool(true,  "Show Pattern Labels",  group=g_DISP)
show_stats_table  = input.bool(true,  "Show Pattern Stats",   group=g_DISP)
show_entry_dash   = input.bool(true,  "Show Entry Dashboard", group=g_DISP)
show_conf_marks   = input.bool(true,  "Show Confluence Marks",group=g_DISP)
auto_hide_hist    = input.bool(true,  "Auto-Hide History ≤5M", group=g_DISP)

// -----------------------------------------------------------------------------
// 3. CONTEXT & MARKET DATA
// -----------------------------------------------------------------------------
[hide_hist, is_today] = foundation.current_day_filter(auto_hide_hist, false)
[asian_sess, london_sess, ny_sess, cur_sess, cycle_day] = foundation.session_and_cycle()
[is_htf, is_exec, is_early, is_opt] = foundation.timeframe_classification()
trade_sess = foundation.is_trading_session()

atr       = foundation.atr14()
avg_vol   = ta.sma(volume,20)
[vol_spk, , vol_ratio] = foundation.volume_analysis()
vol_ok_pat= not require_vol_conf or (vol_spk and vol_ratio >= vol_spike_th)

sess_ok_pat = not require_sess_filt or trade_sess

min_size = atr * min_pat_size_atr

// Global flags/scores for entry engine (used later & plotted)
var bool buy_entry = false  // BUY entry signal for current bar
var bool sell_entry = false // SELL entry signal for current bar
var int  confl_bull = 0     // Bullish confluence score 0-5
var int  confl_bear = 0     // Bearish confluence score 0-5

// -----------------------------------------------------------------------------
// 4. EMA CALCS
// -----------------------------------------------------------------------------
ema5  = ta.ema(close,5)
ema13 = ta.ema(close,13)
ema50 = ta.ema(close,50)
ema200= ta.ema(close,200)
[bull_stack,bear_stack,,_,_] = foundation.ema_stack_analysis(ema5,ema13,ema50,ema200,na)

// -----------------------------------------------------------------------------
// 5. PATTERN DETECTORS
// -----------------------------------------------------------------------------
rr_bull = rr_bear = false
if enable_railroad and sess_ok_pat and is_today
    prev_dn = close[1] < open[1] and math.abs(close[1]-open[1]) >= min_size
    curr_up = close > open and math.abs(close-open) >= min_size
    similar = math.abs(math.abs(close-open)-math.abs(close[1]-open[1])) <= min_size*0.3
    rr_bull := prev_dn and curr_up and similar and close > close[1] and vol_ok_pat
    prev_up = close[1] > open[1] and math.abs(close[1]-open[1]) >= min_size
    curr_dn = close < open and math.abs(close-open) >= min_size
    rr_bear := prev_up and curr_dn and similar and close < close[1] and vol_ok_pat

cord_bull = cord_bear = false
if enable_cordwood and sess_ok_pat and is_today
    lookbk = foundation.timeframe_minutes() <= 5 ? 10 : 6
    tol    = atr * 0.3
    res=0; sup=0
    for i=1 to lookbk
        if math.abs(high[i]-high)<=tol
            res+=1
        if math.abs(low[i]-low)<=tol
            sup+=1
    cord_bull := sup>=2 and close>open and low<=low[1] and vol_ok_pat
    cord_bear := res>=2 and close<open and high>=high[1] and vol_ok_pat

ote_bull = ote_bear = false
if enable_ote and sess_ok_pat and is_today
    swing_hi = ta.highest(high, ote_swingLen)
    swing_lo = ta.lowest(low,  ote_swingLen)
    rng      = swing_hi - swing_lo
    fib618   = swing_lo + rng*0.618
    fib786   = swing_lo + rng*0.786
    ote_bull := close>=fib618 and close<=fib786 and close>open and low<fib618 and vol_ok_pat
    bear_fib618 = swing_hi - rng*0.618
    bear_fib786 = swing_hi - rng*0.786
    ote_bear := close<=bear_fib618 and close>=bear_fib786 and close<open and high>bear_fib618 and vol_ok_pat

three_bull = three_bear = false
if enable_three_cand and sess_ok_pat and is_today
    vol_ok3  = volume > avg_vol*1.2
    rng_ok   = (high-low) >= atr*min_pat_size_atr
    three_bull := close[2]<open[2] and close[1]<open[1] and close>open and close>close[1] and close>close[2] and vol_ok3 and rng_ok
    three_bear := close[2]>open[2] and close[1]>open[1] and close<open and close<close[1] and close<close[2] and vol_ok3 and rng_ok

asian_bull = asian_bear = false
if enable_asian_brk and not asian_sess and not na(asian_high_src) and not na(asian_low_src)
    asian_bull := high>asian_high_src and close>asian_high_src and vol_ok_pat
    asian_bear := low<asian_low_src and close<asian_low_src and vol_ok_pat

// ADVANCED MARKET MAKER PATTERNS
evening_star_bear = false
if enable_evening_star and sess_ok_pat and is_today
    // Evening Star: 3-candle bearish reversal pattern
    c1_bull = close[2] > open[2] and (close[2] - open[2]) >= atr * 0.8
    c2_small = math.abs(close[1] - open[1]) <= atr * 0.3
    c2_gaps_up = low[1] > high[2]
    c3_bear = close < open and (open - close) >= atr * 0.8
    c3_closes_low = close < (open[2] + close[2]) / 2
    evening_star_bear := c1_bull and c2_small and c2_gaps_up and c3_bear and c3_closes_low and vol_ok_pat

morning_star_bull = false
if enable_morning_star and sess_ok_pat and is_today
    // Morning Star: 3-candle bullish reversal pattern
    c1_bear = close[2] < open[2] and (open[2] - close[2]) >= atr * 0.8
    c2_small = math.abs(close[1] - open[1]) <= atr * 0.3
    c2_gaps_down = high[1] < low[2]
    c3_bull = close > open and (close - open) >= atr * 0.8
    c3_closes_high = close > (open[2] + close[2]) / 2
    morning_star_bull := c1_bear and c2_small and c2_gaps_down and c3_bull and c3_closes_high and vol_ok_pat

shift_bull = shift_bear = false
if enable_shift_candle and sess_ok_pat and is_today
    // Shift Candle: Strong directional move (10+ pips equivalent)
    pip_multiplier = syminfo.type == "forex" ? 10000 : syminfo.type == "crypto" ? 1 : 1
    min_shift_size = shift_candle_pips / pip_multiplier
    current_size = math.abs(close - open)
    
    shift_bull := close > open and current_size >= min_shift_size and close >= high - (high - low) * 0.2 and vol_ok_pat
    shift_bear := close < open and current_size >= min_shift_size and close <= low + (high - low) * 0.2 and vol_ok_pat

pat_bull = rr_bull or cord_bull or ote_bull or three_bull or asian_bull or morning_star_bull or shift_bull
pat_bear = rr_bear or cord_bear or ote_bear or three_bear or asian_bear or evening_star_bear or shift_bear

name_bull = rr_bull?"RAILROAD":cord_bull?"CORD":ote_bull?"OTE":three_bull?"3-CANDLE":asian_bull?"ASIAN HIGH":morning_star_bull?"MORNING STAR":shift_bull?"SHIFT BULL":""
name_bear = rr_bear?"RAILROAD":cord_bear?"CORD":ote_bear?"OTE":three_bear?"3-CANDLE":asian_bear?"ASIAN LOW":evening_star_bear?"EVENING STAR":shift_bear?"SHIFT BEAR":""

if show_pat_labels and pat_bull
    c = rr_bull?col_rr_bull:cord_bull?col_cord_bull:ote_bull?col_ote:three_bull?col_3candle:morning_star_bull?col_morning_star:shift_bull?col_shift_candle:color.lime
    emoji = morning_star_bull?"⭐":shift_bull?"🚀":"📈"
    label.new(bar_index, low-atr*0.5, emoji+" "+name_bull+"\n"+timeframe.period, style=label.style_label_up, color=c, textcolor=color.black)
if show_pat_labels and pat_bear
    c = rr_bear?col_rr_bear:cord_bear?col_cord_bear:ote_bear?col_ote:three_bear?col_3candle:evening_star_bear?col_evening_star:shift_bear?col_shift_candle:color.red
    emoji = evening_star_bear?"🌟":shift_bear?"📉":"📉"
    label.new(bar_index, high+atr*0.5, emoji+" "+name_bear+"\n"+timeframe.period, style=label.style_label_down, color=c, textcolor=color.white)

plotshape(pat_bull, "Bull Pattern", shape.triangleup, location.belowbar, color.new(color.lime,20), size=size.small)
plotshape(pat_bear, "Bear Pattern", shape.triangledown, location.abovebar, color.new(color.red,20), size=size.small)

// -----------------------------------------------------------------------------
// 6. ENTRY ENGINE (execution TF)
// -----------------------------------------------------------------------------
if is_exec and trade_sess and is_today
    // external HTF & setup signals
    htf_bias = htf_bias_src
    bull_setup = bull_setup_src>0
    bear_setup = bear_setup_src>0

    vol_entry_ok = not require_vol_spike or (vol_spk and vol_ratio>=vol_spike_th_entry)
    london_kz = london_sess and hour>=7 and hour<=10
    ny_kz     = ny_sess and hour>=13 and hour<=16
    sess_entry_ok = not require_session_en or (
        (!london_kz_only and !ny_kz_only) or (london_kz_only and london_kz) or (ny_kz_only and ny_kz))

    bias_bull_ok = not require_htf_bias or htf_bias>=min_bias_strength
    bias_bear_ok = not require_htf_bias or htf_bias<=-min_bias_strength

    ema13_up   = ta.crossover(close,ema13) or (high>ema13 and high[1]<=ema13)
    ema13_down = ta.crossunder(close,ema13) or (low<ema13 and low[1]>=ema13)

    // Level confluence analysis
    level_confluence_bull = 0
    level_confluence_bear = 0
    if enable_level_confluence
        level1_formed = level1_formation_src > 0
        level2_formed = level2_formation_src > 0
        level3_formed = level3_formation_src > 0
        level_tested = level_test_src > 0
        level_broken = level_break_src > 0
        
        // Add confluence points for level interactions
        level_confluence_bull := (level1_formed?1:0) + (level2_formed?1:0) + (level3_formed?2:0) + (level_tested?1:0) + (level_broken?2:0)
        level_confluence_bear := (level1_formed?1:0) + (level2_formed?1:0) + (level3_formed?2:0) + (level_tested?1:0) + (level_broken?2:0)

    // MM Weekly Cycle confluence analysis
    cycle_confluence_bull = 0
    cycle_confluence_bear = 0
    if enable_cycle_confluence
        current_cycle_day = cycle_day_src
        pfh_active = pfh_signal_src > 0
        pfl_active = pfl_signal_src > 0
        trend_reset = trend_reset_src > 0
        psychology_complete = psychology_complete_src > 0
        reversal_zone = reversal_zone_src > 0
        false_move = false_move_src > 0
        
        // Cycle-based confluence scoring
        // Day 1: Reversal day (higher confluence for counter-trend)
        // Day 2: Continuation day (medium confluence)
        // Day 3: Completion day (higher confluence for reversal)
        day_confluence = current_cycle_day == 1 ? 2 : current_cycle_day == 3 ? 2 : 1
        
        cycle_confluence_bull := (pfh_active?2:0) + (trend_reset?3:0) + (psychology_complete?3:0) + (reversal_zone?2:0) + day_confluence
        cycle_confluence_bear := (pfl_active?2:0) + (trend_reset?3:0) + (psychology_complete?3:0) + (reversal_zone?2:0) + day_confluence
        
        // Reduce confluence for false moves (they indicate weak setups)
        if false_move
            cycle_confluence_bull := math.max(0, cycle_confluence_bull - 2)
            cycle_confluence_bear := math.max(0, cycle_confluence_bear - 2)

    confl_bull = (bull_setup?1:0)+(pat_bull?1:0)+(bull_stack?1:0)+(bias_bull_ok?1:0)+(vol_entry_ok?1:0)+(level_confluence_bull)+(cycle_confluence_bull)
    confl_bear = (bear_setup?1:0)+(pat_bear?1:0)+(bear_stack?1:0)+(bias_bear_ok?1:0)+(vol_entry_ok?1:0)+(level_confluence_bear)+(cycle_confluence_bear)

    base_ok = sess_entry_ok and vol_entry_ok

    ema_buy   = enable_ema_entries and base_ok and bull_setup and ema13_up   and close>ema50 and bias_bull_ok
    ema_sell  = enable_ema_entries and base_ok and bear_setup and ema13_down and close<ema50 and bias_bear_ok
    pat_buy   = enable_pat_entries and base_ok and pat_bull and close>ema13 and bias_bull_ok
    pat_sell  = enable_pat_entries and base_ok and pat_bear and close<ema13 and bias_bear_ok
    conf_buy  = enable_confluence  and base_ok and confl_bull>=4 and ema13_up
    conf_sell = enable_confluence  and base_ok and confl_bear>=4 and ema13_down
    asian_buy = base_ok and asian_bull and bull_setup and bias_bull_ok
    asian_sell= base_ok and asian_bear and bear_setup and bias_bear_ok

    buy_entry  = (ema_buy or pat_buy or conf_buy or asian_buy)  and ( (is_early and london_kz_only?false:true) or (is_opt) )
    sell_entry = (ema_sell or pat_sell or conf_sell or asian_sell) and ((is_early and london_kz_only?false:true) or (is_opt))

    entry_type_buy  = conf_buy?"CONFL":asian_buy?"ASIAN":pat_buy?"PATTERN":"EMA"
    entry_type_sell = conf_sell?"CONFL":asian_sell?"ASIAN":pat_sell?"PATTERN":"EMA"

    timing_lbl = is_early?"⚡ EARLY":"📊 OPT"

    max_score = 5  // Base score
    if enable_level_confluence
        max_score += 7  // Level confluence adds up to 7
    if enable_cycle_confluence  
        max_score += 12  // Cycle confluence adds up to 12
    // Total possible: 5 + 7 + 12 = 24 points
    
    if buy_entry
        col = conf_buy?col_conf:is_early?col_early:col_optimal
        label.new(bar_index, low-atr, timing_lbl+" BUY\n"+entry_type_buy+" • " + timeframe.period + "\nScore " + str.tostring(confl_bull)+"/"+str.tostring(max_score), style=label.style_label_up, color=col, textcolor=color.black)
    if sell_entry
        col = conf_sell?col_conf:is_early?col_early:col_sell
        label.new(bar_index, high+atr, timing_lbl+" SELL\n"+entry_type_sell+" • " + timeframe.period + "\nScore " + str.tostring(confl_bear)+"/"+str.tostring(max_score), style=label.style_label_down, color=col, textcolor=color.white)

    plotshape(buy_entry, "Buy Entry", shape.triangleup, location.belowbar, col_optimal, size=size.large)
    plotshape(sell_entry,"Sell Entry",shape.triangledown, location.abovebar,col_sell, size=size.large)

    if show_conf_marks
        plotchar(confl_bull>=3 and not buy_entry, "Bull Confluence","▲", location.belowbar, color.new(color.lime,50))
        plotchar(confl_bear>=3 and not sell_entry,"Bear Confluence","▼", location.abovebar, color.new(color.red,50))

    if show_entry_dash and barstate.islast
        var table ent_tbl = table.new(position.middle_right,2,8,bgcolor=color.white,border_width=1)
        table.cell(ent_tbl,0,0,"BTMM ENTRIES",text_color=color.white,bgcolor=color.navy,text_size=size.small)
        table.cell(ent_tbl,1,0,timeframe.period, text_color=color.white,bgcolor=color.navy,text_size=size.small)
        table.cell(ent_tbl,0,1,"Timing",text_size=size.tiny)
        table.cell(ent_tbl,1,1,is_early?"EARLY":"OPT",bgcolor=is_early?col_early:col_optimal,text_color=color.black,text_size=size.tiny)
        // Dynamic thresholds based on enabled confluence systems
        score_threshold_high = math.round(max_score * 0.7)  // 70% of max score
        score_threshold_med = math.round(max_score * 0.5)   // 50% of max score
        bull_col = confl_bull>=score_threshold_high?color.green:confl_bull>=score_threshold_med?color.yellow:color.gray
        bear_col = confl_bear>=score_threshold_high?color.red:confl_bear>=score_threshold_med?color.orange:color.gray
        table.cell(ent_tbl,0,2,"Bull Score",text_size=size.tiny)
        table.cell(ent_tbl,1,2,str.tostring(confl_bull)+"/"+str.tostring(max_score),bgcolor=bull_col,text_color=color.white,text_size=size.tiny)
        table.cell(ent_tbl,0,3,"Bear Score",text_size=size.tiny)
        table.cell(ent_tbl,1,3,str.tostring(confl_bear)+"/"+str.tostring(max_score),bgcolor=bear_col,text_color=color.white,text_size=size.tiny)
        bias_col = htf_bias>0.2?color.green:htf_bias<-0.2?color.red:color.gray
        bias_txt = htf_bias>0.2?"BULL":htf_bias<-0.2?"BEAR":"NEUTRAL"
        table.cell(ent_tbl,0,4,"HTF Bias",text_size=size.tiny)
        table.cell(ent_tbl,1,4,bias_txt,bgcolor=bias_col,text_color=color.white,text_size=size.tiny)
        vol_col = vol_spk?color.green:color.gray
        table.cell(ent_tbl,0,5,"Volume",text_size=size.tiny)
        table.cell(ent_tbl,1,5,str.tostring(vol_ratio,"#.#")+"x",bgcolor=vol_col,text_color=color.white,text_size=size.tiny)
        sess_col = london_sess?color.green:ny_sess?color.blue:color.gray
        table.cell(ent_tbl,0,6,"Session",text_size=size.tiny)
        table.cell(ent_tbl,1,6,cur_sess,bgcolor=sess_col,text_color=color.white,text_size=size.tiny)
        cyc_col = cycle_day==1?color.blue:cycle_day==2?color.orange:color.purple
        table.cell(ent_tbl,0,7,"Cycle",text_size=size.tiny)
        table.cell(ent_tbl,1,7,"DAY "+str.tostring(cycle_day),bgcolor=cyc_col,text_color=color.white,text_size=size.tiny)

    alertcondition(buy_entry,"BTMM Buy Entry","BTMM BUY entry signal")
    alertcondition(sell_entry,"BTMM Sell Entry","BTMM SELL entry signal")

// -----------------------------------------------------------------------------
// 7. STEVE MAURO 5 RULES ANALYSIS
// -----------------------------------------------------------------------------

// Rule 1: Trend (EMA Stack alignment)
rule1_trend = bull_stack or bear_stack

// Rule 2: Stop Hunt (price wicks beyond key level then reverses)
rule2_stop_hunt_bull = low < ema50 and close > ema50 and close > open
rule2_stop_hunt_bear = high > ema50 and close < ema50 and close < open
rule2_stop_hunt = rule2_stop_hunt_bull or rule2_stop_hunt_bear

// Rule 3: Pattern (any confirmed pattern)
rule3_pattern = pat_bull or pat_bear

// Rule 4: Shift (strong directional candle)
rule4_shift = math.abs(close - open) >= atr * 1.5

// Rule 5: TDI (Trend Direction Indicator - EMA alignment)
rule5_tdi = (close > ema13 and ema13 > ema50) or (close < ema13 and ema13 < ema50)

rules_score = (rule1_trend?1:0) + (rule2_stop_hunt?1:0) + (rule3_pattern?1:0) + (rule4_shift?1:0) + (rule5_tdi?1:0)
rules_strength = rules_score >= 4 ? "STRONG" : rules_score >= 3 ? "MODERATE" : "WEAK"

// 5 Rules Dashboard
if show_entry_dash and barstate.islast and is_today
    var table rules_tbl = table.new(position.top_right, 2, 7, bgcolor=color.white, border_width=1)
    
    table.cell(rules_tbl, 0, 0, "5 RULES SYSTEM", text_color=color.white, bgcolor=color.navy, text_size=size.small)
    table.cell(rules_tbl, 1, 0, str.tostring(rules_score) + "/5", text_color=color.white, bgcolor=color.navy, text_size=size.small)
    
    table.cell(rules_tbl, 0, 1, "1. Trend", text_size=size.tiny)
    table.cell(rules_tbl, 1, 1, rule1_trend ? "✅" : "❌", 
              bgcolor=rule1_trend ? color.green : color.red, text_color=color.white, text_size=size.tiny)
    
    table.cell(rules_tbl, 0, 2, "2. Stop Hunt", text_size=size.tiny)
    table.cell(rules_tbl, 1, 2, rule2_stop_hunt ? "✅" : "❌", 
              bgcolor=rule2_stop_hunt ? color.green : color.red, text_color=color.white, text_size=size.tiny)
    
    table.cell(rules_tbl, 0, 3, "3. Pattern", text_size=size.tiny)
    table.cell(rules_tbl, 1, 3, rule3_pattern ? "✅" : "❌", 
              bgcolor=rule3_pattern ? color.green : color.red, text_color=color.white, text_size=size.tiny)
    
    table.cell(rules_tbl, 0, 4, "4. Shift", text_size=size.tiny)
    table.cell(rules_tbl, 1, 4, rule4_shift ? "✅" : "❌", 
              bgcolor=rule4_shift ? color.green : color.red, text_color=color.white, text_size=size.tiny)
    
    table.cell(rules_tbl, 0, 5, "5. TDI", text_size=size.tiny)
    table.cell(rules_tbl, 1, 5, rule5_tdi ? "✅" : "❌", 
              bgcolor=rule5_tdi ? color.green : color.red, text_color=color.white, text_size=size.tiny)
    
    overall_color = rules_score >= 4 ? color.green : rules_score >= 3 ? color.orange : color.red
    table.cell(rules_tbl, 0, 6, "Status", text_size=size.tiny)
    table.cell(rules_tbl, 1, 6, rules_strength, bgcolor=overall_color, text_color=color.white, text_size=size.tiny)

// -----------------------------------------------------------------------------
// 8. BACKGROUND & DATA WINDOW
// -----------------------------------------------------------------------------

bgcolor(london_sess?color.new(color.green,97):na)
bgcolor(ny_sess?    color.new(color.blue,97):na)

plot(pat_bull?1:0,"Pattern_Bull",display=display.data_window)
plot(pat_bear?1:0,"Pattern_Bear",display=display.data_window)

plot(buy_entry ? 1 : 0, "Buy_Entry",       display=display.data_window)
plot(sell_entry? 1 : 0, "Sell_Entry",      display=display.data_window)
plot(confl_bull,          "Bull_Confluence_Score", display=display.data_window)
plot(confl_bear,          "Bear_Confluence_Score", display=display.data_window)

// Advanced pattern outputs
plot(evening_star_bear ? 1 : 0, "Evening_Star", display=display.data_window)
plot(morning_star_bull ? 1 : 0, "Morning_Star", display=display.data_window)
plot(shift_bull ? 1 : 0, "Shift_Bull", display=display.data_window)
plot(shift_bear ? 1 : 0, "Shift_Bear", display=display.data_window)

// 5 Rules system outputs
plot(rules_score, "Rules_Score", display=display.data_window)
plot(rule1_trend ? 1 : 0, "Rule1_Trend", display=display.data_window)
plot(rule2_stop_hunt ? 1 : 0, "Rule2_Stop_Hunt", display=display.data_window)
plot(rule3_pattern ? 1 : 0, "Rule3_Pattern", display=display.data_window)
plot(rule4_shift ? 1 : 0, "Rule4_Shift", display=display.data_window)
plot(rule5_tdi ? 1 : 0, "Rule5_TDI", display=display.data_window)

// Level confluence outputs
if enable_level_confluence
    plot(level_confluence_bull, "Level_Confluence_Bull", display=display.data_window)
    plot(level_confluence_bear, "Level_Confluence_Bear", display=display.data_window)

// MM Weekly Cycle confluence outputs
if enable_cycle_confluence
    plot(cycle_confluence_bull, "Cycle_Confluence_Bull", display=display.data_window)
    plot(cycle_confluence_bear, "Cycle_Confluence_Bear", display=display.data_window)

// Advanced pattern alerts
alertcondition(evening_star_bear, "Evening Star", "BTMM Evening Star bearish reversal pattern detected")
alertcondition(morning_star_bull, "Morning Star", "BTMM Morning Star bullish reversal pattern detected")
alertcondition(shift_bull or shift_bear, "Shift Candle", "BTMM Shift candle pattern detected")
alertcondition(rules_score >= 4, "5 Rules Strong", "BTMM 5 Rules system shows strong signal (4/5 or 5/5)") 