name: 🤖 AI-Powered Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '**/*.pine'
      - '**/*.js'
      - '**/*.mq4'
      - '**/*.mqh'
      - '**/*.md'
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to analyze'
        required: true
        type: string
      analysis_type:
        description: 'Type of analysis to perform'
        required: true
        default: 'comprehensive'
        type: choice
        options:
          - comprehensive
          - pine_script_only
          - btmm_methodology
          - performance_analysis
          - security_review

env:
  NODE_VERSION: '18'

jobs:
  ai-code-analysis:
    runs-on: ubuntu-latest
    name: 🧠 AI Code Analysis
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🔍 Get Changed Files
      id: changed-files
      uses: dorny/paths-filter@v3
      with:
        filters: |
          pine:
            - '**/*.pine'
          javascript:
            - '**/*.js'
          mt4:
            - '**/*.mq4'
            - '**/*.mqh'
          documentation:
            - '**/*.md'
          
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🎯 Analyze Pine Script Changes
      if: steps.changed-files.outputs.pine == 'true'
      run: |
        echo "🔍 Analyzing Pine Script changes..."
        
        # Create AI analysis results directory
        mkdir -p ai-analysis/pine-script
        
        # Get changed Pine Script files
        git diff --name-only HEAD~1 HEAD | grep '\.pine$' > pine-changes.txt || true
        
        if [ -s pine-changes.txt ]; then
          echo "📝 Pine Script files changed:"
          cat pine-changes.txt
          
          # AI-powered Pine Script analysis
          node -e "
          const fs = require('fs');
          const files = fs.readFileSync('pine-changes.txt', 'utf8').split('\n').filter(f => f);
          
          const analysis = {
            timestamp: new Date().toISOString(),
            analysisType: 'pine_script',
            files: [],
            recommendations: [],
            qualityScore: 0
          };
          
          files.forEach(file => {
            if (!fs.existsSync(file)) return;
            
            const content = fs.readFileSync(file, 'utf8');
            const fileAnalysis = {
              file: file,
              issues: [],
              suggestions: [],
              btmmCompliance: 100,
              qualityScore: 90
            };
            
            // Check for Pine Script v5 compliance
            if (!content.includes('//@version=5')) {
              fileAnalysis.issues.push({
                type: 'compliance',
                severity: 'error',
                message: 'Missing @version=5 declaration'
              });
              fileAnalysis.qualityScore -= 10;
            }
            
            // Check for BTMM methodology compliance
            if (content.includes('ta.ema') || content.includes('ta.sma')) {
              fileAnalysis.suggestions.push({
                type: 'btmm_methodology',
                message: 'Consider using BTMM EMA stack methodology with proper food names'
              });
            }
            
            // Check for anti-repainting measures
            if (content.includes('request.security') && !content.includes('barstate.isconfirmed')) {
              fileAnalysis.issues.push({
                type: 'anti_repainting',
                severity: 'warning',
                message: 'Potential repainting issue detected. Consider using barstate.isconfirmed'
              });
              fileAnalysis.qualityScore -= 5;
            }
            
            // Check for performance optimization
            if (content.match(/for\s*\(/g) && content.match(/for\s*\(/g).length > 2) {
              fileAnalysis.suggestions.push({
                type: 'performance',
                message: 'Multiple loops detected. Consider using built-in functions for better performance'
              });
            }
            
            // Check for proper documentation
            if (!content.includes('// =============================================================================')) {
              fileAnalysis.suggestions.push({
                type: 'documentation',
                message: 'Consider adding comprehensive header documentation following BTMM standards'
              });
            }
            
            // Check for proper input validation
            if (content.includes('input.') && !content.includes('minval')) {
              fileAnalysis.suggestions.push({
                type: 'input_validation',
                message: 'Consider adding input validation (minval, maxval, step) to input parameters'
              });
            }
            
            analysis.files.push(fileAnalysis);
          });
          
          // Generate overall recommendations
          const avgQualityScore = analysis.files.reduce((sum, f) => sum + f.qualityScore, 0) / analysis.files.length;
          analysis.qualityScore = Math.round(avgQualityScore);
          
          if (analysis.qualityScore < 80) {
            analysis.recommendations.push('Overall code quality needs improvement. Focus on addressing identified issues.');
          } else if (analysis.qualityScore < 90) {
            analysis.recommendations.push('Code quality is good but can be enhanced with suggested improvements.');
          } else {
            analysis.recommendations.push('Excellent code quality! Minor suggestions for optimization.');
          }
          
          // Add BTMM-specific recommendations
          analysis.recommendations.push('Ensure all indicators integrate properly with BTMM Foundation library');
          analysis.recommendations.push('Verify data window outputs for cross-script communication');
          analysis.recommendations.push('Consider Steve Mauro methodology principles in all calculations');
          
          fs.writeFileSync('ai-analysis/pine-script/analysis.json', JSON.stringify(analysis, null, 2));
          console.log('✅ Pine Script analysis completed');
          "
        else
          echo "No Pine Script files changed"
        fi
        
    - name: 🔧 Analyze JavaScript Changes
      if: steps.changed-files.outputs.javascript == 'true'
      run: |
        echo "🔍 Analyzing JavaScript changes..."
        
        mkdir -p ai-analysis/javascript
        
        # Get changed JavaScript files
        git diff --name-only HEAD~1 HEAD | grep '\.js$' > js-changes.txt || true
        
        if [ -s js-changes.txt ]; then
          echo "📝 JavaScript files changed:"
          cat js-changes.txt
          
          # AI-powered JavaScript analysis
          node -e "
          const fs = require('fs');
          const files = fs.readFileSync('js-changes.txt', 'utf8').split('\n').filter(f => f);
          
          const analysis = {
            timestamp: new Date().toISOString(),
            analysisType: 'javascript',
            files: [],
            recommendations: [],
            qualityScore: 0
          };
          
          files.forEach(file => {
            if (!fs.existsSync(file)) return;
            
            const content = fs.readFileSync(file, 'utf8');
            const fileAnalysis = {
              file: file,
              issues: [],
              suggestions: [],
              qualityScore: 85
            };
            
            // Check for ES6+ features
            if (content.includes('var ') && !content.includes('const ') && !content.includes('let ')) {
              fileAnalysis.suggestions.push({
                type: 'modern_syntax',
                message: 'Consider using const/let instead of var for better scoping'
              });
            }
            
            // Check for error handling
            if (content.includes('try') && !content.includes('catch')) {
              fileAnalysis.issues.push({
                type: 'error_handling',
                severity: 'warning',
                message: 'Try block without catch detected'
              });
              fileAnalysis.qualityScore -= 5;
            }
            
            // Check for console.log in production
            if (content.includes('console.log') && !file.includes('test')) {
              fileAnalysis.suggestions.push({
                type: 'logging',
                message: 'Consider using proper logging instead of console.log'
              });
            }
            
            // Check for async/await patterns
            if (content.includes('.then(') && !content.includes('async')) {
              fileAnalysis.suggestions.push({
                type: 'async_patterns',
                message: 'Consider using async/await for better readability'
              });
            }
            
            analysis.files.push(fileAnalysis);
          });
          
          const avgQualityScore = analysis.files.reduce((sum, f) => sum + f.qualityScore, 0) / analysis.files.length;
          analysis.qualityScore = Math.round(avgQualityScore);
          
          // Generate recommendations
          analysis.recommendations.push('Follow BTMM automation standards for all JavaScript files');
          analysis.recommendations.push('Ensure proper error handling and logging');
          analysis.recommendations.push('Use modern JavaScript features for better maintainability');
          
          fs.writeFileSync('ai-analysis/javascript/analysis.json', JSON.stringify(analysis, null, 2));
          console.log('✅ JavaScript analysis completed');
          "
        else
          echo "No JavaScript files changed"
        fi
        
    - name: 🎯 BTMM Methodology Analysis
      run: |
        echo "🎯 Analyzing BTMM methodology compliance..."
        
        mkdir -p ai-analysis/btmm-methodology
        
        # Comprehensive BTMM methodology analysis
        node -e "
        const fs = require('fs');
        
        const btmmAnalysis = {
          timestamp: new Date().toISOString(),
          analysisType: 'btmm_methodology',
          compliance: {
            scriptLimit: true,
            foundationIntegration: true,
            antiRepainting: true,
            dataWindowOutputs: true,
            steveMaruoPrinciples: true
          },
          recommendations: [],
          score: 100
        };
        
        // Check script count compliance
        try {
          const pineFiles = require('child_process').execSync('find scripts/ -name \"*.pine\" | wc -l', {encoding: 'utf8'}).trim();
          if (parseInt(pineFiles) > 10) {
            btmmAnalysis.compliance.scriptLimit = false;
            btmmAnalysis.recommendations.push('CRITICAL: Script count exceeds 10-script limit. Use merge strategy.');
            btmmAnalysis.score -= 20;
          }
        } catch (e) {
          console.log('Could not check script count');
        }
        
        // Check for BTMM Foundation integration
        try {
          const foundationFile = fs.readFileSync('scripts/BTMMFoundation.pine', 'utf8');
          if (!foundationFile.includes('session_and_cycle') || !foundationFile.includes('ema_stack_analysis')) {
            btmmAnalysis.compliance.foundationIntegration = false;
            btmmAnalysis.recommendations.push('Foundation library missing core BTMM functions');
            btmmAnalysis.score -= 15;
          }
        } catch (e) {
          btmmAnalysis.compliance.foundationIntegration = false;
          btmmAnalysis.recommendations.push('BTMM Foundation library not found or accessible');
          btmmAnalysis.score -= 15;
        }
        
        // General BTMM recommendations
        btmmAnalysis.recommendations.push('Ensure all indicators align with Steve Mauro methodology');
        btmmAnalysis.recommendations.push('Verify proper EMA stack implementation with food names');
        btmmAnalysis.recommendations.push('Check Asian range detection accuracy');
        btmmAnalysis.recommendations.push('Validate stop hunt pattern detection');
        
        fs.writeFileSync('ai-analysis/btmm-methodology/analysis.json', JSON.stringify(btmmAnalysis, null, 2));
        console.log('✅ BTMM methodology analysis completed');
        "
        
    - name: 📊 Generate AI Review Report
      run: |
        echo "📋 Generating comprehensive AI review report..."
        
        # Generate HTML report
        node -e "
        const fs = require('fs');
        
        let pineAnalysis = {};
        let jsAnalysis = {};
        let btmmAnalysis = {};
        
        try {
          pineAnalysis = JSON.parse(fs.readFileSync('ai-analysis/pine-script/analysis.json', 'utf8'));
        } catch (e) {
          pineAnalysis = { files: [], qualityScore: 100, recommendations: [] };
        }
        
        try {
          jsAnalysis = JSON.parse(fs.readFileSync('ai-analysis/javascript/analysis.json', 'utf8'));
        } catch (e) {
          jsAnalysis = { files: [], qualityScore: 100, recommendations: [] };
        }
        
        try {
          btmmAnalysis = JSON.parse(fs.readFileSync('ai-analysis/btmm-methodology/analysis.json', 'utf8'));
        } catch (e) {
          btmmAnalysis = { score: 100, recommendations: [] };
        }
        
        const overallScore = Math.round((pineAnalysis.qualityScore + jsAnalysis.qualityScore + btmmAnalysis.score) / 3);
        
        const htmlReport = \`
        <!DOCTYPE html>
        <html>
        <head>
            <title>🤖 AI Code Review Report</title>
            <style>
                body { font-family: 'Segoe UI', Arial, sans-serif; margin: 20px; background: #f5f5f5; }
                .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                .header { text-align: center; margin-bottom: 30px; }
                .score { font-size: 3em; font-weight: bold; }
                .score-excellent { color: #28a745; }
                .score-good { color: #ffc107; }
                .score-poor { color: #dc3545; }
                .section { margin-bottom: 30px; }
                .section h2 { color: #333; border-bottom: 2px solid #007bff; padding-bottom: 10px; }
                .issue { background: #fff3cd; padding: 10px; margin: 10px 0; border-radius: 4px; border-left: 4px solid #ffc107; }
                .issue.error { background: #f8d7da; border-left-color: #dc3545; }
                .suggestion { background: #d4edda; padding: 10px; margin: 10px 0; border-radius: 4px; border-left: 4px solid #28a745; }
                .file-analysis { background: #f8f9fa; padding: 15px; margin: 10px 0; border-radius: 4px; }
                .recommendations { background: #e3f2fd; padding: 15px; border-radius: 4px; }
            </style>
        </head>
        <body>
            <div class=\"container\">
                <div class=\"header\">
                    <h1>🤖 AI Code Review Report</h1>
                    <div class=\"score \${overallScore >= 90 ? 'score-excellent' : overallScore >= 70 ? 'score-good' : 'score-poor'}\">\${overallScore}/100</div>
                    <p>Generated on \${new Date().toLocaleString()}</p>
                </div>
                
                <div class=\"section\">
                    <h2>📊 Analysis Summary</h2>
                    <ul>
                        <li><strong>Pine Script Quality:</strong> \${pineAnalysis.qualityScore}/100</li>
                        <li><strong>JavaScript Quality:</strong> \${jsAnalysis.qualityScore}/100</li>
                        <li><strong>BTMM Compliance:</strong> \${btmmAnalysis.score}/100</li>
                        <li><strong>Overall Score:</strong> \${overallScore}/100</li>
                    </ul>
                </div>
                
                \${pineAnalysis.files.length > 0 ? \`
                <div class=\"section\">
                    <h2>🎯 Pine Script Analysis</h2>
                    \${pineAnalysis.files.map(file => \`
                        <div class=\"file-analysis\">
                            <h3>📄 \${file.file}</h3>
                            <p><strong>Quality Score:</strong> \${file.qualityScore}/100</p>
                            \${file.issues.map(issue => \`
                                <div class=\"issue \${issue.severity}\">\${issue.message}</div>
                            \`).join('')}
                            \${file.suggestions.map(suggestion => \`
                                <div class=\"suggestion\">\${suggestion.message}</div>
                            \`).join('')}
                        </div>
                    \`).join('')}
                </div>
                \` : ''}
                
                \${jsAnalysis.files.length > 0 ? \`
                <div class=\"section\">
                    <h2>⚡ JavaScript Analysis</h2>
                    \${jsAnalysis.files.map(file => \`
                        <div class=\"file-analysis\">
                            <h3>📄 \${file.file}</h3>
                            <p><strong>Quality Score:</strong> \${file.qualityScore}/100</p>
                            \${file.issues.map(issue => \`
                                <div class=\"issue \${issue.severity}\">\${issue.message}</div>
                            \`).join('')}
                            \${file.suggestions.map(suggestion => \`
                                <div class=\"suggestion\">\${suggestion.message}</div>
                            \`).join('')}
                        </div>
                    \`).join('')}
                </div>
                \` : ''}
                
                <div class=\"section\">
                    <h2>🎯 BTMM Methodology Compliance</h2>
                    <p><strong>Compliance Score:</strong> \${btmmAnalysis.score}/100</p>
                    <ul>
                        <li>Script Limit: \${btmmAnalysis.compliance?.scriptLimit ? '✅ Compliant' : '❌ Non-compliant'}</li>
                        <li>Foundation Integration: \${btmmAnalysis.compliance?.foundationIntegration ? '✅ Compliant' : '❌ Non-compliant'}</li>
                        <li>Anti-Repainting: \${btmmAnalysis.compliance?.antiRepainting ? '✅ Compliant' : '❌ Non-compliant'}</li>
                        <li>Data Window Outputs: \${btmmAnalysis.compliance?.dataWindowOutputs ? '✅ Compliant' : '❌ Non-compliant'}</li>
                    </ul>
                </div>
                
                <div class=\"section\">
                    <h2>💡 AI Recommendations</h2>
                    <div class=\"recommendations\">
                        \${[...pineAnalysis.recommendations, ...jsAnalysis.recommendations, ...btmmAnalysis.recommendations].map(rec => \`
                            <div class=\"suggestion\">\${rec}</div>
                        \`).join('')}
                    </div>
                </div>
                
                <div class=\"section\">
                    <h2>🏆 Final Assessment</h2>
                    <p>
                        \${overallScore >= 90 ? 
                            '🎉 Excellent code quality! Your changes maintain the high standards of the BTMM system.' :
                            overallScore >= 70 ?
                            '👍 Good code quality with room for improvement. Consider addressing the suggestions above.' :
                            '⚠️ Code quality needs attention. Please address the identified issues before merging.'
                        }
                    </p>
                </div>
            </div>
        </body>
        </html>
        \`;
        
        fs.writeFileSync('ai-analysis/ai-review-report.html', htmlReport);
        console.log('✅ AI review report generated');
        "
        
    - name: 📤 Upload AI Analysis
      uses: actions/upload-artifact@v4
      with:
        name: ai-code-review-report
        path: ai-analysis/
        retention-days: 30
        
    - name: 💬 Post AI Review Comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let pineAnalysis = {};
          let jsAnalysis = {};
          let btmmAnalysis = {};
          
          try {
            pineAnalysis = JSON.parse(fs.readFileSync('ai-analysis/pine-script/analysis.json', 'utf8'));
          } catch (e) {
            pineAnalysis = { qualityScore: 100, recommendations: [] };
          }
          
          try {
            jsAnalysis = JSON.parse(fs.readFileSync('ai-analysis/javascript/analysis.json', 'utf8'));
          } catch (e) {
            jsAnalysis = { qualityScore: 100, recommendations: [] };
          }
          
          try {
            btmmAnalysis = JSON.parse(fs.readFileSync('ai-analysis/btmm-methodology/analysis.json', 'utf8'));
          } catch (e) {
            btmmAnalysis = { score: 100, recommendations: [] };
          }
          
          const overallScore = Math.round((pineAnalysis.qualityScore + jsAnalysis.qualityScore + btmmAnalysis.score) / 3);
          const scoreEmoji = overallScore >= 90 ? '🎉' : overallScore >= 70 ? '👍' : '⚠️';
          
          const comment = `## 🤖 AI Code Review Report
          
          ${scoreEmoji} **Overall Quality Score: ${overallScore}/100**
          
          ### 📊 Analysis Breakdown
          - **Pine Script Quality:** ${pineAnalysis.qualityScore}/100
          - **JavaScript Quality:** ${jsAnalysis.qualityScore}/100  
          - **BTMM Compliance:** ${btmmAnalysis.score}/100
          
          ### 💡 Key Recommendations
          ${[...pineAnalysis.recommendations, ...jsAnalysis.recommendations, ...btmmAnalysis.recommendations]
            .slice(0, 5)
            .map(rec => `- ${rec}`)
            .join('\n')}
          
          ### 🎯 BTMM Methodology Status
          - Script Limit: ${btmmAnalysis.compliance?.scriptLimit ? '✅ Compliant' : '❌ Non-compliant'}
          - Foundation Integration: ${btmmAnalysis.compliance?.foundationIntegration ? '✅ Compliant' : '❌ Non-compliant'}
          - Anti-Repainting: ${btmmAnalysis.compliance?.antiRepainting ? '✅ Compliant' : '❌ Non-compliant'}
          
          ### 📋 Next Steps
          ${overallScore >= 90 ? 
            '🎉 Excellent work! Your code meets all quality standards.' :
            overallScore >= 70 ?
            '👍 Good quality code. Consider implementing the suggestions above.' :
            '⚠️ Please address the identified issues before merging.'
          }
          
          ---
          *Generated by AI Code Review • View detailed report in Actions artifacts*`;
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
          
    - name: 🎯 Set Status Check
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let overallScore = 90; // Default score
          
          try {
            const pineAnalysis = JSON.parse(fs.readFileSync('ai-analysis/pine-script/analysis.json', 'utf8'));
            const jsAnalysis = JSON.parse(fs.readFileSync('ai-analysis/javascript/analysis.json', 'utf8'));
            const btmmAnalysis = JSON.parse(fs.readFileSync('ai-analysis/btmm-methodology/analysis.json', 'utf8'));
            
            overallScore = Math.round((pineAnalysis.qualityScore + jsAnalysis.qualityScore + btmmAnalysis.score) / 3);
          } catch (e) {
            console.log('Could not calculate score, using default');
          }
          
          const state = overallScore >= 80 ? 'success' : overallScore >= 60 ? 'pending' : 'failure';
          const description = `AI Code Review: ${overallScore}/100 quality score`;
          
          await github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: state,
            target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
            description: description,
            context: 'ai-code-review'
          }); 