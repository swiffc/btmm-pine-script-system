name: 🔒 Security Scan

on:
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
          - 'full'
          - 'dependencies'
          - 'secrets'
          - 'code-analysis'

env:
  SECURITY_BASELINE: '95'

jobs:
  # 🔍 Secret Detection
  secret-detection:
    name: 🔍 Secret Detection
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'secrets'
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: 🔍 GitHub Secret Scanning
        run: |
          echo "🔍 Scanning for hardcoded secrets..."
          
          # Check for common secret patterns
          echo "Checking for API keys..."
          if grep -r "api[_-]key\|apikey" . --exclude-dir=.git --exclude-dir=node_modules; then
            echo "⚠️ Potential API key found"
          fi
          
          echo "Checking for tokens..."
          if grep -r "token\|secret" . --exclude-dir=.git --exclude-dir=node_modules --exclude="*.md"; then
            echo "⚠️ Potential token/secret found"
          fi
          
          echo "Checking for passwords..."
          if grep -r "password\|passwd" . --exclude-dir=.git --exclude-dir=node_modules --exclude="*.md"; then
            echo "⚠️ Potential password found"
          fi

      - name: 📊 Secret Scan Report
        run: |
          echo "## 🔍 Secret Detection Report" >> $GITHUB_STEP_SUMMARY
          echo "- **Scan Type:** Secret Detection" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ✅ Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Files Scanned:** $(find . -type f \( -name "*.js" -o -name "*.pine" -o -name "*.json" \) | wc -l)" >> $GITHUB_STEP_SUMMARY

  # 🔒 Dependency Security
  dependency-security:
    name: 🔒 Dependency Security
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'dependencies'
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🔒 NPM Audit
        run: |
          echo "🔒 Running NPM security audit..."
          npm audit --audit-level high || echo "⚠️ Security vulnerabilities detected"

      - name: 🔍 Vulnerability Assessment
        run: |
          echo "🔍 Checking for known vulnerabilities..."
          # Generate audit report
          npm audit --json > security-audit.json || true
          
          # Check severity levels
          if npm audit --audit-level critical --dry-run; then
            echo "✅ No critical vulnerabilities"
          else
            echo "❌ Critical vulnerabilities found"
            exit 1
          fi

      - name: 📊 Upload Security Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-report
          path: security-audit.json
          retention-days: 30

  # 🛡️ Code Security Analysis
  code-security:
    name: 🛡️ Code Security Analysis
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'code-analysis'
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔍 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

      - name: 🛡️ BTMM-Specific Security Checks
        run: |
          echo "🛡️ Running BTMM-specific security checks..."
          
          # Check for unsafe eval usage
          echo "Checking for eval() usage..."
          if grep -r "eval(" . --include="*.js" --exclude-dir=node_modules; then
            echo "❌ Unsafe eval() usage detected"
            exit 1
          fi
          
          # Check for file system access
          echo "Checking for unsafe file operations..."
          if grep -r "fs\.writeFileSync\|fs\.unlinkSync" . --include="*.js" --exclude-dir=node_modules; then
            echo "⚠️ Direct file system operations detected"
          fi
          
          # Check for command execution
          echo "Checking for command execution..."
          if grep -r "exec\|spawn\|child_process" . --include="*.js" --exclude-dir=node_modules; then
            echo "⚠️ Command execution detected"
          fi

      - name: 🔍 Pine Script Security
        run: |
          echo "🔍 Checking Pine Script security..."
          
          # Check for hardcoded values in Pine Scripts
          find scripts -name "*.pine" -type f | while read file; do
            echo "Checking: $file"
            
            # Check for hardcoded API endpoints
            if grep -q "http://\|https://" "$file"; then
              echo "⚠️ Hardcoded URL found in $file"
            fi
            
            # Check for potential security issues
            if grep -q "password\|secret\|key" "$file"; then
              echo "⚠️ Potential sensitive data in $file"
            fi
          done

  # 🔐 Infrastructure Security
  infrastructure-security:
    name: 🔐 Infrastructure Security
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.scan_type == 'full'
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔐 GitHub Security Configuration
        run: |
          echo "🔐 Checking GitHub security configuration..."
          
          # Check for required files
          if [ ! -f ".github/SECURITY.md" ]; then
            echo "❌ Missing SECURITY.md file"
          else
            echo "✅ SECURITY.md present"
          fi
          
          if [ ! -f ".github/dependabot.yml" ]; then
            echo "❌ Missing dependabot.yml"
          else
            echo "✅ Dependabot configured"
          fi
          
          if [ ! -f ".github/CODEOWNERS" ]; then
            echo "❌ Missing CODEOWNERS file"
          else
            echo "✅ CODEOWNERS configured"
          fi

      - name: 🔍 Workflow Security
        run: |
          echo "🔍 Checking GitHub Actions security..."
          
          # Check for pinned action versions
          find .github/workflows -name "*.yml" -type f | while read workflow; do
            echo "Checking: $workflow"
            
            # Check for unpinned actions
            if grep -q "uses:.*@main\|uses:.*@master" "$workflow"; then
              echo "⚠️ Unpinned action versions in $workflow"
            fi
            
            # Check for secrets in workflow files
            if grep -q "\${{ secrets\." "$workflow"; then
              echo "ℹ️ Secrets usage detected in $workflow"
            fi
          done

  # 📊 Security Reporting
  security-report:
    name: 📊 Security Report
    runs-on: ubuntu-latest
    needs: [secret-detection, dependency-security, code-security, infrastructure-security]
    if: always()
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📊 Generate Security Dashboard
        run: |
          echo "# 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Scan Overview" >> $GITHUB_STEP_SUMMARY
          echo "- **Scan Date:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 Security Checks" >> $GITHUB_STEP_SUMMARY
          echo "- **Secret Detection:** ${{ needs.secret-detection.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependency Security:** ${{ needs.dependency-security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Security:** ${{ needs.code-security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Infrastructure Security:** ${{ needs.infrastructure-security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📈 Security Score" >> $GITHUB_STEP_SUMMARY
          
          # Calculate security score
          total=4
          passed=0
          
          if [ "${{ needs.secret-detection.result }}" = "success" ]; then
            passed=$((passed + 1))
          fi
          
          if [ "${{ needs.dependency-security.result }}" = "success" ]; then
            passed=$((passed + 1))
          fi
          
          if [ "${{ needs.code-security.result }}" = "success" ]; then
            passed=$((passed + 1))
          fi
          
          if [ "${{ needs.infrastructure-security.result }}" = "success" ]; then
            passed=$((passed + 1))
          fi
          
          score=$((passed * 100 / total))
          echo "- **Overall Score:** $score/100" >> $GITHUB_STEP_SUMMARY
          
          if [ $score -ge $SECURITY_BASELINE ]; then
            echo "- **Status:** ✅ Passed (≥$SECURITY_BASELINE)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status:** ❌ Failed (<$SECURITY_BASELINE)" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: 🔔 Security Alert
        if: failure()
        run: |
          echo "🚨 Security scan failed!"
          echo "One or more security checks did not pass."
          echo "Please review the security report and address any issues."

  # 📧 Notification
  notify:
    name: 📧 Security Notifications
    runs-on: ubuntu-latest
    needs: [security-report]
    if: always() && (needs.security-report.result == 'failure' || github.event_name == 'schedule')
    steps:
      - name: 📧 Send Security Report
        run: |
          echo "📧 Security scan completed"
          echo "Results: ${{ needs.security-report.result }}"
          # In a real implementation, you would send notifications here
          # to Slack, email, or other notification systems 