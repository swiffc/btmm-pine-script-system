name: CI/CD Pipeline for BTMM Development Template

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Linting
  quality-check:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: true

      - name: Run TypeScript check
        run: npm run type-check
        continue-on-error: true

      - name: Check code formatting
        run: npm run format:check
        continue-on-error: true

      - name: Validate Pine Script templates
        run: |
          # Check for required Pine Script v5 headers
          echo "Validating Pine Script templates..."
          find indicators/ -name "*.pine" -type f | while read file; do
            if ! head -1 "$file" | grep -q "//@version=5"; then
              echo "❌ Missing @version=5 in $file"
              exit 1
            else
              echo "✅ Valid Pine Script v5 format: $file"
            fi
          done

      - name: Validate BTMM methodology compliance
        run: |
          # Check for BTMM-specific patterns and requirements
          echo "Checking BTMM methodology compliance..."
          
          # Check for EMA food names
          if find indicators/ -name "*.pine" -exec grep -l "ketchup\|mustard\|water\|mayo\|blueberry" {} \; | wc -l | grep -q "^0$"; then
            echo "❌ No EMA food name references found"
            exit 1
          fi
          
          # Check for second leg focus
          if find indicators/ -name "*.pine" -exec grep -l "second_leg\|second leg" {} \; | wc -l | grep -q "^0$"; then
            echo "⚠️ Warning: No second leg pattern references found"
          fi
          
          echo "✅ BTMM methodology compliance validated"

  # Testing Suite
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: quality-check
    
    strategy:
      matrix:
        test-type: [unit, integration]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ${{ matrix.test-type }} tests
        run: npm run test:${{ matrix.test-type }}
        env:
          CI: true

      - name: Upload test coverage
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate
          npm audit fix --dry-run

      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # Build and Validate
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [quality-check, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Validate build output
        run: |
          # Check if build artifacts exist
          if [ ! -d "dist" ]; then
            echo "❌ Build output directory not found"
            exit 1
          fi
          
          # Check for essential files
          if [ ! -f "dist/index.html" ]; then
            echo "❌ Main HTML file not found in build output"
            exit 1
          fi
          
          echo "✅ Build validation successful"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # Pine Script Validation
  pine-script-validation:
    name: Pine Script Template Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Pine Script syntax
        run: |
          echo "Performing comprehensive Pine Script validation..."
          
          # Create validation script
          cat > validate_pine.sh << 'EOF'
          #!/bin/bash
          
          ERRORS=0
          
          for file in $(find indicators/ -name "*.pine" -type f); do
            echo "Validating $file..."
            
            # Check version
            if ! head -1 "$file" | grep -q "//@version=5"; then
              echo "❌ $file: Missing or incorrect @version=5"
              ERRORS=$((ERRORS + 1))
            fi
            
            # Check for BTMM patterns
            if ! grep -q "detect_.*_second_leg\|M.*pattern\|W.*pattern" "$file"; then
              echo "⚠️ $file: No BTMM pattern detection found"
            fi
            
            # Check for EMA system
            if ! grep -q "ema.*13\|ketchup" "$file"; then
              echo "⚠️ $file: No EMA 13/Ketchup reference found"
            fi
            
            # Check for session analysis
            if ! grep -q "london\|ny\|session" "$file"; then
              echo "⚠️ $file: No session analysis found"
            fi
            
            # Check for proper alert conditions
            if ! grep -q "alertcondition" "$file"; then
              echo "⚠️ $file: No alert conditions found"
            fi
            
            # Basic syntax checks
            if grep -q "var.*=" "$file" && ! grep -q "var.*:=" "$file"; then
              echo "❌ $file: Potential syntax error in variable declaration"
              ERRORS=$((ERRORS + 1))
            fi
            
            echo "✅ $file: Basic validation passed"
          done
          
          if [ $ERRORS -gt 0 ]; then
            echo "❌ Validation failed with $ERRORS errors"
            exit 1
          else
            echo "✅ All Pine Script templates validated successfully"
          fi
          EOF
          
          chmod +x validate_pine.sh
          ./validate_pine.sh

  # Documentation and Template Updates
  docs-update:
    name: Update Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [build, pine-script-validation]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate template documentation
        run: |
          echo "Generating template documentation..."
          
          # Create documentation generator
          cat > generate_docs.sh << 'EOF'
          #!/bin/bash
          
          # Generate template index
          echo "# Pine Script Template Index" > docs/template-index.md
          echo "" >> docs/template-index.md
          echo "Auto-generated on $(date)" >> docs/template-index.md
          echo "" >> docs/template-index.md
          
          # List all templates
          for file in $(find indicators/ -name "*.pine" -type f | sort); do
            title=$(head -5 "$file" | grep -o 'indicator("[^"]*"' | sed 's/indicator("//; s/".*//')
            if [ -z "$title" ]; then
              title=$(basename "$file" .pine)
            fi
            
            echo "## $title" >> docs/template-index.md
            echo "**File:** \`$file\`" >> docs/template-index.md
            echo "" >> docs/template-index.md
            
            # Extract description from comments
            desc=$(head -20 "$file" | grep "^//" | head -5 | sed 's|^//||' | tr '\n' ' ')
            if [ -n "$desc" ]; then
              echo "**Description:** $desc" >> docs/template-index.md
            fi
            echo "" >> docs/template-index.md
          done
          
          echo "✅ Documentation generated"
          EOF
          
          chmod +x generate_docs.sh
          mkdir -p docs
          ./generate_docs.sh

      - name: Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [ -n "$(git status --porcelain docs/)" ]; then
            git add docs/
            git commit -m "docs: Auto-update template documentation [skip ci]"
            git push
          else
            echo "No documentation changes to commit"
          fi

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun --upload.target=temporary-public-storage
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Deployment (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan, pine-script-validation, docs-update]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Deploy to Replit
        run: |
          echo "Deploying to Replit production environment..."
          # Add Replit deployment logic here
          echo "✅ Deployment completed"

      - name: Create deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ Successfully deployed to production" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY

  # Release (only on release creation)
  release:
    name: Create Release Assets
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: [build, pine-script-validation]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Create release package
        run: |
          # Create comprehensive release package
          mkdir -p release-package
          
          # Copy templates
          cp -r indicators/ release-package/
          cp -r docs/ release-package/
          cp -r examples/ release-package/ || true
          
          # Copy configuration files
          cp .cursorrules release-package/
          cp windsurf.config.json release-package/
          cp README.md release-package/
          cp replit.md release-package/
          
          # Create version info
          echo "BTMM Development Template v${{ github.event.release.tag_name }}" > release-package/VERSION
          echo "Released on $(date)" >> release-package/VERSION
          echo "Commit: ${{ github.sha }}" >> release-package/VERSION
          
          # Create archive
          tar -czf btmm-development-template-${{ github.event.release.tag_name }}.tar.gz release-package/
          zip -r btmm-development-template-${{ github.event.release.tag_name }}.zip release-package/

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./btmm-development-template-${{ github.event.release.tag_name }}.tar.gz
          asset_name: btmm-development-template-${{ github.event.release.tag_name }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload ZIP release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./btmm-development-template-${{ github.event.release.tag_name }}.zip
          asset_name: btmm-development-template-${{ github.event.release.tag_name }}.zip
          asset_content_type: application/zip