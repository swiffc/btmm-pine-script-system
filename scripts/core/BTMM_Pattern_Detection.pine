//@version=5

// =============================================================================
// BTMM PATTERN DETECTION - ADVANCED PATTERN RECOGNITION
// =============================================================================
// @description Advanced pattern recognition with multi-timeframe confirmation
// @purpose Detect M/W patterns, OTE zones, and nameable candlestick patterns
// @method Technical analysis pattern recognition with volume confirmation
// @author BTMM Development Team
// @version 2.0 - Performance optimized with cached calculations
// @date 2025-07-02
// =============================================================================

import BTMMFoundation as btmm

// =============================================================================
// BTMM PATTERN DETECTION ENGINE - M&W PATTERNS WITH NAMEABLE PATTERNS
// =============================================================================
// Purpose: Complete M&W pattern detection with institutional nameable patterns
// Method: Advanced pattern recognition with BTMM context analysis
// Author: BTMM Development Team
// Version: 2.0 - Enhanced from Master System
// Date: 2025-07-02
// =============================================================================

indicator("BTMM Pattern Detection", "BTMM Patterns", overlay=true, shorttitle="BTMM Patterns",
         max_boxes_count=100, max_lines_count=200, max_labels_count=200)

// ============================================================================
// 📈 PATTERN DETECTION CONFIGURATION
// ============================================================================

// === PATTERN DETECTION SETTINGS ===
pattern_group = "📈 M&W Pattern Detection"
enable_m_patterns = input.bool(true, "Enable M Patterns (Bearish)", group=pattern_group)
enable_w_patterns = input.bool(true, "Enable W Patterns (Bullish)", group=pattern_group)
min_pattern_bars = input.int(8, "Minimum Pattern Duration (bars)", minval=5, maxval=50, group=pattern_group, tooltip="Minimum bars between pattern points")
pattern_tolerance = input.float(0.002, "Pattern Tolerance (%)", minval=0.001, maxval=0.01, step=0.001, group=pattern_group, tooltip="Symmetry tolerance for pattern validation")
show_pattern_structure = input.bool(true, "Show Pattern Structure Lines", group=pattern_group)

// === NAMEABLE PATTERNS SETTINGS ===
nameable_group = "🌟 Nameable Patterns (Candlestick)"
enable_evening_stars = input.bool(true, "Enable Evening Stars (Bearish)", group=nameable_group)
enable_morning_stars = input.bool(true, "Enable Morning Stars (Bullish)", group=nameable_group)
enable_railroad_tracks = input.bool(true, "Enable Railroad Tracks", group=nameable_group)
enable_cordofwoods = input.bool(true, "Enable Cordofwoods", group=nameable_group)
nameable_strength_filter = input.string("MODERATE", "Minimum Nameable Strength", options=["WEAK", "MODERATE", "STRONG", "ULTIMATE"], group=nameable_group)

// === VISUAL SETTINGS ===
visual_group = "🎨 Visual Configuration"
line_width = input.int(2, "Line Width", minval=1, maxval=5, group=visual_group)
label_size = input.string("normal", "Label Size", options=["tiny", "small", "normal", "large", "huge"], group=visual_group)
show_pattern_labels = input.bool(true, "Show Pattern Labels", group=visual_group)

// ============================================================================
// 🔧 HELPER FUNCTIONS & CALCULATIONS
// ============================================================================

// ATR and volatility calculations
atr_14 = ta.atr(14)
atr_21 = ta.atr(21)
pattern_min_size = atr_14 * 2.0

// Volume calculations
volume_ma = ta.sma(volume, 20)
volume_spike_threshold = volume_ma * 1.5
volume_ratio = volume / volume_ma

// Label size conversion
label_text_size = switch label_size
    "tiny" => size.tiny
    "small" => size.small
    "normal" => size.normal
    "large" => size.large
    "huge" => size.huge
    => size.normal

// ============================================================================
// 📈 M PATTERN DETECTION ENGINE
// ============================================================================

// M Pattern Detection (Bearish)
detect_m_pattern() =>
    var float peak1_price = na
    var float peak2_price = na
    var float valley_price = na
    var int peak1_bar = na
    var int peak2_bar = na
    var int valley_bar = na
    var bool m_pattern_found = false
    var string m_pattern_context = "NONE"
    
    // Enhanced peak/valley detection
    is_peak = high > high[1] and high > high[-1] and high > ta.highest(high[2], 3) and high > ta.highest(high[-2], 3)
    is_valley = low < low[1] and low < low[-1] and low < ta.lowest(low[2], 3) and low < ta.lowest(low[-2], 3)
    
    // Reset pattern if timeout
    if not na(peak1_bar) and bar_index - peak1_bar > 100
        peak1_price := na
        peak2_price := na
        valley_price := na
        peak1_bar := na
        peak2_bar := na
        valley_bar := na
        m_pattern_context := "NONE"
        m_pattern_found := false
    
    // M pattern formation logic
    if is_peak
        if na(peak1_price)
            peak1_price := high
            peak1_bar := bar_index
        else if not na(peak1_price) and na(valley_price)
            peak1_price := high
            peak1_bar := bar_index
        else if not na(valley_price) and na(peak2_price)
            peak2_price := high
            peak2_bar := bar_index
            
            // BTMM Enhanced validation
            peak_symmetry = math.abs(peak1_price - peak2_price) / peak1_price < pattern_tolerance
            valley_depth = valley_price < math.min(peak1_price, peak2_price) * (1 - pattern_tolerance)
            time_spacing = peak2_bar - peak1_bar >= min_pattern_bars
            size_valid = math.abs(peak1_price - valley_price) > pattern_min_size
            
            // BTMM Context Analysis (simplified without Asian levels for now)
            if peak1_price > close * 1.01 and peak2_price > close * 1.01
                m_pattern_context := "TYPE_1_RESISTANCE"
            else if math.abs((peak1_price + peak2_price) / 2 - close) < atr_14
                m_pattern_context := "TYPE_2_CURRENT_LEVEL"
            else
                m_pattern_context := "STANDARD"
            
            if peak_symmetry and valley_depth and time_spacing and size_valid
                m_pattern_found := true
    
    if is_valley and not na(peak1_price) and na(valley_price)
        valley_price := low
        valley_bar := bar_index
    
    // Reset after completion
    if m_pattern_found
        m_pattern_found := false  // Reset for next detection
    
    [peak1_price, peak2_price, valley_price, peak1_bar, peak2_bar, valley_bar, m_pattern_context, is_peak and not na(peak2_price)]

// ============================================================================
// 📈 W PATTERN DETECTION ENGINE  
// ============================================================================

// W Pattern Detection (Bullish)
detect_w_pattern() =>
    var float valley1_price = na
    var float valley2_price = na
    var float peak_price = na
    var int valley1_bar = na
    var int valley2_bar = na
    var int peak_bar = na
    var bool w_pattern_found = false
    var string w_pattern_context = "NONE"
    
    is_peak = high > high[1] and high > high[-1] and high > ta.highest(high[2], 3) and high > ta.highest(high[-2], 3)
    is_valley = low < low[1] and low < low[-1] and low < ta.lowest(low[2], 3) and low < ta.lowest(low[-2], 3)
    
    // Reset pattern if timeout
    if not na(valley1_bar) and bar_index - valley1_bar > 100
        valley1_price := na
        valley2_price := na
        peak_price := na
        valley1_bar := na
        valley2_bar := na
        peak_bar := na
        w_pattern_context := "NONE"
        w_pattern_found := false
    
    // W pattern formation logic
    if is_valley
        if na(valley1_price)
            valley1_price := low
            valley1_bar := bar_index
        else if not na(valley1_price) and na(peak_price)
            valley1_price := low
            valley1_bar := bar_index
        else if not na(peak_price) and na(valley2_price)
            valley2_price := low
            valley2_bar := bar_index
            
            valley_symmetry = math.abs(valley1_price - valley2_price) / valley1_price < pattern_tolerance
            peak_height = peak_price > math.max(valley1_price, valley2_price) * (1 + pattern_tolerance)
            time_spacing = valley2_bar - valley1_bar >= min_pattern_bars
            size_valid = math.abs(peak_price - valley1_price) > pattern_min_size
            
            if valley1_price < close * 0.99 and valley2_price < close * 0.99
                w_pattern_context := "TYPE_1_SUPPORT"
            else if math.abs((valley1_price + valley2_price) / 2 - close) < atr_14
                w_pattern_context := "TYPE_2_CURRENT_LEVEL"
            else
                w_pattern_context := "STANDARD"
            
            if valley_symmetry and peak_height and time_spacing and size_valid
                w_pattern_found := true
    
    if is_peak and not na(valley1_price) and na(peak_price)
        peak_price := high
        peak_bar := bar_index
    
    if w_pattern_found
        w_pattern_found := false
    
    [valley1_price, valley2_price, peak_price, valley1_bar, valley2_bar, peak_bar, w_pattern_context, is_valley and not na(valley2_price)]

// Execute pattern detection
[m_peak1, m_peak2, m_valley, m_peak1_bar, m_peak2_bar, m_valley_bar, m_type, m_completed] = detect_m_pattern()
[w_valley1, w_valley2, w_peak, w_valley1_bar, w_valley2_bar, w_peak_bar, w_type, w_completed] = detect_w_pattern()

// ============================================================================
// 🌟 NAMEABLE PATTERNS DETECTION
// ============================================================================

// Evening Star Detection (Bearish)
detect_evening_star() =>
    candle1_bullish = close[2] > open[2] and (close[2] - open[2]) > atr_14 * 0.5
    candle2_small = math.abs(close[1] - open[1]) < atr_14 * 0.3
    candle3_bearish = close < open and (open - close) > atr_14 * 0.5
    
    star_higher = high[1] > high[2] and high[1] > high
    confirmation_overlap = close < (close[2] + open[2]) / 2
    
    volume_confirmation = volume > volume_ma * 1.3
    
    evening_star = candle1_bullish and candle2_small and candle3_bearish and star_higher and confirmation_overlap and volume_confirmation
    evening_star

// Morning Star Detection (Bullish)
detect_morning_star() =>
    candle1_bearish = close[2] < open[2] and (open[2] - close[2]) > atr_14 * 0.5
    candle2_small = math.abs(close[1] - open[1]) < atr_14 * 0.3
    candle3_bullish = close > open and (close - open) > atr_14 * 0.5
    
    star_lower = low[1] < low[2] and low[1] < low
    confirmation_overlap = close > (close[2] + open[2]) / 2
    
    volume_confirmation = volume > volume_ma * 1.3
    
    morning_star = candle1_bearish and candle2_small and candle3_bullish and star_lower and confirmation_overlap and volume_confirmation
    morning_star

// Railroad Tracks Detection
detect_railroad_tracks() =>
    first_candle_size = math.abs(close[1] - open[1])
    second_candle_size = math.abs(close - open)
    size_similarity = math.abs(first_candle_size - second_candle_size) / first_candle_size < 0.2
    
    bearish_tracks = close[1] > open[1] and close < open and size_similarity
    bullish_tracks = close[1] < open[1] and close > open and size_similarity
    
    significant_size = first_candle_size > atr_14 * 0.7
    volume_confirmation = volume > volume[1]
    
    tracks_pattern = (bearish_tracks or bullish_tracks) and significant_size and volume_confirmation
    [tracks_pattern, bearish_tracks, bullish_tracks]

// Cordofwoods Detection
detect_cordofwoods() =>
    var int consecutive_count = 0
    var string direction = "NONE"
    
    current_body = math.abs(close - open)
    is_small_body = current_body < atr_14 * 0.4
    is_bullish = close > open
    is_bearish = close < open
    
    if is_small_body
        if direction == "NONE"
            direction := is_bullish ? "BULLISH" : "BEARISH"
            consecutive_count := 1
        else if (direction == "BULLISH" and is_bullish) or (direction == "BEARISH" and is_bearish)
            consecutive_count += 1
        else
            consecutive_count := 1
            direction := is_bullish ? "BULLISH" : "BEARISH"
    else
        consecutive_count := 0
        direction := "NONE"
    
    bullish_cordofwoods = consecutive_count >= 3 and direction == "BULLISH"
    bearish_cordofwoods = consecutive_count >= 3 and direction == "BEARISH"
    
    cordofwoods_pattern = bullish_cordofwoods or bearish_cordofwoods
    [cordofwoods_pattern, bullish_cordofwoods, bearish_cordofwoods, consecutive_count]

// Execute nameable pattern detection
evening_star_signal = enable_evening_stars ? detect_evening_star() : false
morning_star_signal = enable_morning_stars ? detect_morning_star() : false
[railroad_signal, bearish_tracks, bullish_tracks] = enable_railroad_tracks ? detect_railroad_tracks() : [false, false, false]
[cordofwoods_signal, bullish_cords, bearish_cords, cord_count] = enable_cordofwoods ? detect_cordofwoods() : [false, false, false, 0]

// ============================================================================
// 🎨 VISUAL ELEMENTS & PATTERN DRAWING
// ============================================================================

// Draw M Pattern
if show_pattern_structure and m_completed and not na(m_peak1) and not na(m_peak2) and not na(m_valley)
    line1 = line.new(m_peak1_bar, m_peak1, m_valley_bar, m_valley, color=color.red, width=line_width + 1, style=line.style_solid)
    line2 = line.new(m_valley_bar, m_valley, m_peak2_bar, m_peak2, color=color.red, width=line_width + 1, style=line.style_solid)
    
    if show_pattern_labels
        label.new(m_peak2_bar, m_peak2 + atr_14 * 0.5, 
                 "🔴 M " + m_type + "\n" + str.tostring(m_peak2, "#.#####"),
                 style=label.style_label_down, color=color.red, textcolor=color.white, size=label_text_size)

// Draw W Pattern  
if show_pattern_structure and w_completed and not na(w_valley1) and not na(w_valley2) and not na(w_peak)
    line1 = line.new(w_valley1_bar, w_valley1, w_peak_bar, w_peak, color=color.green, width=line_width + 1, style=line.style_solid)
    line2 = line.new(w_peak_bar, w_peak, w_valley2_bar, w_valley2, color=color.green, width=line_width + 1, style=line.style_solid)
    
    if show_pattern_labels
        label.new(w_valley2_bar, w_valley2 - atr_14 * 0.5, 
                 "🟢 W " + w_type + "\n" + str.tostring(w_valley2, "#.#####"),
                 style=label.style_label_up, color=color.green, textcolor=color.white, size=label_text_size)

// Nameable Pattern Markers
if evening_star_signal and show_pattern_labels
    label.new(bar_index, high + atr_14 * 0.5, "🌟 EVENING STAR", 
             style=label.style_label_down, color=color.purple, textcolor=color.white, size=label_text_size)

if morning_star_signal and show_pattern_labels
    label.new(bar_index, low - atr_14 * 0.5, "🌅 MORNING STAR", 
             style=label.style_label_up, color=color.orange, textcolor=color.white, size=label_text_size)

if railroad_signal and show_pattern_labels
    track_text = bearish_tracks ? "🚂 BEARISH TRACKS" : "🚂 BULLISH TRACKS"
    track_color = bearish_tracks ? color.red : color.green
    track_style = bearish_tracks ? label.style_label_down : label.style_label_up
    track_y = bearish_tracks ? high + atr_14 * 0.3 : low - atr_14 * 0.3
    label.new(bar_index, track_y, track_text, 
             style=track_style, color=track_color, textcolor=color.white, size=size.small)

if cordofwoods_signal and show_pattern_labels
    cord_text = bullish_cords ? "🪵 BULL CORDS (" + str.tostring(cord_count) + ")" : "🪵 BEAR CORDS (" + str.tostring(cord_count) + ")"
    cord_color = bullish_cords ? color.green : color.red
    cord_style = bullish_cords ? label.style_label_up : label.style_label_down
    cord_y = bullish_cords ? low - atr_14 * 0.2 : high + atr_14 * 0.2
    label.new(bar_index, cord_y, cord_text, 
             style=cord_style, color=cord_color, textcolor=color.white, size=size.tiny)

// ============================================================================
// 🎯 PATTERN STRENGTH ASSESSMENT
// ============================================================================

// M Pattern Strength
m_pattern_strength() =>
    if not m_completed
        "NONE"
    else
        strength_score = 0
        
        // Volume confirmation
        if volume > volume_spike_threshold
            strength_score += 2
        
        // Pattern symmetry
        if not na(m_peak1) and not na(m_peak2)
            symmetry = math.abs(m_peak1 - m_peak2) / math.max(m_peak1, m_peak2)
            if symmetry < 0.005
                strength_score += 2
            else if symmetry < 0.01
                strength_score += 1
        
        // Context bonus
        if m_type == "TYPE_1_RESISTANCE"
            strength_score += 1
        
        if strength_score >= 4
            "ULTIMATE"
        else if strength_score >= 3
            "STRONG"
        else if strength_score >= 2
            "MODERATE"
        else
            "WEAK"

// W Pattern Strength
w_pattern_strength() =>
    if not w_completed
        "NONE"
    else
        strength_score = 0
        
        // Volume confirmation
        if volume > volume_spike_threshold
            strength_score += 2
        
        // Pattern symmetry
        if not na(w_valley1) and not na(w_valley2)
            symmetry = math.abs(w_valley1 - w_valley2) / math.max(w_valley1, w_valley2)
            if symmetry < 0.005
                strength_score += 2
            else if symmetry < 0.01
                strength_score += 1
        
        // Context bonus
        if w_type == "TYPE_1_SUPPORT"
            strength_score += 1
        
        if strength_score >= 4
            "ULTIMATE"
        else if strength_score >= 3
            "STRONG"
        else if strength_score >= 2
            "MODERATE"
        else
            "WEAK"

m_strength = m_pattern_strength()
w_strength = w_pattern_strength()

// ============================================================================
// 📊 DATA WINDOW OUTPUTS (FOR INTEGRATION)
// ============================================================================

plot(m_completed ? 1 : 0, "M_Pattern_Complete", display=display.data_window)
plot(w_completed ? 1 : 0, "W_Pattern_Complete", display=display.data_window)
plot(m_peak1, "M_Peak1", display=display.data_window)
plot(m_peak2, "M_Peak2", display=display.data_window)
plot(m_valley, "M_Valley", display=display.data_window)
plot(w_valley1, "W_Valley1", display=display.data_window)
plot(w_valley2, "W_Valley2", display=display.data_window)
plot(w_peak, "W_Peak", display=display.data_window)
plot(evening_star_signal ? 1 : 0, "Evening_Star", display=display.data_window)
plot(morning_star_signal ? 1 : 0, "Morning_Star", display=display.data_window)
plot(railroad_signal ? 1 : 0, "Railroad_Tracks", display=display.data_window)
plot(bearish_tracks ? 1 : 0, "Bearish_Tracks", display=display.data_window)
plot(bullish_tracks ? 1 : 0, "Bullish_Tracks", display=display.data_window)
plot(cordofwoods_signal ? 1 : 0, "Cordofwoods", display=display.data_window)
plot(bullish_cords ? 1 : 0, "Bullish_Cords", display=display.data_window)
plot(bearish_cords ? 1 : 0, "Bearish_Cords", display=display.data_window)
plot(cord_count, "Cord_Count", display=display.data_window)
plot(volume_ratio, "Volume_Ratio", display=display.data_window)

// Pattern strength outputs
plot(m_strength == "ULTIMATE" ? 4 : m_strength == "STRONG" ? 3 : m_strength == "MODERATE" ? 2 : m_strength == "WEAK" ? 1 : 0, "M_Strength", display=display.data_window)
plot(w_strength == "ULTIMATE" ? 4 : w_strength == "STRONG" ? 3 : w_strength == "MODERATE" ? 2 : w_strength == "WEAK" ? 1 : 0, "W_Strength", display=display.data_window)

// ============================================================================
// 🏛️ ADVANCED INSTITUTIONAL PATTERNS
// ============================================================================
// Advanced patterns from BTMM_Advanced_Patterns.pine merged in
// Author: BTMM Development Team - Advanced Pattern Module
// ============================================================================

// Advanced Pattern Settings  
var g_ADVANCED = "🏛️ ADVANCED INSTITUTIONAL PATTERNS"
enable_order_blocks   = input.bool(true,  "Enable Order Block Detection",   group=g_ADVANCED)
enable_fvg_detection  = input.bool(true,  "Enable Fair Value Gap Detection", group=g_ADVANCED)
enable_bos_patterns   = input.bool(true,  "Enable Break of Structure",      group=g_ADVANCED)
enable_v1_v2_patterns = input.bool(true,  "Enable V1/V2 Day 2 Patterns",    group=g_ADVANCED)
enable_a1_a2_patterns = input.bool(true,  "Enable A1/A2 Day 3 Patterns",    group=g_ADVANCED)

// Advanced Confluence Settings
var g_ADV_CONFLUENCE = "🔗 ADVANCED CONFLUENCE"
require_htf_bias      = input.bool(true,  "Require HTF Bias Confluence",    group=g_ADV_CONFLUENCE)
require_ema_stack     = input.bool(true,  "Require EMA Stack Confluence",   group=g_ADV_CONFLUENCE)
require_volume_conf   = input.bool(true,  "Require Volume Confirmation",    group=g_ADV_CONFLUENCE)
min_pattern_strength  = input.float(70.0, "Minimum Pattern Strength", minval=0.0, maxval=100.0, group=g_ADV_CONFLUENCE)

// Order Block Settings
var g_OB = "📦 ORDER BLOCK SETTINGS"
ob_min_body_size     = input.float(0.5, "Min Body Size (ATR)",     minval=0.1, maxval=2.0, group=g_OB)
ob_max_wick_size     = input.float(0.3, "Max Wick Size (ATR)",     minval=0.1, maxval=1.0, group=g_OB)
ob_lookback_bars     = input.int(10,    "Order Block Lookback",    minval=5,   maxval=50,  group=g_OB)

// Fair Value Gap Settings
var g_FVG = "🌉 FAIR VALUE GAP SETTINGS"
fvg_min_size         = input.float(0.2, "Min FVG Size (ATR)",     minval=0.1, maxval=1.0, group=g_FVG)
fvg_max_lookback     = input.int(20,    "FVG Lookback Bars",      minval=10,  maxval=100, group=g_FVG)

// Advanced Visual Settings
var g_ADV_VISUAL = "🎨 ADVANCED VISUALS"
show_order_blocks    = input.bool(true,  "Show Order Blocks",         group=g_ADV_VISUAL)
show_fair_value_gaps = input.bool(true,  "Show Fair Value Gaps",      group=g_ADV_VISUAL)
show_structure_lines = input.bool(true,  "Show Structure Lines",      group=g_ADV_VISUAL)

// Advanced Colors
bull_ob_color    = input.color(color.new(color.green, 80), "Bullish Order Block", group=g_ADV_VISUAL)
bear_ob_color    = input.color(color.new(color.red, 80),   "Bearish Order Block", group=g_ADV_VISUAL)
bull_fvg_color   = input.color(color.new(color.blue, 85),  "Bullish FVG",         group=g_ADV_VISUAL)
bear_fvg_color   = input.color(color.new(color.orange, 85), "Bearish FVG",        group=g_ADV_VISUAL)

// HTF Bias Integration
htf_ema_direction = request.security(syminfo.tickerid, "240", 
  bull_stack ? 1 : bear_stack ? -1 : 0, lookahead=barmerge.lookahead_off)
htf_bias_bull = htf_ema_direction > 0
htf_bias_bear = htf_ema_direction < 0

// Order Block Detection
is_strong_bear_candle = close < open and (open - close) >= (atr_14 * ob_min_body_size) and 
  math.min(open - high, close - low) <= (atr_14 * ob_max_wick_size)

is_strong_bull_candle = close > open and (close - open) >= (atr_14 * ob_min_body_size) and 
  math.min(high - close, low - open) <= (atr_14 * ob_max_wick_size)

// Order block arrays
var array<box> bull_order_blocks = array.new<box>()
var array<box> bear_order_blocks = array.new<box>()

// Detect bullish order blocks
bull_ob_signal = is_strong_bear_candle and low[1] < ta.lowest(low, ob_lookback_bars) and 
  close > high[1]  // Price reversal above the bearish candle

// Detect bearish order blocks  
bear_ob_signal = is_strong_bull_candle and high[1] > ta.highest(high, ob_lookback_bars) and 
  close < low[1]  // Price reversal below the bullish candle

// Create order block boxes
if bull_ob_signal and show_order_blocks
    ob_box = box.new(bar_index[1], high[1], bar_index + 10, low[1], 
      border_color=color.green, bgcolor=bull_ob_color, border_width=1)
    array.push(bull_order_blocks, ob_box)
    if array.size(bull_order_blocks) > 10
        box.delete(array.shift(bull_order_blocks))

if bear_ob_signal and show_order_blocks
    ob_box = box.new(bar_index[1], high[1], bar_index + 10, low[1], 
      border_color=color.red, bgcolor=bear_ob_color, border_width=1)
    array.push(bear_order_blocks, ob_box)
    if array.size(bear_order_blocks) > 10
        box.delete(array.shift(bear_order_blocks))

// Fair Value Gap Detection
bull_fvg = low > high[2] and low[1] > high[2] and (low - high[2]) >= (atr_14 * fvg_min_size)
bear_fvg = high < low[2] and high[1] < low[2] and (low[2] - high) >= (atr_14 * fvg_min_size)

// FVG arrays
var array<box> bull_fvgs = array.new<box>()
var array<box> bear_fvgs = array.new<box>()

// Create FVG boxes
if bull_fvg and show_fair_value_gaps
    fvg_box = box.new(bar_index[2], low, bar_index + 20, high[2], 
      border_color=color.blue, bgcolor=bull_fvg_color, border_width=1)
    array.push(bull_fvgs, fvg_box)
    if array.size(bull_fvgs) > 10
        box.delete(array.shift(bull_fvgs))

if bear_fvg and show_fair_value_gaps
    fvg_box = box.new(bar_index[2], high, bar_index + 20, low[2], 
      border_color=color.orange, bgcolor=bear_fvg_color, border_width=1)
    array.push(bear_fvgs, fvg_box)
    if array.size(bear_fvgs) > 10
        box.delete(array.shift(bear_fvgs))

// Break of Structure Detection
hh = high > ta.highest(high[1], 20) and volume_ratio > volume_spike_threshold
ll = low < ta.lowest(low[1], 20) and volume_ratio > volume_spike_threshold

// Break of Structure patterns
bull_bos = hh and bull_stack and (not require_htf_bias or htf_bias_bull)
bear_bos = ll and bear_stack and (not require_htf_bias or htf_bias_bear)

// V1/V2 Day 2 Patterns (Steve Mauro Methodology)
v1_day2_setup = enable_v1_v2_patterns and cycle_day == 2 and 
  bull_stack and htf_bias_bull and volume_ratio > volume_spike_threshold and 
  (london_session or ny_session)

v2_day2_setup = enable_v1_v2_patterns and cycle_day == 2 and 
  bear_stack and htf_bias_bear and volume_ratio > volume_spike_threshold and 
  (london_session or ny_session)

// A1/A2 Day 3 Patterns (Steve Mauro Methodology)
a1_day3_setup = enable_a1_a2_patterns and cycle_day == 3 and 
  bull_stack and close > ema50 and volume_ratio > volume_spike_threshold and 
  (bull_ob_signal or bull_fvg or bull_bos)

a2_day3_setup = enable_a1_a2_patterns and cycle_day == 3 and 
  bear_stack and close < ema50 and volume_ratio > volume_spike_threshold and 
  (bear_ob_signal or bear_fvg or bear_bos)

// Pattern Strength Calculation
calc_pattern_strength(base_strength) =>
    strength = base_strength
    strength += require_htf_bias and htf_bias_bull ? 15 : require_htf_bias and htf_bias_bear ? 15 : 0
    strength += require_ema_stack and (bull_stack or bear_stack) ? 20 : 0
    strength += require_volume_conf and volume_ratio > volume_spike_threshold ? 15 : 0
    strength += (london_session or ny_session) ? 10 : 0
    math.min(strength, 100)

// Master Advanced Pattern Signals
bull_advanced_pattern = (v1_day2_setup or a1_day3_setup or bull_bos or bull_ob_signal) and
  calc_pattern_strength(60) >= min_pattern_strength

bear_advanced_pattern = (v2_day2_setup or a2_day3_setup or bear_bos or bear_ob_signal) and
  calc_pattern_strength(60) >= min_pattern_strength

// Advanced Pattern Labels
if show_pattern_labels
    // V1/V2 Day 2 labels
    if v1_day2_setup
        label.new(bar_index, low - atr_14, "🎯 V1 DAY 2", 
          style=label.style_label_up, color=color.green, 
          textcolor=color.white, size=size.small)
    
    if v2_day2_setup
        label.new(bar_index, high + atr_14, "🎯 V2 DAY 2", 
          style=label.style_label_down, color=color.red, 
          textcolor=color.white, size=size.small)
    
    // A1/A2 Day 3 labels
    if a1_day3_setup
        label.new(bar_index, low - atr_14, "⚡ A1 DAY 3", 
          style=label.style_label_up, color=color.lime, 
          textcolor=color.black, size=size.small)
    
    if a2_day3_setup
        label.new(bar_index, high + atr_14, "⚡ A2 DAY 3", 
          style=label.style_label_down, color=color.orange, 
          textcolor=color.white, size=size.small)
    
    // Break of Structure labels
    if bull_bos
        label.new(bar_index, low - atr_14 * 0.5, "📈 BULL BOS", 
          style=label.style_label_up, color=color.blue, 
          textcolor=color.white, size=size.tiny)
    
    if bear_bos
        label.new(bar_index, high + atr_14 * 0.5, "📉 BEAR BOS", 
          style=label.style_label_down, color=color.purple, 
          textcolor=color.white, size=size.tiny)

    // Order Block labels
    if bull_ob_signal
        label.new(bar_index[1], high[1] + atr_14 * 0.3, "📦 BULL OB", 
          style=label.style_label_down, color=color.green, 
          textcolor=color.white, size=size.tiny)
    
    if bear_ob_signal
        label.new(bar_index[1], low[1] - atr_14 * 0.3, "📦 BEAR OB", 
          style=label.style_label_up, color=color.red, 
          textcolor=color.white, size=size.tiny)

// ============================================================================
// 📊 ADVANCED DATA WINDOW OUTPUTS (FOR INTEGRATION)
// ============================================================================
plot(bull_advanced_pattern ? 1 : 0, "Bull_Advanced_Pattern", display=display.data_window)
plot(bear_advanced_pattern ? 1 : 0, "Bear_Advanced_Pattern", display=display.data_window)
plot(v1_day2_setup ? 1 : 0, "V1_Day2", display=display.data_window)
plot(v2_day2_setup ? 1 : 0, "V2_Day2", display=display.data_window)
plot(a1_day3_setup ? 1 : 0, "A1_Day3", display=display.data_window)
plot(a2_day3_setup ? 1 : 0, "A2_Day3", display=display.data_window)
plot(bull_ob_signal ? 1 : 0, "Bull_Order_Block", display=display.data_window)
plot(bear_ob_signal ? 1 : 0, "Bear_Order_Block", display=display.data_window)
plot(bull_fvg ? 1 : 0, "Bull_FVG", display=display.data_window)
plot(bear_fvg ? 1 : 0, "Bear_FVG", display=display.data_window)
plot(bull_bos ? 1 : 0, "Bull_BOS", display=display.data_window)
plot(bear_bos ? 1 : 0, "Bear_BOS", display=display.data_window)
plot(calc_pattern_strength(60), "Advanced_Pattern_Strength", display=display.data_window)