//@version=5

// =============================================================================
// BTMM ASIAN RANGE - SESSION-BASED TRADING ZONES
// =============================================================================
// @description Asian session range detection with breakout analysis
// @purpose High-probability breakout trading using Asian session accumulation
// @method Session-based range analysis with institutional flow confirmation
// @author BTMM Development Team
// @version 2.0 - Enhanced with BTMMFoundation integration
// @date 2025-07-02
// =============================================================================

// Note: BTMMFoundation functions imported directly due to local development
// In production, this would use: import username/BTMMFoundation/1 as btmm

// =============================================================================
// BTMM ASIAN RANGE SYSTEM - INSTITUTIONAL LEVEL DETECTION
// =============================================================================
// Purpose: Complete Asian session analysis with level quality assessment
// Method: Professional Asian box detection with institutional context analysis
// Author: BTMM Development Team
// Version: 2.0 - Enhanced from Master System
// Date: 2025-07-02
// =============================================================================

indicator("BTMM Asian Range", "BTMM Asian", overlay=true, shorttitle="BTMM Asian",
         max_boxes_count=50, max_lines_count=100, max_labels_count=100)

// ============================================================================
// 🌏 ASIAN SESSION CONFIGURATION
// ============================================================================

// === SESSION TIMING SETTINGS ===
session_group = "⏰ Session Timing (Market Maker Cycle)"
asian_session_time = input.session("1700-0000", "Asian Session (Accumulation)", group=session_group, tooltip="17:00-00:00 EST - Corrected timing")
asian_pivot_reference = input.session("1700-1700", "Asian Pivot Reference (24h)", group=session_group, tooltip="24-hour reference for pivot lines (5PM to next day 5PM)")
london_session_time = input.session("0200-0900", "London Session (Manipulation)", group=session_group, tooltip="02:00-09:00 EST - Prime trading")
ny_session_time = input.session("0930-1700", "NY Session (Distribution)", group=session_group, tooltip="09:30-17:00 EST - Prime trading")
show_session_boxes = input.bool(true, "Show Session Background", group=session_group)
enable_stop_hunt_warnings = input.bool(true, "Enable Stop Hunt Warnings", group=session_group)

// === ASIAN LEVEL SETTINGS ===
asian_group = "🌏 Asian Level Analysis"
show_asian_levels = input.bool(true, "Show Asian Levels", group=asian_group)
show_asian_box = input.bool(true, "Show Asian Box", group=asian_group)
show_level_labels = input.bool(true, "Show Level Labels", group=asian_group)
show_quality_assessment = input.bool(true, "Show Quality Assessment", group=asian_group)
extend_levels = input.int(50, "Extend Levels (bars)", minval=10, maxval=200, group=asian_group)

// === VISUAL SETTINGS ===
visual_group = "🎨 Visual Configuration"
line_width = input.int(2, "Line Width", minval=1, maxval=5, group=visual_group)
label_size = input.string("normal", "Label Size", options=["tiny", "small", "normal", "large", "huge"], group=visual_group)
transparency = input.int(85, "Box Transparency", minval=50, maxval=95, group=visual_group)

// ============================================================================
// ⏰ SESSION TIMING & MARKET MAKER CYCLE
// ============================================================================

// Session detection
in_asian = time(timeframe.period, asian_session_time)
in_asian_pivot = time(timeframe.period, asian_pivot_reference)  // 24-hour pivot reference
in_london = time(timeframe.period, london_session_time)
in_ny = time(timeframe.period, ny_session_time)

is_asian = not na(in_asian)
is_asian_pivot_active = not na(in_asian_pivot)  // 24-hour reference for pivot lines
is_london = not na(in_london)
is_ny = not na(in_ny)

// Market Maker Phase
get_market_maker_phase() =>
    phase = is_asian ? "ACCUMULATION" : is_london ? "MANIPULATION" : is_ny ? "DISTRIBUTION" : "CONSOLIDATION"
    phase

current_mm_phase = get_market_maker_phase()

// Stop hunt detection
current_hour = hour(time)
current_minute = minute(time)

pre_london_stop_hunt = (current_hour == 1 and current_minute >= 45) or (current_hour == 2 and current_minute <= 15)
pre_ny_stop_hunt = (current_hour == 9 and current_minute >= 15 and current_minute <= 45)

trading_allowed = (is_london or is_ny) and not pre_london_stop_hunt and not pre_ny_stop_hunt
analysis_only = is_asian

// Session backgrounds
if show_session_boxes
    bgcolor(is_asian ? color.new(color.yellow, 95) : na, title="Asian Session")
    bgcolor(is_london and trading_allowed ? color.new(color.blue, 98) : na, title="London Session")
    bgcolor(is_ny and trading_allowed ? color.new(color.purple, 98) : na, title="NY Session")
    bgcolor(pre_london_stop_hunt or pre_ny_stop_hunt ? color.new(color.red, 90) : na, title="Stop Hunt Window")

// ============================================================================
// 🌏 ASIAN LEVEL CALCULATIONS
// ============================================================================

var float asian_high = na
var float asian_low = na
var float asian_open = na
var float asian_close = na
var float asian_50_level = na
var float asian_range = na
var int asian_start_bar = na
var int asian_end_bar = na

new_asian_session = is_asian and not is_asian[1]
asian_session_ending = not is_asian and is_asian[1]

if is_asian
    if new_asian_session
        asian_open := open
        asian_high := high
        asian_low := low
        asian_start_bar := bar_index
    else
        asian_high := math.max(asian_high, high)
        asian_low := math.min(asian_low, low)

if asian_session_ending
    asian_close := close[1]
    asian_end_bar := bar_index - 1

if not na(asian_high) and not na(asian_low)
    asian_range := asian_high - asian_low
    asian_50_level := (asian_high + asian_low) / 2

// ============================================================================
// 🎯 ASIAN BOX QUALITY ASSESSMENT
// ============================================================================

// Asian box quality assessment
asian_box_quality() =>
    quality = "INVALID"
    score = 0

    if not na(asian_range) and asian_range > 0
        range_pips = asian_range / syminfo.mintick

        // Range quality scoring
        if range_pips <= 30
            quality := "OPTIMAL"
            score := 5
        else if range_pips <= 50
            quality := "GOOD"
            score := 4
        else if range_pips <= 75
            quality := "ACCEPTABLE"
            score := 3
        else if range_pips <= 100
            quality := "WIDE"
            score := 2
        else
            quality := "TOO_WIDE"
            score := 1

    [quality, score, range_pips]

[asian_quality, quality_score, range_pips] = asian_box_quality()

// Asian level strength assessment
asian_level_strength() =>
    strength = "WEAK"

    if not na(asian_open) and not na(asian_50_level)
        open_to_50_ratio = math.abs(asian_open - asian_50_level) / asian_range

        if open_to_50_ratio <= 0.1
            strength := "PERFECT"  // Open very close to 50%
        else if open_to_50_ratio <= 0.2
            strength := "STRONG"   // Open reasonably close to 50%
        else if open_to_50_ratio <= 0.3
            strength := "MODERATE" // Open somewhat close to 50%
        else
            strength := "WEAK"     // Open far from 50%

    strength

level_strength = asian_level_strength()

// ============================================================================
// 🎨 VISUAL ELEMENTS & LEVEL DRAWING
// ============================================================================

// Label size conversion
label_text_size = switch label_size
    "tiny" => size.tiny
    "small" => size.small
    "normal" => size.normal
    "large" => size.large
    "huge" => size.huge
    => size.normal

// Draw Asian levels
var line asian_high_line = na
var line asian_low_line = na
var line asian_open_line = na
var line asian_50_line = na
var box asian_range_box = na
var label asian_quality_label = na

if show_asian_levels and asian_session_ending and not na(asian_high)
    // Delete previous lines and box
    if not na(asian_high_line)
        line.delete(asian_high_line)
        line.delete(asian_low_line)
        line.delete(asian_open_line)
        line.delete(asian_50_line)
        box.delete(asian_range_box)
        label.delete(asian_quality_label)

    // Draw new levels
    asian_high_line := line.new(bar_index, asian_high, bar_index + extend_levels, asian_high,
                               color=color.red, width=line_width, style=line.style_solid)
    asian_low_line := line.new(bar_index, asian_low, bar_index + extend_levels, asian_low,
                              color=color.green, width=line_width, style=line.style_solid)
    asian_open_line := line.new(bar_index, asian_open, bar_index + extend_levels, asian_open,
                               color=color.orange, width=line_width, style=line.style_dashed)
    asian_50_line := line.new(bar_index, asian_50_level, bar_index + extend_levels, asian_50_level,
                             color=color.blue, width=line_width, style=line.style_dotted)

    // Draw Asian box
    if show_asian_box
        box_color = switch asian_quality
            "OPTIMAL" => color.new(color.green, transparency)
            "GOOD" => color.new(color.lime, transparency)
            "ACCEPTABLE" => color.new(color.yellow, transparency)
            "WIDE" => color.new(color.orange, transparency)
            "TOO_WIDE" => color.new(color.red, transparency)
            => color.new(color.gray, transparency)

        asian_range_box := box.new(asian_start_bar, asian_high, asian_end_bar, asian_low,
                                  border_color=color.gray, bgcolor=box_color, border_width=1)

    // Quality assessment label
    if show_quality_assessment
        quality_text = "🌏 ASIAN ANALYSIS\n" +
                      "Quality: " + asian_quality + " (" + str.tostring(quality_score) + "/5)\n" +
                      "Range: " + str.tostring(range_pips, "#") + " pips\n" +
                      "Level Strength: " + level_strength + "\n" +
                      "High: " + str.tostring(asian_high, "#.#####") + "\n" +
                      "Low: " + str.tostring(asian_low, "#.#####") + "\n" +
                      "50%: " + str.tostring(asian_50_level, "#.#####") + "\n" +
                      "Open: " + str.tostring(asian_open, "#.#####")

        label_color = switch asian_quality
            "OPTIMAL" => color.green
            "GOOD" => color.lime
            "ACCEPTABLE" => color.yellow
            "WIDE" => color.orange
            "TOO_WIDE" => color.red
            => color.gray

        asian_quality_label := label.new(bar_index + 5, asian_high + ta.atr(14) * 0.5, quality_text,
                                        style=label.style_label_down, color=label_color,
                                        textcolor=color.white, size=label_text_size)

// Level labels
if show_level_labels and barstate.islast and not na(asian_high)
    label.new(bar_index + extend_levels + 2, asian_high, "🔴 Asian High",
             style=label.style_label_left, color=color.red, textcolor=color.white, size=size.tiny)
    label.new(bar_index + extend_levels + 2, asian_low, "🟢 Asian Low",
             style=label.style_label_left, color=color.green, textcolor=color.white, size=size.tiny)
    label.new(bar_index + extend_levels + 2, asian_open, "🟠 Asian Open",
             style=label.style_label_left, color=color.orange, textcolor=color.white, size=size.tiny)
    label.new(bar_index + extend_levels + 2, asian_50_level, "🔵 Asian 50%",
             style=label.style_label_left, color=color.blue, textcolor=color.white, size=size.tiny)

// ============================================================================
// 🚨 STOP HUNT WARNING SYSTEM
// ============================================================================

// Stop hunt warnings
if enable_stop_hunt_warnings
    if pre_london_stop_hunt and not pre_london_stop_hunt[1]
        label.new(bar_index, high + ta.atr(14) * 2,
                 "⚠️ PRE-LONDON STOP HUNT\n" +
                 "Avoid trading for 30 minutes\n" +
                 "Institutions hunting stops\n" +
                 "Time: " + str.format_time(time, "HH:mm"),
                 style=label.style_label_down, color=color.red, textcolor=color.white, size=size.normal)

    if pre_ny_stop_hunt and not pre_ny_stop_hunt[1]
        label.new(bar_index, high + ta.atr(14) * 2,
                 "⚠️ PRE-NY STOP HUNT\n" +
                 "Avoid trading for 30 minutes\n" +
                 "Institutions hunting stops\n" +
                 "Time: " + str.format_time(time, "HH:mm"),
                 style=label.style_label_down, color=color.red, textcolor=color.white, size=size.normal)

// ============================================================================
// 📊 LEVEL INTERACTION ANALYSIS
// ============================================================================

// Level interaction detection
price_at_asian_high = not na(asian_high) and math.abs(close - asian_high) <= ta.atr(14) * 0.5
price_at_asian_low = not na(asian_low) and math.abs(close - asian_low) <= ta.atr(14) * 0.5
price_at_asian_50 = not na(asian_50_level) and math.abs(close - asian_50_level) <= ta.atr(14) * 0.5
price_at_asian_open = not na(asian_open) and math.abs(close - asian_open) <= ta.atr(14) * 0.5

// Level break detection
asian_high_break = not na(asian_high) and close > asian_high and close[1] <= asian_high
asian_low_break = not na(asian_low) and close < asian_low and close[1] >= asian_low

// Level test without break
asian_high_test = price_at_asian_high and not asian_high_break
asian_low_test = price_at_asian_low and not asian_low_break

// Manipulation detection at levels
manipulation_at_high = asian_high_test and high > asian_high and close <= asian_high
manipulation_at_low = asian_low_test and low < asian_low and close >= asian_low

// ============================================================================
// 🎯 INSTITUTIONAL CONTEXT ANALYSIS
// ============================================================================

// Asian session completion status
asian_session_complete = not na(asian_high) and not na(asian_low) and not na(asian_open) and not na(asian_close)

// Institutional setup quality
institutional_setup_quality() =>
    if not asian_session_complete
        "INCOMPLETE"
    else if asian_quality == "OPTIMAL" and level_strength == "PERFECT"
        "INSTITUTIONAL_GRADE"
    else if asian_quality == "GOOD" and level_strength == "STRONG"
        "HIGH_PROBABILITY"
    else if asian_quality == "ACCEPTABLE" and level_strength == "MODERATE"
        "MODERATE_PROBABILITY"
    else
        "LOW_PROBABILITY"

institutional_quality = institutional_setup_quality()

// ============================================================================
// 📊 DATA WINDOW OUTPUTS (FOR INTEGRATION)
// ============================================================================

plot(asian_high, "Asian_High", display=display.data_window)
plot(asian_low, "Asian_Low", display=display.data_window)
plot(asian_open, "Asian_Open", display=display.data_window)
plot(asian_50_level, "Asian_50_Level", display=display.data_window)
plot(asian_range, "Asian_Range", display=display.data_window)
plot(range_pips, "Range_Pips", display=display.data_window)
plot(quality_score, "Quality_Score", display=display.data_window)
plot(is_asian ? 1 : 0, "In_Asian_Session", display=display.data_window)
plot(is_london ? 1 : 0, "In_London_Session", display=display.data_window)
plot(is_ny ? 1 : 0, "In_NY_Session", display=display.data_window)
plot(trading_allowed ? 1 : 0, "Trading_Allowed", display=display.data_window)
plot(analysis_only ? 1 : 0, "Analysis_Only", display=display.data_window)
plot(price_at_asian_high ? 1 : 0, "At_Asian_High", display=display.data_window)
plot(price_at_asian_low ? 1 : 0, "At_Asian_Low", display=display.data_window)
plot(price_at_asian_50 ? 1 : 0, "At_Asian_50", display=display.data_window)
plot(asian_high_break ? 1 : 0, "Asian_High_Break", display=display.data_window)
plot(asian_low_break ? 1 : 0, "Asian_Low_Break", display=display.data_window)
plot(manipulation_at_high ? 1 : 0, "Manipulation_High", display=display.data_window)
plot(manipulation_at_low ? 1 : 0, "Manipulation_Low", display=display.data_window)
plot(pre_london_stop_hunt ? 1 : 0, "Pre_London_Hunt", display=display.data_window)
plot(pre_ny_stop_hunt ? 1 : 0, "Pre_NY_Hunt", display=display.data_window)
// ============================================================================
// MERGED FROM: BTMM_Session_Analysis
// ============================================================================

// ═══════════════════════════════════════════════════════════════════════════════════
// 🌏 BTMM SESSION ANALYSIS - SCRIPT 2 OF 10
// Steve Mauro's Beat The Market Maker Methodology
// Focus: Asian Range, London/NY Sessions, Stop Hunt Detection, Market Maker Cycle
// ═══════════════════════════════════════════════════════════════════════════════════

import TradingView/ta/7 as ta

// === SESSION CONFIGURATION ===
session_group = "⏰ BTMM Session Analysis"
asian_session = input.session("1700-0000", "Asian Session (Accumulation)", group=session_group, tooltip="5PM-Midnight EST with 24h pivot reference")
asian_pivot_session = input.session("1700-1700", "Asian Pivot Reference (24h)", group=session_group, tooltip="24-hour reference for pivot lines")
london_session = input.session("0200-0900", "London Session (Manipulation)", group=session_group)
ny_session = input.session("0930-1700", "NY Session (Distribution)", group=session_group)
show_session_backgrounds = input.bool(true, "Show Session Backgrounds", group=session_group)
session_transparency = input.int(85, "Session Background Transparency", minval=50, maxval=95, group=session_group)

// === ASIAN RANGE CONFIGURATION ===
asian_group = "🏮 Asian Range Analysis"
track_asian_range = input.bool(true, "Track Asian Range", group=asian_group)
asian_range_extension = input.bool(true, "Show Asian Range Extension", group=asian_group)
asian_midpoint = input.bool(true, "Show Asian Midpoint", group=asian_group)
optimal_asian_pips = input.int(50, "Optimal Asian Range (pips)", minval=20, maxval=120, group=asian_group)
show_asian_stats = input.bool(true, "Show Asian Range Statistics", group=asian_group)

// === STOP HUNT DETECTION ===
stophunt_group = "🎯 Stop Hunt Detection"
enable_stop_hunt_alerts = input.bool(true, "Enable Stop Hunt Detection", group=stophunt_group)
stop_hunt_sensitivity = input.float(1.0, "Stop Hunt Sensitivity", minval=0.5, maxval=2.0, step=0.1, group=stophunt_group)
show_liquidity_levels = input.bool(true, "Show Liquidity Sweep Levels", group=stophunt_group)
liquidity_lookback = input.int(20, "Liquidity Level Lookback", minval=10, maxval=50, group=stophunt_group)

// === MARKET MAKER CYCLE ===
cycle_group = "🔄 Market Maker Cycle"
show_accumulation_phase = input.bool(true, "Show Accumulation Phase", group=cycle_group)
show_manipulation_phase = input.bool(true, "Show Manipulation Phase", group=cycle_group)
show_distribution_phase = input.bool(true, "Show Distribution Phase", group=cycle_group)
cycle_analysis_bars = input.int(100, "Cycle Analysis Period", minval=50, maxval=200, group=cycle_group)

// === VISUAL SETTINGS ===
visual_group = "🎨 Visual Configuration"
asian_box_color = input.color(color.new(color.yellow, session_transparency), "Asian Session Color", group=visual_group)
london_box_color = input.color(color.new(color.blue, session_transparency), "London Session Color", group=visual_group)
ny_box_color = input.color(color.new(color.green, session_transparency), "NY Session Color", group=visual_group)
show_session_labels = input.bool(true, "Show Session Labels", group=visual_group)
label_offset = input.int(10, "Label Position Offset", minval=5, maxval=50, group=visual_group)

// === ALERT CONFIGURATION ===
alert_group = "🚨 Session Alert Settings"
enable_session_alerts = input.bool(true, "Session Change Alerts", group=alert_group)
enable_asian_range_alerts = input.bool(true, "Asian Range Break Alerts", group=alert_group)
enable_stop_hunt_alerts_notify = input.bool(true, "Stop Hunt Alert Notifications", group=alert_group)
alert_frequency = input.string("once_per_bar", "Alert Frequency", options=["once_per_bar", "once_per_bar_close"], group=alert_group)

// ═══════════════════════════════════════════════════════════════════════════════════
// 📊 SESSION DETECTION LOGIC
// ═══════════════════════════════════════════════════════════════════════════════════

// Session Detection
in_asian_session = time(timeframe.period, asian_session)
in_asian_pivot_session = time(timeframe.period, asian_pivot_session)  // 24-hour pivot reference
in_london_session = time(timeframe.period, london_session)
in_ny_session = time(timeframe.period, ny_session)

// Session Transitions
asian_session_start = not in_asian_session[1] and in_asian_session
london_session_start = not in_london_session[1] and in_london_session
ny_session_start = not in_ny_session[1] and in_ny_session

asian_session_end = in_asian_session[1] and not in_asian_session
london_session_end = in_london_session[1] and not in_london_session
ny_session_end = in_ny_session[1] and not in_ny_session

// Current Session Identification
current_session = in_asian_session ? "ASIAN" : in_london_session ? "LONDON" : in_ny_session ? "NY" : "OFF-HOURS"

// Market Maker Cycle Phase
get_market_maker_phase() =>
    if in_asian_session
        "ACCUMULATION"
    else if in_london_session
        "MANIPULATION"
    else if in_ny_session
        "DISTRIBUTION"
    else
        "CONSOLIDATION"

current_mm_phase = get_market_maker_phase()

// ═══════════════════════════════════════════════════════════════════════════════════
// 🏮 ASIAN RANGE ANALYSIS
// ═══════════════════════════════════════════════════════════════════════════════════

var float asian_high = na
var float asian_low = na
var float asian_range_pips = na
var bool asian_range_valid = false

// Track Asian Range
if track_asian_range
    if asian_session_start
        asian_high := high
        asian_low := low
        asian_range_valid := false
    else if in_asian_session and not na(asian_high) and not na(asian_low)
        asian_high := math.max(asian_high, high)
        asian_low := math.min(asian_low, low)
    else if asian_session_end and not na(asian_high) and not na(asian_low)
        asian_range_pips := math.abs(asian_high - asian_low) / syminfo.mintick * syminfo.pointvalue
        asian_range_valid := asian_range_pips >= (optimal_asian_pips * 0.5) and asian_range_pips <= (optimal_asian_pips * 2.0)

// Asian Midpoint
asian_midpoint_level = not na(asian_high) and not na(asian_low) ? (asian_high + asian_low) / 2 : na

// Asian Range Extension
asian_range_size = not na(asian_high) and not na(asian_low) ? asian_high - asian_low : na
asian_high_extended = not na(asian_high) and not na(asian_range_size) ? asian_high + (asian_range_size * 0.5) : na
asian_low_extended = not na(asian_low) and not na(asian_range_size) ? asian_low - (asian_range_size * 0.5) : na

// ═══════════════════════════════════════════════════════════════════════════════════
// 🎯 STOP HUNT DETECTION
// ═══════════════════════════════════════════════════════════════════════════════════

// Liquidity Level Detection
get_liquidity_levels() =>
    var array<float> recent_highs = array.new<float>()
    var array<float> recent_lows = array.new<float>()

    // Track recent highs and lows
    if barstate.isconfirmed
        if array.size(recent_highs) >= liquidity_lookback
            array.shift(recent_highs)
        if array.size(recent_lows) >= liquidity_lookback
            array.shift(recent_lows)

        array.push(recent_highs, high)
        array.push(recent_lows, low)

    // Find significant levels
    highest_level = array.size(recent_highs) > 0 ? array.max(recent_highs) : na
    lowest_level = array.size(recent_lows) > 0 ? array.min(recent_lows) : na

    [highest_level, lowest_level]

[liquidity_high, liquidity_low] = get_liquidity_levels()

// Stop Hunt Detection Logic
detect_stop_hunt() =>
    if enable_stop_hunt_alerts and not na(liquidity_high) and not na(liquidity_low)
        // Bullish Stop Hunt: Price sweeps below low then recovers
        bullish_hunt = low <= liquidity_low * (1 - (stop_hunt_sensitivity * 0.001)) and close > low + (high - low) * 0.5

        // Bearish Stop Hunt: Price sweeps above high then rejects
        bearish_hunt = high >= liquidity_high * (1 + (stop_hunt_sensitivity * 0.001)) and close < high - (high - low) * 0.5

        [bullish_hunt, bearish_hunt]
    else
        [false, false]

[bullish_stop_hunt, bearish_stop_hunt] = detect_stop_hunt()

// ═══════════════════════════════════════════════════════════════════════════════════
// 🎨 VISUAL ELEMENTS
// ═══════════════════════════════════════════════════════════════════════════════════

// Session Background Colors
bgcolor(show_session_backgrounds and in_asian_session ? asian_box_color : na, title="Asian Session (5PM-Midnight)")
bgcolor(show_session_backgrounds and in_london_session ? london_box_color : na, title="London Session BG")
bgcolor(show_session_backgrounds and in_ny_session ? ny_box_color : na, title="NY Session BG")

// Asian Range Lines
plot(track_asian_range and not na(asian_high) ? asian_high : na, "Asian High", color=color.new(color.yellow, 30), linewidth=2, style=plot.style_line)
plot(track_asian_range and not na(asian_low) ? asian_low : na, "Asian Low", color=color.new(color.yellow, 30), linewidth=2, style=plot.style_line)
plot(asian_midpoint and not na(asian_midpoint_level) ? asian_midpoint_level : na, "Asian Midpoint", color=color.new(color.orange, 50), linewidth=1, style=plot.style_line)

// Asian Range Extension
plot(asian_range_extension and not na(asian_high_extended) ? asian_high_extended : na, "Asian High Ext", color=color.new(color.yellow, 70), linewidth=1, style=plot.style_circles)
plot(asian_range_extension and not na(asian_low_extended) ? asian_low_extended : na, "Asian Low Ext", color=color.new(color.yellow, 70), linewidth=1, style=plot.style_circles)

// Liquidity Levels
plot(show_liquidity_levels and not na(liquidity_high) ? liquidity_high : na, "Liquidity High", color=color.new(color.red, 60), linewidth=1, style=plot.style_cross)
plot(show_liquidity_levels and not na(liquidity_low) ? liquidity_low : na, "Liquidity Low", color=color.new(color.green, 60), linewidth=1, style=plot.style_cross)

// Session Labels
if show_session_labels and barstate.islast
    if not na(asian_high)
        label.new(bar_index + label_offset, asian_high, "🏮 Asian High", style=label.style_label_down, color=color.yellow, textcolor=color.black, size=size.small)
    if not na(asian_low)
        label.new(bar_index + label_offset, asian_low, "🏮 Asian Low", style=label.style_label_up, color=color.yellow, textcolor=color.black, size=size.small)
    if not na(asian_midpoint_level) and asian_midpoint
        label.new(bar_index + label_offset, asian_midpoint_level, "🎯 Asian Mid", style=label.style_label_left, color=color.orange, textcolor=color.white, size=size.tiny)

// Stop Hunt Visual Alerts
if bullish_stop_hunt
    label.new(bar_index, low, "🎯 BULLISH HUNT", style=label.style_label_up, color=color.green, textcolor=color.white, size=size.normal)

if bearish_stop_hunt
    label.new(bar_index, high, "🎯 BEARISH HUNT", style=label.style_label_down, color=color.red, textcolor=color.white, size=size.normal)

// ═══════════════════════════════════════════════════════════════════════════════════
// 📊 SESSION ANALYSIS TABLE
// ═══════════════════════════════════════════════════════════════════════════════════

if show_asian_stats and barstate.islast
    var table session_table = table.new(position.top_left, 3, 6, bgcolor=color.new(color.white, 10), border_width=2)

    // Header
    table.cell(session_table, 0, 0, "SESSION ANALYSIS", bgcolor=color.navy, text_color=color.white, text_size=size.normal)
    table.cell(session_table, 1, 0, "VALUE", bgcolor=color.gray, text_color=color.white, text_size=size.normal)
    table.cell(session_table, 2, 0, "STATUS", bgcolor=color.gray, text_color=color.white, text_size=size.normal)

    // Current Session
    session_color = current_session == "ASIAN" ? color.new(color.yellow, 70) :
                   current_session == "LONDON" ? color.new(color.blue, 70) :
                   current_session == "NY" ? color.new(color.green, 70) : color.new(color.gray, 70)
    table.cell(session_table, 0, 1, "Current Session", bgcolor=color.purple, text_color=color.white)
    table.cell(session_table, 1, 1, current_session, bgcolor=session_color, text_color=color.white)
    table.cell(session_table, 2, 1, current_mm_phase, bgcolor=session_color, text_color=color.white)

    // Asian Range
    range_color = asian_range_valid ? color.new(color.green, 70) : color.new(color.orange, 70)
    table.cell(session_table, 0, 2, "Asian Range", bgcolor=color.yellow, text_color=color.black)
    table.cell(session_table, 1, 2, not na(asian_range_pips) ? str.tostring(asian_range_pips, "#.#") + " pips" : "N/A", bgcolor=color.new(color.yellow, 70), text_color=color.black)
    table.cell(session_table, 2, 2, asian_range_valid ? "✅ OPTIMAL" : not na(asian_range_pips) ? "⚠️ SUBOPTIMAL" : "⏳ PENDING", bgcolor=range_color, text_color=color.white)

    // Asian Levels
    if not na(asian_high) and not na(asian_low)
        table.cell(session_table, 0, 3, "Asian High", bgcolor=color.orange, text_color=color.white)
        table.cell(session_table, 1, 3, str.tostring(asian_high, "#.#####"), bgcolor=color.new(color.orange, 70), text_color=color.white)
        table.cell(session_table, 2, 3, close > asian_high ? "🔥 BROKEN" : "📊 INTACT", bgcolor=close > asian_high ? color.new(color.red, 70) : color.new(color.gray, 70), text_color=color.white)

        table.cell(session_table, 0, 4, "Asian Low", bgcolor=color.orange, text_color=color.white)
        table.cell(session_table, 1, 4, str.tostring(asian_low, "#.#####"), bgcolor=color.new(color.orange, 70), text_color=color.white)
        table.cell(session_table, 2, 4, close < asian_low ? "🔥 BROKEN" : "📊 INTACT", bgcolor=close < asian_low ? color.new(color.red, 70) : color.new(color.gray, 70), text_color=color.white)

    // Stop Hunt Status
    hunt_color = bullish_stop_hunt or bearish_stop_hunt ? color.new(color.red, 50) : color.new(color.gray, 80)
    hunt_status = bullish_stop_hunt ? "🎯 BULL HUNT" : bearish_stop_hunt ? "🎯 BEAR HUNT" : "❌ NONE"
    table.cell(session_table, 0, 5, "Stop Hunt", bgcolor=color.red, text_color=color.white)
    table.cell(session_table, 1, 5, "ACTIVE", bgcolor=hunt_color, text_color=color.white)
    table.cell(session_table, 2, 5, hunt_status, bgcolor=hunt_color, text_color=color.white)

// ═══════════════════════════════════════════════════════════════════════════════════
// 🚨 SESSION ALERTS
// ═══════════════════════════════════════════════════════════════════════════════════

alert_freq = alert_frequency == "once_per_bar" ? alert.freq_once_per_bar : alert.freq_once_per_bar_close

// Session Change Alerts
if enable_session_alerts
    if asian_session_start
        alert("🏮 ASIAN SESSION STARTED!\n" +
              "Symbol: " + syminfo.ticker + "\n" +
              "Timeframe: " + timeframe.period + "\n" +
              "Phase: ACCUMULATION\n" +
              "Expected: Range formation and accumulation", alert_freq)

    if london_session_start
        alert("🌍 LONDON SESSION STARTED!\n" +
              "Symbol: " + syminfo.ticker + "\n" +
              "Timeframe: " + timeframe.period + "\n" +
              "Phase: MANIPULATION\n" +
              "Expected: Asian range manipulation and liquidity sweeps", alert_freq)

    if ny_session_start
        alert("🇺🇸 NY SESSION STARTED!\n" +
              "Symbol: " + syminfo.ticker + "\n" +
              "Timeframe: " + timeframe.period + "\n" +
              "Phase: DISTRIBUTION\n" +
              "Expected: Trend distribution and continuation", alert_freq)

// Asian Range Break Alerts
if enable_asian_range_alerts and not na(asian_high) and not na(asian_low)
    if ta.crossover(close, asian_high)
        alert("🔥 ASIAN HIGH BREAK - BULLISH!\n" +
              "Symbol: " + syminfo.ticker + "\n" +
              "Asian High: " + str.tostring(asian_high, "#.#####") + "\n" +
              "Current Price: " + str.tostring(close, "#.#####") + "\n" +
              "Range Size: " + str.tostring(asian_range_pips, "#.#") + " pips", alert_freq)

    if ta.crossunder(close, asian_low)
        alert("🔥 ASIAN LOW BREAK - BEARISH!\n" +
              "Symbol: " + syminfo.ticker + "\n" +
              "Asian Low: " + str.tostring(asian_low, "#.#####") + "\n" +
              "Current Price: " + str.tostring(close, "#.#####") + "\n" +
              "Range Size: " + str.tostring(asian_range_pips, "#.#") + " pips", alert_freq)

// Stop Hunt Alerts
if enable_stop_hunt_alerts_notify
    if bullish_stop_hunt
        alert("🎯 BULLISH STOP HUNT DETECTED!\n" +
              "Symbol: " + syminfo.ticker + "\n" +
              "Liquidity swept below: " + str.tostring(liquidity_low, "#.#####") + "\n" +
              "Recovery price: " + str.tostring(close, "#.#####") + "\n" +
              "Session: " + current_session, alert_freq)

    if bearish_stop_hunt
        alert("🎯 BEARISH STOP HUNT DETECTED!\n" +
              "Symbol: " + syminfo.ticker + "\n" +
              "Liquidity swept above: " + str.tostring(liquidity_high, "#.#####") + "\n" +
              "Rejection price: " + str.tostring(close, "#.#####") + "\n" +
              "Session: " + current_session, alert_freq)

// ═══════════════════════════════════════════════════════════════════════════════════
// 📤 EXPORT FOR INTEGRATION WITH OTHER SCRIPTS
// ═══════════════════════════════════════════════════════════════════════════════════

export current_session
export current_mm_phase
export asian_high
export asian_low
export asian_midpoint_level
export asian_range_pips
export asian_range_valid
export bullish_stop_hunt
export bearish_stop_hunt
export liquidity_high
export liquidity_low
export in_asian_session
export in_london_session
export in_ny_session
