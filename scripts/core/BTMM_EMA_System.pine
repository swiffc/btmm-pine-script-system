//@version=5
indicator("BTMM Risk Management - Script 5/10",
         shorttitle="BTMM-Risk",
         overlay=true,
         max_boxes_count=100,
         max_lines_count=100,
         max_labels_count=100,
         max_tables_count=2)

// ═══════════════════════════════════════════════════════════════════════════════════
// 🛡️ BTMM RISK MANAGEMENT - SCRIPT 5 OF 10
// Steve Mauro's Beat The Market Maker Methodology
// Focus: Risk Levels, Stop Loss Calculation, Position Sizing, R:R Analysis
// ═══════════════════════════════════════════════════════════════════════════════════

import TradingView/ta/7 as ta

// === RISK MANAGEMENT CONFIGURATION ===
risk_group = "🛡️ Risk Management Settings"
account_size = input.float(10000.0, "Account Size ($)", minval=1000.0, maxval=1000000.0, group=risk_group)
risk_per_trade = input.float(1.0, "Risk Per Trade (%)", minval=0.1, maxval=5.0, step=0.1, group=risk_group)
max_risk_per_day = input.float(3.0, "Max Daily Risk (%)", minval=1.0, maxval=10.0, step=0.5, group=risk_group)
preferred_rr_ratio = input.float(2.0, "Preferred R:R Ratio", minval=1.0, maxval=5.0, step=0.1, group=risk_group)
enable_risk_alerts = input.bool(true, "Enable Risk Alerts", group=risk_group)

// === STOP LOSS CALCULATION ===
sl_group = "🚫 Stop Loss Configuration"
sl_method = input.string("ATR", "Stop Loss Method", options=["ATR", "EMA", "ASIAN_RANGE", "MANUAL"], group=sl_group)
atr_multiplier = input.float(2.0, "ATR Multiplier", minval=0.5, maxval=5.0, step=0.1, group=sl_group)
atr_length = input.int(14, "ATR Length", minval=5, maxval=50, group=sl_group)
manual_sl_pips = input.float(20.0, "Manual SL (Pips)", minval=5.0, maxval=100.0, group=sl_group)
show_sl_levels = input.bool(true, "Show Stop Loss Levels", group=sl_group)

// === POSITION SIZING ===
position_group = "📊 Position Sizing"
position_method = input.string("FIXED_RISK", "Position Sizing Method", options=["FIXED_RISK", "FIXED_AMOUNT", "KELLY"], group=position_group)
fixed_lot_size = input.float(0.1, "Fixed Lot Size", minval=0.01, maxval=10.0, step=0.01, group=position_group)
show_position_info = input.bool(true, "Show Position Information", group=position_group)
max_position_size = input.float(2.0, "Max Position Size (Lots)", minval=0.1, maxval=10.0, group=position_group)

// === VISUAL SETTINGS ===
visual_group = "🎨 Visual Configuration"
show_risk_table = input.bool(true, "Show Risk Management Table", group=visual_group)
show_rr_zones = input.bool(true, "Show R:R Zones", group=visual_group)
bullish_color = input.color(color.new(color.green, 70), "Bullish Zone Color", group=visual_group)
bearish_color = input.color(color.new(color.red, 70), "Bearish Zone Color", group=visual_group)
sl_line_color = input.color(color.red, "Stop Loss Line Color", group=visual_group)
tp_line_color = input.color(color.green, "Take Profit Line Color", group=visual_group)

// === ALERT CONFIGURATION ===
alert_group = "🚨 Risk Alert Settings"
enable_position_alerts = input.bool(true, "Position Size Alerts", group=alert_group)
enable_rr_alerts = input.bool(true, "R:R Ratio Alerts", group=alert_group)
enable_risk_breach_alerts = input.bool(true, "Risk Breach Alerts", group=alert_group)
alert_frequency = input.string("once_per_bar", "Alert Frequency", options=["once_per_bar", "once_per_bar_close"], group=alert_group)

// ═══════════════════════════════════════════════════════════════════════════════════
// 📊 RISK CALCULATIONS
// ═══════════════════════════════════════════════════════════════════════════════════

// ATR for volatility-based calculations
atr_value = ta.atr(atr_length)

// EMA 13 for dynamic stop loss
ema_13 = ta.ema(close, 13)

// Asian Range for session-based stops
var float asian_high = na
var float asian_low = na
var float asian_range = na

// Track Asian session (simplified)
asian_session = time(timeframe.period, "1700-0000")  // Corrected: 5PM-Midnight EST
if asian_session and not asian_session[1]
    asian_high := high
    asian_low := low
else if asian_session
    asian_high := math.max(asian_high, high)
    asian_low := math.min(asian_low, low)
else if not asian_session and asian_session[1]
    asian_range := asian_high - asian_low

// Calculate Stop Loss Levels
calculate_stop_loss(entry_price, direction) =>
    var float sl_level = na

    switch sl_method
        "ATR" =>
            sl_level := direction == "LONG" ? entry_price - (atr_value * atr_multiplier) : entry_price + (atr_value * atr_multiplier)
        "EMA" =>
            sl_level := direction == "LONG" ? ema_13 : ema_13
        "ASIAN_RANGE" =>
            if not na(asian_range)
                sl_level := direction == "LONG" ? entry_price - asian_range : entry_price + asian_range
            else
                sl_level := direction == "LONG" ? entry_price - (atr_value * atr_multiplier) : entry_price + (atr_value * atr_multiplier)
        "MANUAL" =>
            pip_value = syminfo.mintick * 10
            sl_level := direction == "LONG" ? entry_price - (manual_sl_pips * pip_value) : entry_price + (manual_sl_pips * pip_value)
        =>
            sl_level := direction == "LONG" ? entry_price - (atr_value * atr_multiplier) : entry_price + (atr_value * atr_multiplier)

    sl_level

// Calculate Position Size
calculate_position_size(entry_price, sl_price, direction) =>
    var float position_size = 0.0

    if not na(entry_price) and not na(sl_price)
        risk_amount = account_size * (risk_per_trade / 100)

        // Calculate risk per pip
        pip_value = syminfo.mintick * 10
        sl_distance_pips = math.abs(entry_price - sl_price) / pip_value

        switch position_method
            "FIXED_RISK" =>
                if sl_distance_pips > 0
                    // Standard lot size calculation for forex
                    value_per_pip = 10.0  // $10 per pip for 1 standard lot in major pairs
                    position_size := math.min(risk_amount / (sl_distance_pips * value_per_pip), max_position_size)
            "FIXED_AMOUNT" =>
                position_size := fixed_lot_size
            "KELLY" =>
                // Simplified Kelly Criterion (requires win rate and avg win/loss data)
                win_rate = 0.6  // Default 60% win rate
                avg_win = preferred_rr_ratio
                avg_loss = 1.0
                kelly_percentage = (win_rate * avg_win - (1 - win_rate) * avg_loss) / avg_win
                kelly_position = math.max(0, kelly_percentage * risk_amount / (sl_distance_pips * 10))
                position_size := math.min(kelly_position, max_position_size)
            =>
                position_size := fixed_lot_size

    position_size

// Current price for calculations
current_entry = close

// Calculate stop losses for both directions
long_sl = calculate_stop_loss(current_entry, "LONG")
short_sl = calculate_stop_loss(current_entry, "SHORT")

// Calculate position sizes
long_position_size = calculate_position_size(current_entry, long_sl, "LONG")
short_position_size = calculate_position_size(current_entry, short_sl, "SHORT")

// Calculate R:R zones
long_risk = math.abs(current_entry - long_sl)
short_risk = math.abs(current_entry - short_sl)

long_tp_1r = current_entry + (long_risk * 1)
long_tp_2r = current_entry + (long_risk * 2)
long_tp_3r = current_entry + (long_risk * 3)

short_tp_1r = current_entry - (short_risk * 1)
short_tp_2r = current_entry - (short_risk * 2)
short_tp_3r = current_entry - (short_risk * 3)

// ═══════════════════════════════════════════════════════════════════════════════════
// 🎨 VISUAL RISK LEVELS
// ═══════════════════════════════════════════════════════════════════════════════════

// Plot Stop Loss Lines
plot(show_sl_levels ? long_sl : na, "Long SL", color=sl_line_color, linewidth=2, style=plot.style_line)
plot(show_sl_levels ? short_sl : na, "Short SL", color=sl_line_color, linewidth=2, style=plot.style_line)

// Plot Take Profit Levels
plot(show_rr_zones ? long_tp_1r : na, "Long TP 1R", color=color.new(tp_line_color, 70), linewidth=1, style=plot.style_circles)
plot(show_rr_zones ? long_tp_2r : na, "Long TP 2R", color=tp_line_color, linewidth=2, style=plot.style_line)
plot(show_rr_zones ? long_tp_3r : na, "Long TP 3R", color=color.new(tp_line_color, 70), linewidth=1, style=plot.style_circles)

plot(show_rr_zones ? short_tp_1r : na, "Short TP 1R", color=color.new(tp_line_color, 70), linewidth=1, style=plot.style_circles)
plot(show_rr_zones ? short_tp_2r : na, "Short TP 2R", color=tp_line_color, linewidth=2, style=plot.style_line)
plot(show_rr_zones ? short_tp_3r : na, "Short TP 3R", color=color.new(tp_line_color, 70), linewidth=1, style=plot.style_circles)

// R:R Zone Boxes
if show_rr_zones and barstate.islast
    // Long R:R zones
    box.new(bar_index - 10, current_entry, bar_index + 5, long_tp_2r, bgcolor=bullish_color, border_color=color.green, border_width=1)

    // Short R:R zones
    box.new(bar_index - 10, current_entry, bar_index + 5, short_tp_2r, bgcolor=bearish_color, border_color=color.red, border_width=1)

// Labels for key levels
if show_sl_levels and barstate.islast
    label.new(bar_index + 3, long_sl, "LONG SL", style=label.style_label_left, color=color.red, textcolor=color.white, size=size.small)
    label.new(bar_index + 3, short_sl, "SHORT SL", style=label.style_label_left, color=color.red, textcolor=color.white, size=size.small)

if show_rr_zones and barstate.islast
    label.new(bar_index + 3, long_tp_2r, "LONG 2R", style=label.style_label_left, color=color.green, textcolor=color.white, size=size.small)
    label.new(bar_index + 3, short_tp_2r, "SHORT 2R", style=label.style_label_left, color=color.green, textcolor=color.white, size=size.small)

// ═══════════════════════════════════════════════════════════════════════════════════
// 📊 RISK MANAGEMENT TABLE
// ═══════════════════════════════════════════════════════════════════════════════════

if show_risk_table and barstate.islast
    var table risk_table = table.new(position.middle_right, 3, 8, bgcolor=color.new(color.white, 10), border_width=2)

    // Header
    table.cell(risk_table, 0, 0, "RISK MANAGEMENT", bgcolor=color.navy, text_color=color.white, text_size=size.normal)
    table.cell(risk_table, 1, 0, "LONG", bgcolor=color.green, text_color=color.white, text_size=size.normal)
    table.cell(risk_table, 2, 0, "SHORT", bgcolor=color.red, text_color=color.white, text_size=size.normal)

    // Entry Price
    table.cell(risk_table, 0, 1, "Entry Price", bgcolor=color.blue, text_color=color.white)
    table.cell(risk_table, 1, 1, str.tostring(current_entry, "#.#####"), bgcolor=color.new(color.blue, 70), text_color=color.white)
    table.cell(risk_table, 2, 1, str.tostring(current_entry, "#.#####"), bgcolor=color.new(color.blue, 70), text_color=color.white)

    // Stop Loss
    table.cell(risk_table, 0, 2, "Stop Loss", bgcolor=color.red, text_color=color.white)
    table.cell(risk_table, 1, 2, str.tostring(long_sl, "#.#####"), bgcolor=color.new(color.red, 70), text_color=color.white)
    table.cell(risk_table, 2, 2, str.tostring(short_sl, "#.#####"), bgcolor=color.new(color.red, 70), text_color=color.white)

    // Risk (Pips)
    long_risk_pips = math.abs(current_entry - long_sl) / (syminfo.mintick * 10)
    short_risk_pips = math.abs(current_entry - short_sl) / (syminfo.mintick * 10)
    table.cell(risk_table, 0, 3, "Risk (Pips)", bgcolor=color.orange, text_color=color.white)
    table.cell(risk_table, 1, 3, str.tostring(long_risk_pips, "#.#"), bgcolor=color.new(color.orange, 70), text_color=color.white)
    table.cell(risk_table, 2, 3, str.tostring(short_risk_pips, "#.#"), bgcolor=color.new(color.orange, 70), text_color=color.white)

    // Position Size
    table.cell(risk_table, 0, 4, "Position Size", bgcolor=color.purple, text_color=color.white)
    table.cell(risk_table, 1, 4, str.tostring(long_position_size, "#.##") + " lots", bgcolor=color.new(color.purple, 70), text_color=color.white)
    table.cell(risk_table, 2, 4, str.tostring(short_position_size, "#.##") + " lots", bgcolor=color.new(color.purple, 70), text_color=color.white)

    // Risk Amount ($)
    long_risk_amount = long_position_size * long_risk_pips * 10
    short_risk_amount = short_position_size * short_risk_pips * 10
    table.cell(risk_table, 0, 5, "Risk Amount", bgcolor=color.maroon, text_color=color.white)
    table.cell(risk_table, 1, 5, "$" + str.tostring(long_risk_amount, "#.##"), bgcolor=color.new(color.maroon, 70), text_color=color.white)
    table.cell(risk_table, 2, 5, "$" + str.tostring(short_risk_amount, "#.##"), bgcolor=color.new(color.maroon, 70), text_color=color.white)

    // Target 2R
    table.cell(risk_table, 0, 6, "Target 2R", bgcolor=color.green, text_color=color.white)
    table.cell(risk_table, 1, 6, str.tostring(long_tp_2r, "#.#####"), bgcolor=color.new(color.green, 70), text_color=color.white)
    table.cell(risk_table, 2, 6, str.tostring(short_tp_2r, "#.#####"), bgcolor=color.new(color.green, 70), text_color=color.white)

    // Potential Profit 2R
    long_profit_2r = long_position_size * (long_risk_pips * 2) * 10
    short_profit_2r = short_position_size * (short_risk_pips * 2) * 10
    table.cell(risk_table, 0, 7, "Profit 2R", bgcolor=color.lime, text_color=color.black)
    table.cell(risk_table, 1, 7, "$" + str.tostring(long_profit_2r, "#.##"), bgcolor=color.new(color.lime, 70), text_color=color.black)
    table.cell(risk_table, 2, 7, "$" + str.tostring(short_profit_2r, "#.##"), bgcolor=color.new(color.lime, 70), text_color=color.black)

// Account Risk Summary
if show_position_info and barstate.islast
    var table account_table = table.new(position.bottom_right, 2, 5, bgcolor=color.new(color.white, 10), border_width=2)

    // Header
    table.cell(account_table, 0, 0, "ACCOUNT RISK", bgcolor=color.navy, text_color=color.white, text_size=size.normal)
    table.cell(account_table, 1, 0, "VALUE", bgcolor=color.gray, text_color=color.white, text_size=size.normal)

    // Account Size
    table.cell(account_table, 0, 1, "Account Size", bgcolor=color.blue, text_color=color.white)
    table.cell(account_table, 1, 1, "$" + str.tostring(account_size, "#,###"), bgcolor=color.new(color.blue, 70), text_color=color.white)

    // Risk Per Trade
    risk_dollar_amount = account_size * (risk_per_trade / 100)
    table.cell(account_table, 0, 2, "Risk Per Trade", bgcolor=color.orange, text_color=color.white)
    table.cell(account_table, 1, 2, str.tostring(risk_per_trade, "#.#") + "% ($" + str.tostring(risk_dollar_amount, "#.##") + ")", bgcolor=color.new(color.orange, 70), text_color=color.white)

    // Max Daily Risk
    max_daily_risk_amount = account_size * (max_risk_per_day / 100)
    table.cell(account_table, 0, 3, "Max Daily Risk", bgcolor=color.red, text_color=color.white)
    table.cell(account_table, 1, 3, str.tostring(max_risk_per_day, "#.#") + "% ($" + str.tostring(max_daily_risk_amount, "#.##") + ")", bgcolor=color.new(color.red, 70), text_color=color.white)

    // Preferred R:R
    table.cell(account_table, 0, 4, "Target R:R", bgcolor=color.green, text_color=color.white)
    table.cell(account_table, 1, 4, "1:" + str.tostring(preferred_rr_ratio, "#.#"), bgcolor=color.new(color.green, 70), text_color=color.white)

// ═══════════════════════════════════════════════════════════════════════════════════
// 🚨 RISK MANAGEMENT ALERTS
// ═══════════════════════════════════════════════════════════════════════════════════

alert_freq = alert_frequency == "once_per_bar" ? alert.freq_once_per_bar : alert.freq_once_per_bar_close

// Position Size Alerts
if enable_position_alerts
    max_risk_amount = account_size * (risk_per_trade / 100)
    current_risk_amount = math.max(long_risk_amount, short_risk_amount)

    if current_risk_amount > max_risk_amount * 1.5
        alert("⚠️ HIGH RISK POSITION!\n" +
              "Symbol: " + syminfo.ticker + "\n" +
              "Current Risk: $" + str.tostring(current_risk_amount, "#.##") + "\n" +
              "Max Allowed: $" + str.tostring(max_risk_amount, "#.##") + "\n" +
              "Position size may be too large for account", alert_freq)

// R:R Ratio Alerts
if enable_rr_alerts
    current_rr_long = (long_tp_2r - current_entry) / (current_entry - long_sl)
    current_rr_short = (current_entry - short_tp_2r) / (short_sl - current_entry)

    if current_rr_long < preferred_rr_ratio or current_rr_short < preferred_rr_ratio
        alert("📊 LOW R:R RATIO!\n" +
              "Symbol: " + syminfo.ticker + "\n" +
              "Long R:R: 1:" + str.tostring(current_rr_long, "#.#") + "\n" +
              "Short R:R: 1:" + str.tostring(current_rr_short, "#.#") + "\n" +
              "Target R:R: 1:" + str.tostring(preferred_rr_ratio, "#.#"), alert_freq)

// Risk Breach Alerts
if enable_risk_breach_alerts
    daily_risk_threshold = account_size * (max_risk_per_day / 100)
    // This would need to track daily P&L in a real implementation

    if long_risk_amount > daily_risk_threshold or short_risk_amount > daily_risk_threshold
        alert("🛑 DAILY RISK BREACH WARNING!\n" +
              "Symbol: " + syminfo.ticker + "\n" +
              "Potential Risk: $" + str.tostring(math.max(long_risk_amount, short_risk_amount), "#.##") + "\n" +
              "Daily Limit: $" + str.tostring(daily_risk_threshold, "#.##") + "\n" +
              "Consider reducing position size", alert_freq)

// ═══════════════════════════════════════════════════════════════════════════════════
// 📤 EXPORT FOR INTEGRATION WITH OTHER SCRIPTS
// ═══════════════════════════════════════════════════════════════════════════════════

// Note: Converting export statements to plot() for indicator script compatibility
plot(long_sl, "Long_SL", display=display.data_window)
plot(short_sl, "Short_SL", display=display.data_window)
plot(long_tp_2r, "Long_TP_2R", display=display.data_window)
plot(short_tp_2r, "Short_TP_2R", display=display.data_window)
plot(long_position_size, "Long_Position_Size", display=display.data_window)
plot(short_position_size, "Short_Position_Size", display=display.data_window)
plot(account_size, "Account_Size", display=display.data_window)
plot(risk_per_trade, "Risk_Per_Trade", display=display.data_window)
plot(preferred_rr_ratio, "Preferred_RR_Ratio", display=display.data_window)
plot(atr_value, "ATR_Value", display=display.data_window)
// ============================================================================
// MERGED FROM: BTMM_TDI_Divergence
// ============================================================================

// ═══════════════════════════════════════════════════════════════════════════════════
// 📊 BTMM TDI DIVERGENCE SCANNER - SCRIPT 4 OF 10
// Steve Mauro's Beat The Market Maker Methodology
// Focus: TDI (Traders Dynamic Index) Divergence Detection, Regular & Hidden Divergences
// ═══════════════════════════════════════════════════════════════════════════════════

import TradingView/ta/7 as ta

// === TDI CONFIGURATION ===
tdi_group = "📊 TDI Configuration"
rsi_length = input.int(13, "RSI Length", minval=5, maxval=50, group=tdi_group, tooltip="Standard RSI period for TDI calculation")
rsi_smooth = input.int(2, "RSI Smoothing", minval=1, maxval=10, group=tdi_group, tooltip="Smoothing period for RSI")
signal_length = input.int(7, "Signal Line Length", minval=3, maxval=21, group=tdi_group, tooltip="Signal line smoothing period")
base_line_length = input.int(34, "Base Line Length", minval=10, maxval=50, group=tdi_group, tooltip="Base line period")
show_tdi_lines = input.bool(true, "Show TDI Lines", group=tdi_group)

// === DIVERGENCE SETTINGS ===
divergence_group = "🔍 Divergence Detection"
enable_regular_divergence = input.bool(true, "Enable Regular Divergence", group=divergence_group)
enable_hidden_divergence = input.bool(true, "Enable Hidden Divergence", group=divergence_group)
divergence_lookback = input.int(15, "Divergence Lookback Period", minval=5, maxval=30, group=divergence_group)
divergence_sensitivity = input.float(1.0, "Divergence Sensitivity", minval=0.5, maxval=2.0, step=0.1, group=divergence_group)
min_divergence_distance = input.int(5, "Minimum Pivot Distance", minval=3, maxval=15, group=divergence_group)

// === VISUAL SETTINGS ===
visual_group = "🎨 Visual Configuration"
show_divergence_lines = input.bool(true, "Show Divergence Lines", group=visual_group)
show_divergence_labels = input.bool(true, "Show Divergence Labels", group=visual_group)
show_tdi_levels = input.bool(true, "Show TDI Overbought/Oversold", group=visual_group)
overbought_level = input.float(68.0, "Overbought Level", minval=60.0, maxval=80.0, group=visual_group)
oversold_level = input.float(32.0, "Oversold Level", minval=20.0, maxval=40.0, group=visual_group)

// === ALERT CONFIGURATION ===
alert_group = "🚨 TDI Alert Settings"
enable_divergence_alerts = input.bool(true, "Divergence Alert Notifications", group=alert_group)
enable_tdi_level_alerts = input.bool(true, "TDI Level Break Alerts", group=alert_group)
enable_signal_cross_alerts = input.bool(true, "TDI Signal Cross Alerts", group=alert_group)
alert_frequency = input.string("once_per_bar", "Alert Frequency", options=["once_per_bar", "once_per_bar_close"], group=alert_group)

// ═══════════════════════════════════════════════════════════════════════════════════
// 📊 TDI CALCULATIONS
// ═══════════════════════════════════════════════════════════════════════════════════

// Base RSI calculation
rsi_raw = ta.rsi(close, rsi_length)

// TDI Components
rsi_smoothed = ta.sma(rsi_raw, rsi_smooth)
signal_line = ta.sma(rsi_smoothed, signal_length)
base_line = ta.sma(signal_line, base_line_length)

// Volatility Band (Bollinger Bands on RSI)
bb_length = 34
bb_mult = 1.6185
rsi_bb_basis = ta.sma(rsi_smoothed, bb_length)
rsi_bb_dev = bb_mult * ta.stdev(rsi_smoothed, bb_length)
rsi_bb_upper = rsi_bb_basis + rsi_bb_dev
rsi_bb_lower = rsi_bb_basis - rsi_bb_dev

// TDI Line Colors
tdi_color = signal_line > base_line ? color.green : color.red
signal_color = rsi_smoothed > signal_line ? color.lime : color.red
base_color = signal_line > base_line ? color.blue : color.navy

// ═══════════════════════════════════════════════════════════════════════════════════
// 🔍 DIVERGENCE DETECTION LOGIC
// ═══════════════════════════════════════════════════════════════════════════════════

// Pivot detection for price and TDI
price_pivot_high = ta.pivothigh(high, divergence_lookback, divergence_lookback)
price_pivot_low = ta.pivotlow(low, divergence_lookback, divergence_lookback)
tdi_pivot_high = ta.pivothigh(rsi_smoothed, divergence_lookback, divergence_lookback)
tdi_pivot_low = ta.pivotlow(rsi_smoothed, divergence_lookback, divergence_lookback)

// Function to detect divergences
detect_divergences() =>
    var array<float> price_highs = array.new<float>()
    var array<float> price_lows = array.new<float>()
    var array<float> tdi_highs = array.new<float>()
    var array<float> tdi_lows = array.new<float>()
    var array<int> price_high_bars = array.new<int>()
    var array<int> price_low_bars = array.new<int>()
    var array<int> tdi_high_bars = array.new<int>()
    var array<int> tdi_low_bars = array.new<int>()

    // Store pivot highs
    if not na(price_pivot_high) and not na(tdi_pivot_high)
        array.push(price_highs, price_pivot_high)
        array.push(tdi_highs, tdi_pivot_high)
        array.push(price_high_bars, bar_index[divergence_lookback])
        array.push(tdi_high_bars, bar_index[divergence_lookback])

        // Keep only recent pivots
        if array.size(price_highs) > 10
            array.shift(price_highs)
            array.shift(tdi_highs)
            array.shift(price_high_bars)
            array.shift(tdi_high_bars)

    // Store pivot lows
    if not na(price_pivot_low) and not na(tdi_pivot_low)
        array.push(price_lows, price_pivot_low)
        array.push(tdi_lows, tdi_pivot_low)
        array.push(price_low_bars, bar_index[divergence_lookback])
        array.push(tdi_low_bars, bar_index[divergence_lookback])

        // Keep only recent pivots
        if array.size(price_lows) > 10
            array.shift(price_lows)
            array.shift(tdi_lows)
            array.shift(price_low_bars)
            array.shift(tdi_low_bars)

    // Detect Regular Bearish Divergence (Higher Highs in Price, Lower Highs in TDI)
    regular_bearish_div = false
    if enable_regular_divergence and array.size(price_highs) >= 2 and array.size(tdi_highs) >= 2
        last_price_high = array.get(price_highs, array.size(price_highs) - 1)
        prev_price_high = array.get(price_highs, array.size(price_highs) - 2)
        last_tdi_high = array.get(tdi_highs, array.size(tdi_highs) - 1)
        prev_tdi_high = array.get(tdi_highs, array.size(tdi_highs) - 2)

        if last_price_high > prev_price_high and last_tdi_high < prev_tdi_high
            regular_bearish_div := true

    // Detect Regular Bullish Divergence (Lower Lows in Price, Higher Lows in TDI)
    regular_bullish_div = false
    if enable_regular_divergence and array.size(price_lows) >= 2 and array.size(tdi_lows) >= 2
        last_price_low = array.get(price_lows, array.size(price_lows) - 1)
        prev_price_low = array.get(price_lows, array.size(price_lows) - 2)
        last_tdi_low = array.get(tdi_lows, array.size(tdi_lows) - 1)
        prev_tdi_low = array.get(tdi_lows, array.size(tdi_lows) - 2)

        if last_price_low < prev_price_low and last_tdi_low > prev_tdi_low
            regular_bullish_div := true

    // Detect Hidden Bearish Divergence (Lower Highs in Price, Higher Highs in TDI)
    hidden_bearish_div = false
    if enable_hidden_divergence and array.size(price_highs) >= 2 and array.size(tdi_highs) >= 2
        last_price_high = array.get(price_highs, array.size(price_highs) - 1)
        prev_price_high = array.get(price_highs, array.size(price_highs) - 2)
        last_tdi_high = array.get(tdi_highs, array.size(tdi_highs) - 1)
        prev_tdi_high = array.get(tdi_highs, array.size(tdi_highs) - 2)

        if last_price_high < prev_price_high and last_tdi_high > prev_tdi_high
            hidden_bearish_div := true

    // Detect Hidden Bullish Divergence (Higher Lows in Price, Lower Lows in TDI)
    hidden_bullish_div = false
    if enable_hidden_divergence and array.size(price_lows) >= 2 and array.size(tdi_lows) >= 2
        last_price_low = array.get(price_lows, array.size(price_lows) - 1)
        prev_price_low = array.get(price_lows, array.size(price_lows) - 2)
        last_tdi_low = array.get(tdi_lows, array.size(tdi_lows) - 1)
        prev_tdi_low = array.get(tdi_lows, array.size(tdi_lows) - 2)

        if last_price_low > prev_price_low and last_tdi_low < prev_tdi_low
            hidden_bullish_div := true

    [regular_bearish_div, regular_bullish_div, hidden_bearish_div, hidden_bullish_div]

[reg_bear_div, reg_bull_div, hid_bear_div, hid_bull_div] = detect_divergences()

// ═══════════════════════════════════════════════════════════════════════════════════
// 🎨 TDI VISUAL DISPLAY
// ═══════════════════════════════════════════════════════════════════════════════════

// Plot TDI Lines
plot(show_tdi_lines ? rsi_smoothed : na, "TDI Price Line", color=signal_color, linewidth=2)
plot(show_tdi_lines ? signal_line : na, "TDI Signal Line", color=tdi_color, linewidth=2)
plot(show_tdi_lines ? base_line : na, "TDI Base Line", color=base_color, linewidth=3)

// Plot Volatility Bands
plot(show_tdi_lines ? rsi_bb_upper : na, "TDI Upper Band", color=color.gray, linewidth=1)
plot(show_tdi_lines ? rsi_bb_lower : na, "TDI Lower Band", color=color.gray, linewidth=1)
fill(plot(rsi_bb_upper), plot(rsi_bb_lower), color=color.new(color.gray, 95), title="TDI Bands Fill")

// Overbought/Oversold Levels
hline(show_tdi_levels ? overbought_level : na, "Overbought", color=color.red, linestyle=hline.style_dashed)
hline(show_tdi_levels ? oversold_level : na, "Oversold", color=color.green, linestyle=hline.style_dashed)
hline(50, "Midline", color=color.gray, linestyle=hline.style_dotted)

// Background colors for extreme levels
bgcolor(rsi_smoothed > overbought_level ? color.new(color.red, 95) : na, title="Overbought BG")
bgcolor(rsi_smoothed < oversold_level ? color.new(color.green, 95) : na, title="Oversold BG")

// ═══════════════════════════════════════════════════════════════════════════════════
// 🔍 DIVERGENCE VISUALIZATION
// ═══════════════════════════════════════════════════════════════════════════════════

// Divergence Labels
if show_divergence_labels
    if reg_bear_div
        label.new(bar_index, rsi_smoothed + 5, "🔻 REG BEAR DIV", style=label.style_label_down, color=color.red, textcolor=color.white, size=size.normal)

    if reg_bull_div
        label.new(bar_index, rsi_smoothed - 5, "🔺 REG BULL DIV", style=label.style_label_up, color=color.green, textcolor=color.white, size=size.normal)

    if hid_bear_div
        label.new(bar_index, rsi_smoothed + 5, "🔸 HID BEAR DIV", style=label.style_label_down, color=color.orange, textcolor=color.white, size=size.small)

    if hid_bull_div
        label.new(bar_index, rsi_smoothed - 5, "🔸 HID BULL DIV", style=label.style_label_up, color=color.lime, textcolor=color.black, size=size.small)

// ═══════════════════════════════════════════════════════════════════════════════════
// 📊 TDI STATUS TABLE
// ═══════════════════════════════════════════════════════════════════════════════════

if barstate.islast
    var table tdi_table = table.new(position.bottom_left, 3, 7, bgcolor=color.new(color.white, 10), border_width=2)

    // Header
    table.cell(tdi_table, 0, 0, "TDI ANALYSIS", bgcolor=color.navy, text_color=color.white, text_size=size.normal)
    table.cell(tdi_table, 1, 0, "VALUE", bgcolor=color.gray, text_color=color.white, text_size=size.normal)
    table.cell(tdi_table, 2, 0, "STATUS", bgcolor=color.gray, text_color=color.white, text_size=size.normal)

    // TDI Price Line
    tdi_level_color = rsi_smoothed > overbought_level ? color.new(color.red, 70) :
                     rsi_smoothed < oversold_level ? color.new(color.green, 70) : color.new(color.gray, 70)
    tdi_level_status = rsi_smoothed > overbought_level ? "🔥 OVERBOUGHT" :
                      rsi_smoothed < oversold_level ? "🔥 OVERSOLD" : "📊 NEUTRAL"
    table.cell(tdi_table, 0, 1, "TDI Level", bgcolor=color.blue, text_color=color.white)
    table.cell(tdi_table, 1, 1, str.tostring(rsi_smoothed, "#.#"), bgcolor=tdi_level_color, text_color=color.white)
    table.cell(tdi_table, 2, 1, tdi_level_status, bgcolor=tdi_level_color, text_color=color.white)

    // Signal Line Relationship
    signal_status = rsi_smoothed > signal_line ? "🔺 ABOVE SIGNAL" : "🔻 BELOW SIGNAL"
    signal_color_bg = rsi_smoothed > signal_line ? color.new(color.green, 70) : color.new(color.red, 70)
    table.cell(tdi_table, 0, 2, "Signal Relation", bgcolor=color.purple, text_color=color.white)
    table.cell(tdi_table, 1, 2, str.tostring(signal_line, "#.#"), bgcolor=color.new(color.purple, 70), text_color=color.white)
    table.cell(tdi_table, 2, 2, signal_status, bgcolor=signal_color_bg, text_color=color.white)

    // Base Line Trend
    trend_status = signal_line > base_line ? "🔺 BULLISH" : "🔻 BEARISH"
    trend_color_bg = signal_line > base_line ? color.new(color.green, 70) : color.new(color.red, 70)
    table.cell(tdi_table, 0, 3, "TDI Trend", bgcolor=color.orange, text_color=color.white)
    table.cell(tdi_table, 1, 3, str.tostring(base_line, "#.#"), bgcolor=color.new(color.orange, 70), text_color=color.white)
    table.cell(tdi_table, 2, 3, trend_status, bgcolor=trend_color_bg, text_color=color.white)

    // Regular Divergence Status
    reg_div_active = reg_bear_div or reg_bull_div
    reg_div_status = reg_bear_div ? "🔻 BEARISH" : reg_bull_div ? "🔺 BULLISH" : "❌ NONE"
    reg_div_color = reg_bear_div ? color.new(color.red, 50) : reg_bull_div ? color.new(color.green, 50) : color.new(color.gray, 80)
    table.cell(tdi_table, 0, 4, "Regular Div", bgcolor=color.red, text_color=color.white)
    table.cell(tdi_table, 1, 4, reg_div_active ? "ACTIVE" : "NONE", bgcolor=reg_div_color, text_color=color.white)
    table.cell(tdi_table, 2, 4, reg_div_status, bgcolor=reg_div_color, text_color=color.white)

    // Hidden Divergence Status
    hid_div_active = hid_bear_div or hid_bull_div
    hid_div_status = hid_bear_div ? "🔸 BEARISH" : hid_bull_div ? "🔸 BULLISH" : "❌ NONE"
    hid_div_color = hid_bear_div ? color.new(color.orange, 50) : hid_bull_div ? color.new(color.lime, 50) : color.new(color.gray, 80)
    table.cell(tdi_table, 0, 5, "Hidden Div", bgcolor=color.orange, text_color=color.white)
    table.cell(tdi_table, 1, 5, hid_div_active ? "ACTIVE" : "NONE", bgcolor=hid_div_color, text_color=color.white)
    table.cell(tdi_table, 2, 5, hid_div_status, bgcolor=hid_div_color, text_color=color.white)

    // Overall TDI Signal
    overall_signal = (reg_bear_div or hid_bear_div) ? "🔻 BEARISH" :
                    (reg_bull_div or hid_bull_div) ? "🔺 BULLISH" :
                    signal_line > base_line and rsi_smoothed > signal_line ? "📈 TREND UP" :
                    signal_line < base_line and rsi_smoothed < signal_line ? "📉 TREND DOWN" : "📊 NEUTRAL"
    overall_color = (reg_bear_div or hid_bear_div) ? color.new(color.red, 50) :
                   (reg_bull_div or hid_bull_div) ? color.new(color.green, 50) :
                   signal_line > base_line ? color.new(color.blue, 70) : color.new(color.gray, 70)
    table.cell(tdi_table, 0, 6, "TDI Signal", bgcolor=color.navy, text_color=color.white)
    table.cell(tdi_table, 1, 6, "OVERALL", bgcolor=overall_color, text_color=color.white)
    table.cell(tdi_table, 2, 6, overall_signal, bgcolor=overall_color, text_color=color.white)

// ═══════════════════════════════════════════════════════════════════════════════════
// 🚨 TDI ALERTS
// ═══════════════════════════════════════════════════════════════════════════════════

alert_freq = alert_frequency == "once_per_bar" ? alert.freq_once_per_bar : alert.freq_once_per_bar_close

// Divergence Alerts
if enable_divergence_alerts
    if reg_bear_div
        alert("🔻 TDI REGULAR BEARISH DIVERGENCE!\n" +
              "Symbol: " + syminfo.ticker + "\n" +
              "Timeframe: " + timeframe.period + "\n" +
              "Type: Regular Bearish\n" +
              "TDI Level: " + str.tostring(rsi_smoothed, "#.#") + "\n" +
              "Signal: POTENTIAL REVERSAL DOWN", alert_freq)

    if reg_bull_div
        alert("🔺 TDI REGULAR BULLISH DIVERGENCE!\n" +
              "Symbol: " + syminfo.ticker + "\n" +
              "Timeframe: " + timeframe.period + "\n" +
              "Type: Regular Bullish\n" +
              "TDI Level: " + str.tostring(rsi_smoothed, "#.#") + "\n" +
              "Signal: POTENTIAL REVERSAL UP", alert_freq)

    if hid_bear_div
        alert("🔸 TDI HIDDEN BEARISH DIVERGENCE!\n" +
              "Symbol: " + syminfo.ticker + "\n" +
              "Timeframe: " + timeframe.period + "\n" +
              "Type: Hidden Bearish\n" +
              "TDI Level: " + str.tostring(rsi_smoothed, "#.#") + "\n" +
              "Signal: TREND CONTINUATION DOWN", alert_freq)

    if hid_bull_div
        alert("🔸 TDI HIDDEN BULLISH DIVERGENCE!\n" +
              "Symbol: " + syminfo.ticker + "\n" +
              "Timeframe: " + timeframe.period + "\n" +
              "Type: Hidden Bullish\n" +
              "TDI Level: " + str.tostring(rsi_smoothed, "#.#") + "\n" +
              "Signal: TREND CONTINUATION UP", alert_freq)

// TDI Level Alerts
if enable_tdi_level_alerts
    if ta.crossover(rsi_smoothed, overbought_level)
        alert("🔥 TDI OVERBOUGHT!\n" +
              "Symbol: " + syminfo.ticker + "\n" +
              "TDI Level: " + str.tostring(rsi_smoothed, "#.#") + "\n" +
              "Threshold: " + str.tostring(overbought_level, "#.#") + "\n" +
              "Signal: POTENTIAL REVERSAL ZONE", alert_freq)

    if ta.crossunder(rsi_smoothed, oversold_level)
        alert("🔥 TDI OVERSOLD!\n" +
              "Symbol: " + syminfo.ticker + "\n" +
              "TDI Level: " + str.tostring(rsi_smoothed, "#.#") + "\n" +
              "Threshold: " + str.tostring(oversold_level, "#.#") + "\n" +
              "Signal: POTENTIAL REVERSAL ZONE", alert_freq)

// Signal Cross Alerts
if enable_signal_cross_alerts
    if ta.crossover(rsi_smoothed, signal_line)
        alert("📈 TDI BULLISH CROSS!\n" +
              "Symbol: " + syminfo.ticker + "\n" +
              "TDI Price crossed above Signal Line\n" +
              "TDI Level: " + str.tostring(rsi_smoothed, "#.#") + "\n" +
              "Signal: MOMENTUM SHIFT UP", alert_freq)

    if ta.crossunder(rsi_smoothed, signal_line)
        alert("📉 TDI BEARISH CROSS!\n" +
              "Symbol: " + syminfo.ticker + "\n" +
              "TDI Price crossed below Signal Line\n" +
              "TDI Level: " + str.tostring(rsi_smoothed, "#.#") + "\n" +
              "Signal: MOMENTUM SHIFT DOWN", alert_freq)

// ═══════════════════════════════════════════════════════════════════════════════════
// 📤 EXPORT FOR INTEGRATION WITH OTHER SCRIPTS
// ═══════════════════════════════════════════════════════════════════════════════════

// Note: Converting export statements to plot() for indicator script compatibility
plot(rsi_smoothed, "RSI_Smoothed", display=display.data_window)
plot(signal_line, "Signal_Line", display=display.data_window)
plot(base_line, "Base_Line", display=display.data_window)
plot(reg_bear_div ? 1 : 0, "Reg_Bear_Div", display=display.data_window)
plot(reg_bull_div ? 1 : 0, "Reg_Bull_Div", display=display.data_window)
plot(hid_bear_div ? 1 : 0, "Hid_Bear_Div", display=display.data_window)
plot(hid_bull_div ? 1 : 0, "Hid_Bull_Div", display=display.data_window)
plot(overbought_level, "Overbought_Level", display=display.data_window)
plot(oversold_level, "Oversold_Level", display=display.data_window)
