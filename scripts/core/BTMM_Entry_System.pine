//@version=5

// =============================================================================
// BTMM ENTRY SYSTEM - PRECISE ENTRY TIMING
// =============================================================================
// @description Precise entry timing system with multi-confirmation signals
// @purpose High-probability entry signals with risk management integration
// @method Multi-factor confluence analysis with institutional flow confirmation
// @author BTMM Development Team
// @version 2.0 - Enhanced with BTMMFoundation integration
// @date 2025-07-02
// =============================================================================

// Note: BTMMFoundation functions imported directly due to local development
// In production, this would use: import username/BTMMFoundation/1 as btmm

// =============================================================================
// BTMM ENTRY SYSTEM - OTE & INSTITUTIONAL SIGNAL VALIDATION
// =============================================================================
// Purpose: Complete entry system with OTE second leg detection and signal validation
// Method: Institutional OTE analysis with comprehensive confirmation system
// Author: BTMM Development Team
// Version: 2.0 - Enhanced from Master System
// Date: 2025-07-02
// =============================================================================

indicator("BTMM Entry System", "BTMM Entry", overlay=true, shorttitle="BTMM Entry",
         max_boxes_count=100, max_lines_count=150, max_labels_count=150)

// ============================================================================
// 🎯 OTE & ENTRY SYSTEM CONFIGURATION
// ============================================================================

// === OTE SECOND LEG SETTINGS ===
ote_group = "🎯 OTE Second Leg Analysis"
enable_ote_analysis = input.bool(true, "Enable OTE Second Leg Detection", group=ote_group)
ote_swing_lookback = input.int(10, "Swing Detection Lookback", minval=5, maxval=20, group=ote_group, tooltip="Bars for swing high/low detection")
ote_min_leg_bars = input.int(10, "Minimum First Leg Duration", minval=5, maxval=50, group=ote_group, tooltip="Minimum bars for valid first leg")
show_ote_zones = input.bool(true, "Show OTE Fibonacci Zones", group=ote_group)
ote_optimal_only = input.bool(true, "Only Show Optimal OTE Zones", group=ote_group, tooltip="50-61.8% bearish, 38.2-50% bullish")

// === SIGNAL VALIDATION SETTINGS ===
signal_group = "✅ Signal Validation"
min_confluence_count = input.int(3, "Minimum Confluence Count", minval=2, maxval=7, group=signal_group, tooltip="Minimum confluences required for valid signal")
enable_bias_filter = input.bool(true, "Enable BTMM Bias Filter", group=signal_group)
enable_session_filter = input.bool(true, "Enable Session Filter", group=signal_group)
enable_13_ema_confirmation = input.bool(true, "Require 13 EMA Confirmation", group=signal_group)
volume_confirmation_threshold = input.float(1.5, "Volume Confirmation Threshold", minval=1.0, maxval=3.0, step=0.1, group=signal_group)

// === VISUAL SETTINGS ===
visual_group = "🎨 Visual Configuration"
line_width = input.int(2, "Line Width", minval=1, maxval=5, group=visual_group)
label_size = input.string("normal", "Label Size", options=["tiny", "small", "normal", "large", "huge"], group=visual_group)
show_signal_arrows = input.bool(true, "Show Signal Arrows", group=visual_group)
show_confluence_table = input.bool(true, "Show Confluence Table", group=visual_group)

// ============================================================================
// 🔧 HELPER FUNCTIONS & CALCULATIONS
// ============================================================================

// ATR and volatility calculations
atr_14 = ta.atr(14)
atr_21 = ta.atr(21)

// Volume calculations
volume_ma = ta.sma(volume, 20)
volume_spike_threshold = volume_ma * volume_confirmation_threshold
volume_ratio = volume / volume_ma

// Label size conversion
label_text_size = switch label_size
    "tiny" => size.tiny
    "small" => size.small
    "normal" => size.normal
    "large" => size.large
    "huge" => size.huge
    => size.normal

// ============================================================================
// 🎯 OTE SECOND LEG DETECTION SYSTEM
// ============================================================================

// OTE Second Leg Detection
detect_second_leg_ote() =>
    var float first_leg_high = na
    var float first_leg_low = na
    var float first_leg_start_price = na
    var int first_leg_start_bar = na
    var int first_leg_end_bar = na
    var bool in_retracement = false
    var string leg_direction = "NONE"
    var bool ote_setup_active = false

    // Detect swing points
    swing_high = ta.pivothigh(high, ote_swing_lookback, ote_swing_lookback)
    swing_low = ta.pivotlow(low, ote_swing_lookback, ote_swing_lookback)

    // Reset if too old
    if not na(first_leg_start_bar) and bar_index - first_leg_start_bar > 200
        first_leg_high := na
        first_leg_low := na
        first_leg_start_price := na
        first_leg_start_bar := na
        first_leg_end_bar := na
        in_retracement := false
        leg_direction := "NONE"
        ote_setup_active := false

    // Detect first leg completion
    if not na(swing_high) and not in_retracement
        // Look for first leg down (high to low)
        potential_start_low = ta.lowest(low, 50)
        if high - potential_start_low > atr_14 * 3 and bar_index - nz(first_leg_start_bar, 0) >= ote_min_leg_bars
            first_leg_high := swing_high
            first_leg_low := potential_start_low
            first_leg_start_bar := bar_index - 50
            first_leg_end_bar := bar_index - ote_swing_lookback
            leg_direction := "DOWN"
            in_retracement := true
            ote_setup_active := true

    if not na(swing_low) and not in_retracement
        // Look for first leg up (low to high)
        potential_start_high = ta.highest(high, 50)
        if potential_start_high - low > atr_14 * 3 and bar_index - nz(first_leg_start_bar, 0) >= ote_min_leg_bars
            first_leg_low := swing_low
            first_leg_high := potential_start_high
            first_leg_start_bar := bar_index - 50
            first_leg_end_bar := bar_index - ote_swing_lookback
            leg_direction := "UP"
            in_retracement := true
            ote_setup_active := true

    // Calculate OTE zones
    var float ote_382 = na
    var float ote_500 = na
    var float ote_618 = na
    var float ote_786 = na

    if ote_setup_active and leg_direction == "DOWN" and not na(first_leg_high) and not na(first_leg_low)
        first_leg_range = first_leg_high - first_leg_low
        ote_382 := first_leg_low + (first_leg_range * 0.382)
        ote_500 := first_leg_low + (first_leg_range * 0.500)
        ote_618 := first_leg_low + (first_leg_range * 0.618)
        ote_786 := first_leg_low + (first_leg_range * 0.786)

    else if ote_setup_active and leg_direction == "UP" and not na(first_leg_high) and not na(first_leg_low)
        first_leg_range = first_leg_high - first_leg_low
        ote_382 := first_leg_high - (first_leg_range * 0.382)
        ote_500 := first_leg_high - (first_leg_range * 0.500)
        ote_618 := first_leg_high - (first_leg_range * 0.618)
        ote_786 := first_leg_high - (first_leg_range * 0.786)

    // Detect if in optimal OTE zones
    in_bearish_ote_zone = leg_direction == "DOWN" and not na(ote_500) and not na(ote_618) and close >= ote_500 and close <= ote_618
    in_bullish_ote_zone = leg_direction == "UP" and not na(ote_382) and not na(ote_500) and close >= ote_382 and close <= ote_500

    [in_bearish_ote_zone, in_bullish_ote_zone, leg_direction, ote_382, ote_500, ote_618, ote_786, ote_setup_active]

// Execute OTE detection
[in_bearish_ote, in_bullish_ote, current_leg_direction, ote_382, ote_500, ote_618, ote_786, ote_active] = enable_ote_analysis ? detect_second_leg_ote() : [false, false, "NONE", na, na, na, na, false]

// ============================================================================
// ✅ SIGNAL VALIDATION & CONFIRMATION SYSTEM
// ============================================================================

// 13 EMA Confirmation (simplified for standalone operation)
ema_13 = ta.ema(close, 13)
check_13_ema_confirmation(pattern_type) =>
    confirmation = false
    strong_confirmation = false

    if pattern_type == "M"
        confirmation := close < ema_13 and close[1] >= ema_13
        strong_confirmation := close < ema_13 and close < ta.ema(close, 50)
    else if pattern_type == "W"
        confirmation := close > ema_13 and close[1] <= ema_13
        strong_confirmation := close > ema_13 and close > ta.ema(close, 50)

    [confirmation, strong_confirmation]

// BTMM Bias Filtering (simplified)
simple_bias_calculation() =>
    ema_5 = ta.ema(close, 5)
    ema_50 = ta.ema(close, 50)
    ema_200 = ta.ema(close, 200)

    bullish_bias = close > ema_13 and ema_5 > ema_13 and ema_50 > ema_200
    bearish_bias = close < ema_13 and ema_5 < ema_13 and ema_50 < ema_200

    bias = bullish_bias ? "BULLISH" : bearish_bias ? "BEARISH" : "NEUTRAL"
    bias

btmm_market_bias = simple_bias_calculation()

filter_by_btmm_bias(pattern_found, pattern_type) =>
    valid_signal = false

    if pattern_found and enable_bias_filter
        if btmm_market_bias == "BULLISH" and pattern_type == "W"
            valid_signal := true
        else if btmm_market_bias == "BEARISH" and pattern_type == "M"
            valid_signal := true
    else if pattern_found and not enable_bias_filter
        valid_signal := true

    valid_signal

// Session filtering (simplified)
london_session = time(timeframe.period, "0200-0900")
ny_session = time(timeframe.period, "0930-1700")
trading_allowed = (not na(london_session) or not na(ny_session))

// Institutional support detection
institutional_support = volume > volume_spike_threshold and math.abs(close - open) > atr_14 * 0.5

// ============================================================================
// 🎯 CONFLUENCE ANALYSIS SYSTEM
// ============================================================================

// Confluence factor analysis
calculate_confluence_factors(signal_type) =>
    confluence_factors = array.new<bool>()

    // Factor 1: OTE Zone
    if signal_type == "M"
        array.push(confluence_factors, in_bearish_ote)
    else
        array.push(confluence_factors, in_bullish_ote)

    // Factor 2: Volume confirmation
    array.push(confluence_factors, volume > volume_spike_threshold)

    // Factor 3: 13 EMA confirmation
    if enable_13_ema_confirmation
        if signal_type == "M"
            array.push(confluence_factors, close < ema_13)
        else
            array.push(confluence_factors, close > ema_13)
    else
        array.push(confluence_factors, true)

    // Factor 4: BTMM Bias alignment
    if enable_bias_filter
        if signal_type == "M"
            array.push(confluence_factors, btmm_market_bias == "BEARISH")
        else
            array.push(confluence_factors, btmm_market_bias == "BULLISH")
    else
        array.push(confluence_factors, true)

    // Factor 5: Session filter
    if enable_session_filter
        array.push(confluence_factors, trading_allowed)
    else
        array.push(confluence_factors, true)

    // Factor 6: ATR-based momentum
    momentum_valid = math.abs(close - open) > atr_14 * 0.3
    array.push(confluence_factors, momentum_valid)

    // Factor 7: Institutional support
    array.push(confluence_factors, institutional_support)

    // Count confluences
    confluence_count = 0
    for i = 0 to array.size(confluence_factors) - 1
        if array.get(confluence_factors, i)
            confluence_count += 1

    confluence_count

// Mock pattern completion signals (since we don't have direct access to pattern detection here)
// In real implementation, these would come from the pattern detection script
m_pattern_completed = ta.crossunder(close, ema_13) and close[1] > ema_13 and volume > volume_spike_threshold
w_pattern_completed = ta.crossover(close, ema_13) and close[1] < ema_13 and volume > volume_spike_threshold

// Calculate confluences
m_confluence_count = m_pattern_completed ? calculate_confluence_factors("M") : 0
w_confluence_count = w_pattern_completed ? calculate_confluence_factors("W") : 0

// Final signal validation
m_signal_valid = m_pattern_completed and m_confluence_count >= min_confluence_count and filter_by_btmm_bias(true, "M")
w_signal_valid = w_pattern_completed and w_confluence_count >= min_confluence_count and filter_by_btmm_bias(true, "W")

// Enhanced signals with OTE
ote_m_signal = m_signal_valid and in_bearish_ote
ote_w_signal = w_signal_valid and in_bullish_ote

// Ultimate confluence signals
perfect_stack = ta.ema(close, 5) > ta.ema(close, 13) and ta.ema(close, 13) > ta.ema(close, 50) and ta.ema(close, 50) > ta.ema(close, 200)
ultimate_bearish = ote_m_signal and not perfect_stack and institutional_support
ultimate_bullish = ote_w_signal and perfect_stack and institutional_support

// ============================================================================
// 🎨 VISUAL ELEMENTS & OTE ZONE DRAWING
// ============================================================================

// Draw OTE Zones
if show_ote_zones and ote_active and not na(ote_500)
    if current_leg_direction == "DOWN" and not na(ote_618)
        if ote_optimal_only
            ote_box = box.new(bar_index - 5, ote_618, bar_index + 15, ote_500,
                             border_color=color.red, bgcolor=color.new(color.red, 85), border_width=2)
        else
            // Draw all Fibonacci levels
            box.new(bar_index - 5, ote_786, bar_index + 15, ote_618, border_color=color.red, bgcolor=color.new(color.red, 90), border_width=1)
            box.new(bar_index - 5, ote_618, bar_index + 15, ote_500, border_color=color.red, bgcolor=color.new(color.red, 85), border_width=2)
            box.new(bar_index - 5, ote_500, bar_index + 15, ote_382, border_color=color.red, bgcolor=color.new(color.red, 90), border_width=1)

        label.new(bar_index, ote_618, "🎯 OTE Bearish Zone", style=label.style_label_left, color=color.red, textcolor=color.white, size=size.small)

    if current_leg_direction == "UP" and not na(ote_382)
        if ote_optimal_only
            ote_box = box.new(bar_index - 5, ote_500, bar_index + 15, ote_382,
                             border_color=color.green, bgcolor=color.new(color.green, 85), border_width=2)
        else
            // Draw all Fibonacci levels
            box.new(bar_index - 5, ote_786, bar_index + 15, ote_618, border_color=color.green, bgcolor=color.new(color.green, 90), border_width=1)
            box.new(bar_index - 5, ote_618, bar_index + 15, ote_500, border_color=color.green, bgcolor=color.new(color.green, 90), border_width=1)
            box.new(bar_index - 5, ote_500, bar_index + 15, ote_382, border_color=color.green, bgcolor=color.new(color.green, 85), border_width=2)

        label.new(bar_index, ote_382, "🎯 OTE Bullish Zone", style=label.style_label_left, color=color.green, textcolor=color.white, size=size.small)

// Signal Arrows
if show_signal_arrows
    if m_signal_valid
        plotshape(true, style=shape.arrowdown, location=location.abovebar, color=color.red, size=size.large, title="M Signal")
    if w_signal_valid
        plotshape(true, style=shape.arrowup, location=location.belowbar, color=color.green, size=size.large, title="W Signal")
    if ultimate_bearish
        plotshape(true, style=shape.arrowdown, location=location.abovebar, color=color.purple, size=size.huge, title="Ultimate Bearish")
    if ultimate_bullish
        plotshape(true, style=shape.arrowup, location=location.belowbar, color=color.orange, size=size.huge, title="Ultimate Bullish")

// Confluence Table
var table confluence_table = na

if show_confluence_table and barstate.islast
    if not na(confluence_table)
        table.delete(confluence_table)

    confluence_table := table.new(position.top_left, 3, 8, bgcolor=color.white, border_width=1)

    // Headers
    table.cell(confluence_table, 0, 0, "CONFLUENCE", bgcolor=color.navy, text_color=color.white, text_size=size.small)
    table.cell(confluence_table, 1, 0, "M (BEAR)", bgcolor=color.red, text_color=color.white, text_size=size.small)
    table.cell(confluence_table, 2, 0, "W (BULL)", bgcolor=color.green, text_color=color.white, text_size=size.small)

    // Confluence factors
    table.cell(confluence_table, 0, 1, "OTE Zone", text_color=color.black, text_size=size.tiny)
    table.cell(confluence_table, 1, 1, in_bearish_ote ? "✅" : "❌", text_color=in_bearish_ote ? color.green : color.red, text_size=size.tiny)
    table.cell(confluence_table, 2, 1, in_bullish_ote ? "✅" : "❌", text_color=in_bullish_ote ? color.green : color.red, text_size=size.tiny)

    table.cell(confluence_table, 0, 2, "Volume", text_color=color.black, text_size=size.tiny)
    vol_confirmed = volume > volume_spike_threshold
    table.cell(confluence_table, 1, 2, vol_confirmed ? "✅" : "❌", text_color=vol_confirmed ? color.green : color.red, text_size=size.tiny)
    table.cell(confluence_table, 2, 2, vol_confirmed ? "✅" : "❌", text_color=vol_confirmed ? color.green : color.red, text_size=size.tiny)

    table.cell(confluence_table, 0, 3, "13 EMA", text_color=color.black, text_size=size.tiny)
    table.cell(confluence_table, 1, 3, close < ema_13 ? "✅" : "❌", text_color=close < ema_13 ? color.green : color.red, text_size=size.tiny)
    table.cell(confluence_table, 2, 3, close > ema_13 ? "✅" : "❌", text_color=close > ema_13 ? color.green : color.red, text_size=size.tiny)

    table.cell(confluence_table, 0, 4, "Bias", text_color=color.black, text_size=size.tiny)
    table.cell(confluence_table, 1, 4, btmm_market_bias == "BEARISH" ? "✅" : "❌", text_color=btmm_market_bias == "BEARISH" ? color.green : color.red, text_size=size.tiny)
    table.cell(confluence_table, 2, 4, btmm_market_bias == "BULLISH" ? "✅" : "❌", text_color=btmm_market_bias == "BULLISH" ? color.green : color.red, text_size=size.tiny)

    table.cell(confluence_table, 0, 5, "Session", text_color=color.black, text_size=size.tiny)
    table.cell(confluence_table, 1, 5, trading_allowed ? "✅" : "❌", text_color=trading_allowed ? color.green : color.red, text_size=size.tiny)
    table.cell(confluence_table, 2, 5, trading_allowed ? "✅" : "❌", text_color=trading_allowed ? color.green : color.red, text_size=size.tiny)

    table.cell(confluence_table, 0, 6, "Count", bgcolor=color.gray, text_color=color.white, text_size=size.tiny)
    table.cell(confluence_table, 1, 6, str.tostring(m_confluence_count) + "/7", bgcolor=m_confluence_count >= min_confluence_count ? color.green : color.red, text_color=color.white, text_size=size.tiny)
    table.cell(confluence_table, 2, 6, str.tostring(w_confluence_count) + "/7", bgcolor=w_confluence_count >= min_confluence_count ? color.green : color.red, text_color=color.white, text_size=size.tiny)

    table.cell(confluence_table, 0, 7, "Signal", bgcolor=color.blue, text_color=color.white, text_size=size.tiny)
    table.cell(confluence_table, 1, 7, ultimate_bearish ? "🔥" : ote_m_signal ? "🎯" : m_signal_valid ? "✅" : "❌", bgcolor=ultimate_bearish ? color.purple : m_signal_valid ? color.green : color.red, text_color=color.white, text_size=size.tiny)
    table.cell(confluence_table, 2, 7, ultimate_bullish ? "🔥" : ote_w_signal ? "🎯" : w_signal_valid ? "✅" : "❌", bgcolor=ultimate_bullish ? color.purple : w_signal_valid ? color.green : color.red, text_color=color.white, text_size=size.tiny)

// ============================================================================
// 📊 DATA WINDOW OUTPUTS (FOR INTEGRATION)
// ============================================================================

plot(in_bearish_ote ? 1 : 0, "In_Bearish_OTE", display=display.data_window)
plot(in_bullish_ote ? 1 : 0, "In_Bullish_OTE", display=display.data_window)
plot(ote_active ? 1 : 0, "OTE_Active", display=display.data_window)
plot(ote_382, "OTE_382", display=display.data_window)
plot(ote_500, "OTE_500", display=display.data_window)
plot(ote_618, "OTE_618", display=display.data_window)
plot(ote_786, "OTE_786", display=display.data_window)
plot(m_signal_valid ? 1 : 0, "M_Signal_Valid", display=display.data_window)
plot(w_signal_valid ? 1 : 0, "W_Signal_Valid", display=display.data_window)
plot(ote_m_signal ? 1 : 0, "OTE_M_Signal", display=display.data_window)
plot(ote_w_signal ? 1 : 0, "OTE_W_Signal", display=display.data_window)
plot(ultimate_bearish ? 1 : 0, "Ultimate_Bearish", display=display.data_window)
plot(ultimate_bullish ? 1 : 0, "Ultimate_Bullish", display=display.data_window)
plot(m_confluence_count, "M_Confluence_Count", display=display.data_window)
plot(w_confluence_count, "W_Confluence_Count", display=display.data_window)
plot(volume_ratio, "Volume_Ratio", display=display.data_window)
plot(institutional_support ? 1 : 0, "Institutional_Support", display=display.data_window)

// ============================================================================
// 🎛️ MASTER CONTROL SYSTEM INTEGRATION
// ============================================================================
// Master control functionality from BTMM_Core_Signals_v2.pine merged in
// Author: BTMM Development Team - Master Control Module
// ============================================================================

// Master Control Toggles
var g_MASTER_CTRL = "🎛️ MASTER CONTROL SYSTEM"
enable_master_system    = input.bool(true,  "🔴 MASTER SYSTEM ENABLE",     group=g_MASTER_CTRL)
enable_master_signals   = input.bool(true,  "📡 Master Signal Generation", group=g_MASTER_CTRL)
enable_master_alerts    = input.bool(true,  "🔔 Master Alert System",     group=g_MASTER_CTRL)
enable_master_dashboard = input.bool(true,  "📊 Master Dashboard",        group=g_MASTER_CTRL)

// Enhanced Subsystem Toggles
var g_ENHANCED_SYSTEMS = "🔧 ENHANCED SUBSYSTEM CONTROLS"
master_ema_system   = input.bool(true,  "📈 Enhanced EMA Stack",      group=g_ENHANCED_SYSTEMS)
master_asian_range  = input.bool(true,  "🌏 Enhanced Asian Range",    group=g_ENHANCED_SYSTEMS)
master_htf_bias     = input.bool(true,  "⬆️ Enhanced HTF Bias",       group=g_ENHANCED_SYSTEMS)
master_patterns     = input.bool(true,  "🎯 Enhanced Pattern System", group=g_ENHANCED_SYSTEMS)
master_stop_hunt    = input.bool(true,  "🎪 Enhanced Stop Hunt",      group=g_ENHANCED_SYSTEMS)
master_risk_mgmt    = input.bool(true,  "🛡️ Enhanced Risk Management", group=g_ENHANCED_SYSTEMS)

// Enhanced Signal Filtering
var g_MASTER_FILTERS = "🔍 MASTER SIGNAL FILTERS"
master_signal_strength   = input.float(75.0, "Master Signal Strength", minval=0.0, maxval=100.0, group=g_MASTER_FILTERS)
master_confluence_req    = input.bool(true,  "Master Confluence Required", group=g_MASTER_FILTERS)
master_confluence_count  = input.int(4,      "Master Confluence Count", minval=3, maxval=8, group=g_MASTER_FILTERS)
master_volume_filter     = input.bool(true,  "Master Volume Filter", group=g_MASTER_FILTERS)
master_session_filter    = input.bool(true,  "Master Session Filter", group=g_MASTER_FILTERS)

// Enhanced Visual Controls
var g_MASTER_VISUAL = "🎨 MASTER VISUAL CONTROLS"
show_master_labels      = input.bool(true,  "Show Master Signal Labels",    group=g_MASTER_VISUAL)
show_master_strength    = input.bool(true,  "Show Master Strength Meter",   group=g_MASTER_VISUAL)
show_master_confluence  = input.bool(true,  "Show Master Confluence Box",   group=g_MASTER_VISUAL)
master_label_size       = input.string("normal", "Master Label Size",
  options=["tiny", "small", "normal", "large"], group=g_MASTER_VISUAL)

// Enhanced Colors
master_bull_color = input.color(color.lime,   "Master Bull Signal Color", group=g_MASTER_VISUAL)
master_bear_color = input.color(color.red,    "Master Bear Signal Color", group=g_MASTER_VISUAL)
master_conf_color = input.color(color.yellow, "Master Confluence Color",  group=g_MASTER_VISUAL)

// ============================================================================
// ENHANCED SIGNAL INTEGRATION
// ============================================================================

// Enhanced EMA signals
master_ema_bull = master_ema_system and perfect_stack and close > ema_13
master_ema_bear = master_ema_system and not perfect_stack and close < ema_13

// Enhanced Asian range integration
master_asian_bull = master_asian_range and in_bullish_ote and volume_ratio > 1.5
master_asian_bear = master_asian_range and in_bearish_ote and volume_ratio > 1.5

// Enhanced HTF bias integration (using existing htf variables if available)
master_htf_bull = master_htf_bias and btmm_market_bias == "BULLISH"
master_htf_bear = master_htf_bias and btmm_market_bias == "BEARISH"

// Enhanced pattern signals (enhanced versions of existing OTE signals)
master_pattern_bull = master_patterns and ote_w_signal
master_pattern_bear = master_patterns and ote_m_signal

// Enhanced stop hunt integration
master_stop_hunt_bull = master_stop_hunt and institutional_support and close > ta.highest(high, 20)[1]
master_stop_hunt_bear = master_stop_hunt and institutional_support and close < ta.lowest(low, 20)[1]

// Enhanced risk management signal validation
risk_position_size = atr_14 * 2  // Example position sizing based on ATR
master_risk_valid = master_risk_mgmt and risk_position_size > 0

// ============================================================================
// MASTER CONFLUENCE CALCULATION
// ============================================================================

// Enhanced bullish confluence counting
master_bull_signals = 0
master_bull_signals += master_ema_bull ? 1 : 0
master_bull_signals += master_asian_bull ? 1 : 0
master_bull_signals += master_htf_bull ? 1 : 0
master_bull_signals += master_pattern_bull ? 1 : 0
master_bull_signals += master_stop_hunt_bull ? 1 : 0
master_bull_signals += (master_volume_filter ? volume_ratio > 1.3 : true) ? 1 : 0
master_bull_signals += (master_session_filter ? trading_allowed : true) ? 1 : 0
master_bull_signals += master_risk_valid ? 1 : 0

// Enhanced bearish confluence counting
master_bear_signals = 0
master_bear_signals += master_ema_bear ? 1 : 0
master_bear_signals += master_asian_bear ? 1 : 0
master_bear_signals += master_htf_bear ? 1 : 0
master_bear_signals += master_pattern_bear ? 1 : 0
master_bear_signals += master_stop_hunt_bear ? 1 : 0
master_bear_signals += (master_volume_filter ? volume_ratio > 1.3 : true) ? 1 : 0
master_bear_signals += (master_session_filter ? trading_allowed : true) ? 1 : 0
master_bear_signals += master_risk_valid ? 1 : 0

// ============================================================================
// MASTER SIGNAL GENERATION
// ============================================================================

master_confluence_met = master_confluence_req ?
  (master_bull_signals >= master_confluence_count or master_bear_signals >= master_confluence_count) : true

master_signal_strength_calc = math.max(master_bull_signals, master_bear_signals) * (100.0 / 8.0)
master_quality_met = master_signal_strength_calc >= master_signal_strength

// Final Master Signals (enhanced versions that override basic signals when enabled)
master_ultimate_bull = enable_master_system and enable_master_signals and
  master_bull_signals > master_bear_signals and master_confluence_met and master_quality_met

master_ultimate_bear = enable_master_system and enable_master_signals and
  master_bear_signals > master_bull_signals and master_confluence_met and master_quality_met

// Enhanced Ultimate Signals (combining existing ultimate signals with master control)
enhanced_ultimate_bull = master_ultimate_bull or (enable_master_system and ultimate_bullish)
enhanced_ultimate_bear = master_ultimate_bear or (enable_master_system and ultimate_bearish)

// ============================================================================
// MASTER VISUAL ELEMENTS
// ============================================================================

// Master signal labels (enhanced versions)
if show_master_labels and master_ultimate_bull
    label.new(bar_index, low - atr_14, "🚀 MASTER BULL",
      style=label.style_label_up, color=master_bull_color,
      textcolor=color.white, size=master_label_size)

if show_master_labels and master_ultimate_bear
    label.new(bar_index, high + atr_14, "🚀 MASTER BEAR",
      style=label.style_label_down, color=master_bear_color,
      textcolor=color.white, size=master_label_size)

// Enhanced Ultimate signals (special markers)
if show_master_labels and enhanced_ultimate_bull
    label.new(bar_index, low - atr_14 * 1.5, "⚡ ULTIMATE BULL",
      style=label.style_label_up, color=color.orange,
      textcolor=color.black, size=size.large)

if show_master_labels and enhanced_ultimate_bear
    label.new(bar_index, high + atr_14 * 1.5, "⚡ ULTIMATE BEAR",
      style=label.style_label_down, color=color.purple,
      textcolor=color.white, size=size.large)

// Master strength meter
plotchar(show_master_strength ? master_signal_strength_calc : na, "Master Strength", "●",
  location.top, color=master_signal_strength_calc > 75 ? color.green :
  master_signal_strength_calc > 50 ? color.yellow : color.red, size=size.normal)

// Master confluence background
bgcolor(show_master_confluence and master_confluence_met ?
  color.new(master_conf_color, 95) : na, title="Master Confluence Background")

// ============================================================================
// ENHANCED MASTER DASHBOARD
// ============================================================================

if enable_master_dashboard and barstate.islast
    var table master_table = table.new(position.bottom_right, 3, 10,
      bgcolor=color.new(color.black, 80), border_width=2)

    table.cell(master_table, 0, 0, "BTMM MASTER CONTROL", text_color=color.white, text_size=size.normal)
    table.cell(master_table, 1, 0, "STATUS", text_color=color.white, text_size=size.normal)
    table.cell(master_table, 2, 0, "VALUE", text_color=color.white, text_size=size.normal)

    table.cell(master_table, 0, 1, "Master System", text_color=color.white)
    table.cell(master_table, 1, 1, enable_master_system ? "ACTIVE" : "DISABLED",
      text_color=enable_master_system ? color.green : color.red)
    table.cell(master_table, 2, 1, "", text_color=color.white)

    table.cell(master_table, 0, 2, "Signal Strength", text_color=color.white)
    table.cell(master_table, 1, 2, str.tostring(math.round(master_signal_strength_calc)) + "%",
      text_color=master_signal_strength_calc > 75 ? color.green : master_signal_strength_calc > 50 ? color.yellow : color.red)
    table.cell(master_table, 2, 2, str.tostring(master_signal_strength) + "% min", text_color=color.white)

    table.cell(master_table, 0, 3, "Bull Confluence", text_color=color.white)
    table.cell(master_table, 1, 3, str.tostring(master_bull_signals) + "/8",
      text_color=master_bull_signals >= master_confluence_count ? color.green : color.red)
    table.cell(master_table, 2, 3, str.tostring(master_confluence_count) + " min", text_color=color.white)

    table.cell(master_table, 0, 4, "Bear Confluence", text_color=color.white)
    table.cell(master_table, 1, 4, str.tostring(master_bear_signals) + "/8",
      text_color=master_bear_signals >= master_confluence_count ? color.green : color.red)
    table.cell(master_table, 2, 4, str.tostring(master_confluence_count) + " min", text_color=color.white)

    table.cell(master_table, 0, 5, "Master Signal", text_color=color.white)
    master_signal_text = master_ultimate_bull ? "BULL" : master_ultimate_bear ? "BEAR" : "NONE"
    master_signal_color = master_ultimate_bull ? color.green : master_ultimate_bear ? color.red : color.gray
    table.cell(master_table, 1, 5, master_signal_text, text_color=master_signal_color)
    table.cell(master_table, 2, 5, "", text_color=color.white)

    table.cell(master_table, 0, 6, "Ultimate Signal", text_color=color.white)
    ultimate_signal_text = enhanced_ultimate_bull ? "ULTIMATE BULL" : enhanced_ultimate_bear ? "ULTIMATE BEAR" : "NONE"
    ultimate_signal_color = enhanced_ultimate_bull ? color.orange : enhanced_ultimate_bear ? color.purple : color.gray
    table.cell(master_table, 1, 6, ultimate_signal_text, text_color=ultimate_signal_color)
    table.cell(master_table, 2, 6, "", text_color=color.white)

    table.cell(master_table, 0, 7, "OTE Status", text_color=color.white)
    ote_status = in_bullish_ote ? "BULL OTE" : in_bearish_ote ? "BEAR OTE" : "NO OTE"
    ote_color = in_bullish_ote ? color.green : in_bearish_ote ? color.red : color.gray
    table.cell(master_table, 1, 7, ote_status, text_color=ote_color)
    table.cell(master_table, 2, 7, ote_active ? "ACTIVE" : "INACTIVE", text_color=ote_active ? color.green : color.red)

    table.cell(master_table, 0, 8, "Session", text_color=color.white)
    table.cell(master_table, 1, 8, trading_allowed ? "TRADING" : "CLOSED",
      text_color=trading_allowed ? color.green : color.red)
    table.cell(master_table, 2, 8, "", text_color=color.white)

    table.cell(master_table, 0, 9, "Risk/ATR", text_color=color.white)
    table.cell(master_table, 1, 9, str.tostring(math.round(atr_14 * 10000)) + " pips",
      text_color=color.white)
    table.cell(master_table, 2, 9, str.tostring(math.round(volume_ratio * 100)) + "% vol", text_color=color.white)

// ============================================================================
// 📊 ENHANCED DATA WINDOW OUTPUTS (MASTER CONTROL)
// ============================================================================

plot(master_ultimate_bull ? 1 : 0, "Master_Ultimate_Bull", display=display.data_window)
plot(master_ultimate_bear ? 1 : 0, "Master_Ultimate_Bear", display=display.data_window)
plot(enhanced_ultimate_bull ? 1 : 0, "Enhanced_Ultimate_Bull", display=display.data_window)
plot(enhanced_ultimate_bear ? 1 : 0, "Enhanced_Ultimate_Bear", display=display.data_window)
plot(master_signal_strength_calc, "Master_Signal_Strength", display=display.data_window)
plot(master_bull_signals, "Master_Bull_Confluence", display=display.data_window)
plot(master_bear_signals, "Master_Bear_Confluence", display=display.data_window)
plot(master_confluence_met ? 1 : 0, "Master_Confluence_Met", display=display.data_window)

// Enhanced system status outputs
plot(enable_master_system ? 1 : 0, "Master_System_Enabled", display=display.data_window)
plot(master_quality_met ? 1 : 0, "Master_Quality_Met", display=display.data_window)
plot(perfect_stack ? 1 : 0, "Perfect_Stack", display=display.data_window)
plot(risk_position_size, "Risk_Position_Size", display=display.data_window)
