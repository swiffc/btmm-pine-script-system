//@version=5

// =============================================================================
// BTMM PATTERN DETECTION
// =============================================================================
// Purpose: [DESCRIBE THE PURPOSE OF THIS INDICATOR/STRATEGY]
// Method: [DESCRIBE THE TECHNICAL ANALYSIS METHOD USED]
// Author: BTMM Development Team
// Version: 1.0
// Date: 2025-07-02
// =============================================================================

indicator("BTMM Pattern Detection", "BTMM Patterns", overlay=true, shorttitle="BTMM Pattern...")

// ============================================================================
// BTMM PATTERN DETECTION - COMPREHENSIVE PATTERN RECOGNITION SYSTEM
// ============================================================================
// This script consolidates all pattern-related functionality including:
// - Advanced harmonic patterns (Gartley, Butterfly, etc.)
// - Classical patterns (Head & Shoulders, Triangles, etc.)
// - Smart Money Concepts patterns (CHoCH, BOS, etc.)
// - Pattern validation and scoring
// ============================================================================

// Import Foundation Library
import BTMMFoundation/BTMMFoundationLib/1 as btmm

// ============================================================================
// SETTINGS & INPUTS
// ============================================================================

var g_patterns = "Pattern Detection Settings"
enable_harmonic = input.bool(true, "Enable Harmonic Patterns", group=g_patterns)
// TODO: Add input validation for enable_harmonic (e.g., if enable_harmonic < 1 runtime.error("enable_harmonic must be positive"))
enable_classical = input.bool(true, "Enable Classical Patterns", group=g_patterns)
enable_smc = input.bool(true, "Enable SMC Patterns", group=g_patterns)
pattern_sensitivity = input.float(0.8, "Pattern Sensitivity", minval=0.1, maxval=2.0, group=g_patterns)

var g_validation = "Pattern Validation"
min_pattern_score = input.float(70.0, "Minimum Pattern Score", minval=0, maxval=100, group=g_validation)
require_volume_confirmation = input.bool(true, "Require Volume Confirmation", group=g_validation)

var g_display = "Display Settings"
show_pattern_labels = input.bool(true, "Show Pattern Labels", group=g_display)
show_pattern_zones = input.bool(true, "Show Pattern Zones", group=g_display)
show_projection_targets = input.bool(true, "Show Projection Targets", group=g_display)

// ============================================================================
// PATTERN STRUCTURE DETECTION
// ============================================================================

// Swing points detection
swing_high = ta.pivothigh(high, 5, 5)
swing_low = ta.pivotlow(low, 5, 5)

// Store recent swing points
var array<float> recent_highs = array.new<float>()
var array<float> recent_lows = array.new<float>()
var array<int> high_bars = array.new<int>()
var array<int> low_bars = array.new<int>()

// Update swing point arrays
if not na(swing_high)
    array.push(recent_highs, swing_high)
    array.push(high_bars, bar_index[5])
    if array.size(recent_highs) > 10
        array.shift(recent_highs)
        array.shift(high_bars)

if not na(swing_low)
    array.push(recent_lows, swing_low)
    array.push(low_bars, bar_index[5])
    if array.size(recent_lows) > 10
        array.shift(recent_lows)
        array.shift(low_bars)

// ============================================================================
// HARMONIC PATTERN DETECTION
// ============================================================================

// Function to check Fibonacci ratios
fibonacci_tolerance = 0.1

is_fib_ratio(ratio, target) =>
    math.abs(ratio - target) <= fibonacci_tolerance

// Gartley Pattern Detection
detect_gartley() =>
    pattern_found = false
    pattern_score = 0.0

    if array.size(recent_highs) >= 3 and array.size(recent_lows) >= 2
        // Get XABCD points for bullish Gartley
        X = array.get(recent_lows, array.size(recent_lows) - 3)
        A = array.get(recent_highs, array.size(recent_highs) - 3)
        B = array.get(recent_lows, array.size(recent_lows) - 2)
        C = array.get(recent_highs, array.size(recent_highs) - 2)
        D = array.get(recent_lows, array.size(recent_lows) - 1)

        // Check Gartley ratios
        AB_XA = math.abs(B - A) / math.abs(A - X)
        BC_AB = math.abs(C - B) / math.abs(A - B)
        CD_BC = math.abs(D - C) / math.abs(C - B)
        AD_XA = math.abs(D - A) / math.abs(A - X)

        // Validate Gartley pattern
        if is_fib_ratio(AB_XA, 0.618) and is_fib_ratio(BC_AB, 0.382) and
           is_fib_ratio(CD_BC, 1.272) and is_fib_ratio(AD_XA, 0.786)
            pattern_found := true
            pattern_score := 85.0

    [pattern_found, pattern_score]

// Butterfly Pattern Detection
detect_butterfly() =>
    pattern_found = false
    pattern_score = 0.0

    if array.size(recent_highs) >= 3 and array.size(recent_lows) >= 2
        // Similar structure to Gartley but different ratios
        X = array.get(recent_lows, array.size(recent_lows) - 3)
        A = array.get(recent_highs, array.size(recent_highs) - 3)
        B = array.get(recent_lows, array.size(recent_lows) - 2)
        C = array.get(recent_highs, array.size(recent_highs) - 2)
        D = array.get(recent_lows, array.size(recent_lows) - 1)

        AB_XA = math.abs(B - A) / math.abs(A - X)
        BC_AB = math.abs(C - B) / math.abs(A - B)
        CD_BC = math.abs(D - C) / math.abs(C - B)
        AD_XA = math.abs(D - A) / math.abs(A - X)

        // Validate Butterfly pattern
        if is_fib_ratio(AB_XA, 0.786) and is_fib_ratio(BC_AB, 0.382) and
           is_fib_ratio(CD_BC, 1.618) and is_fib_ratio(AD_XA, 1.27)
            pattern_found := true
            pattern_score := 90.0

    [pattern_found, pattern_score]

// ============================================================================
// CLASSICAL PATTERN DETECTION
// ============================================================================

// Head and Shoulders Pattern
detect_head_shoulders() =>
    pattern_found = false
    pattern_score = 0.0

    if array.size(recent_highs) >= 3
        left_shoulder = array.get(recent_highs, array.size(recent_highs) - 3)
        head = array.get(recent_highs, array.size(recent_highs) - 2)
        right_shoulder = array.get(recent_highs, array.size(recent_highs) - 1)

        // Check H&S criteria
        shoulder_symmetry = math.abs(left_shoulder - right_shoulder) / left_shoulder < 0.02
        head_dominance = head > left_shoulder and head > right_shoulder

        if shoulder_symmetry and head_dominance
            pattern_found := true
            pattern_score := 75.0

    [pattern_found, pattern_score]

// Triangle Pattern Detection
detect_triangle() =>
    pattern_found = false
    pattern_score = 0.0
    pattern_type = "ascending"

    if array.size(recent_highs) >= 2 and array.size(recent_lows) >= 2
        // Check for ascending triangle (horizontal resistance, rising support)
        high1 = array.get(recent_highs, array.size(recent_highs) - 2)
        high2 = array.get(recent_highs, array.size(recent_highs) - 1)
        low1 = array.get(recent_lows, array.size(recent_lows) - 2)
        low2 = array.get(recent_lows, array.size(recent_lows) - 1)

        horizontal_resistance = math.abs(high1 - high2) / high1 < 0.01
        rising_support = low2 > low1

        if horizontal_resistance and rising_support
            pattern_found := true
            pattern_score := 70.0
            pattern_type := "ascending"

    [pattern_found, pattern_score, pattern_type]

// ============================================================================
// SMART MONEY CONCEPTS PATTERNS
// ============================================================================

// Change of Character (CHoCH) Detection
detect_choch() =>
    [bullish_structure, bearish_structure, structure_break, liquidity_sweep] = btmm.market_structure_and_liquidity()

    pattern_found = structure_break
    pattern_score = structure_break ? 80.0 : 0.0
    pattern_direction = bullish_structure ? "bullish" : bearish_structure ? "bearish" : "neutral"

    [pattern_found, pattern_score, pattern_direction]

// Break of Structure (BOS) Detection
detect_bos() =>
    [bullish_structure, bearish_structure, structure_break, liquidity_sweep] = btmm.market_structure_and_liquidity()

    # BOS is a continuation pattern vs CHoCH which is reversal
    recent_trend_bull = ta.ema(close, 20) > ta.ema(close, 50)
    recent_trend_bear = ta.ema(close, 20) < ta.ema(close, 50)

    bos_bullish = structure_break and bullish_structure and recent_trend_bull
    bos_bearish = structure_break and bearish_structure and recent_trend_bear

    pattern_found = bos_bullish or bos_bearish
    pattern_score = pattern_found ? 75.0 : 0.0
    pattern_direction = bos_bullish ? "bullish" : bos_bearish ? "bearish" : "neutral"

    [pattern_found, pattern_score, pattern_direction]

// ============================================================================
// PATTERN EXECUTION
// ============================================================================

// Execute pattern detection based on settings
[gartley_found, gartley_score] = enable_harmonic ? detect_gartley() : [false, 0.0]
[butterfly_found, butterfly_score] = enable_harmonic ? detect_butterfly() : [false, 0.0]
[hs_found, hs_score] = enable_classical ? detect_head_shoulders() : [false, 0.0]
[triangle_found, triangle_score, triangle_type] = enable_classical ? detect_triangle() : [false, 0.0, "none"]
[choch_found, choch_score, choch_direction] = enable_smc ? detect_choch() : [false, 0.0, "neutral"]
[bos_found, bos_score, bos_direction] = enable_smc ? detect_bos() : [false, 0.0, "neutral"]

// Overall pattern detection
any_pattern_found = gartley_found or butterfly_found or hs_found or triangle_found or choch_found or bos_found
best_pattern_score = math.max(gartley_score, math.max(butterfly_score, math.max(hs_score, math.max(triangle_score, math.max(choch_score, bos_score)))))

// Pattern validation
volume_confirmation = volume > ta.sma(volume, 20)
pattern_valid = any_pattern_found and best_pattern_score >= min_pattern_score and
                (not require_volume_confirmation or volume_confirmation)

// ============================================================================
// VISUAL ELEMENTS
// ============================================================================

// Pattern labels
if show_pattern_labels
    if gartley_found and gartley_score >= min_pattern_score
        label.new(bar_index, high, "GARTLEY", color=color.purple, style=label.style_label_down, size=size.small)
    if butterfly_found and butterfly_score >= min_pattern_score
        label.new(bar_index, high, "BUTTERFLY", color=color.blue, style=label.style_label_down, size=size.small)
    if hs_found and hs_score >= min_pattern_score
        label.new(bar_index, high, "H&S", color=color.red, style=label.style_label_down, size=size.small)
    if triangle_found and triangle_score >= min_pattern_score
        label.new(bar_index, high, "TRIANGLE", color=color.orange, style=label.style_label_down, size=size.small)
    if choch_found and choch_score >= min_pattern_score
        label.new(bar_index, high, "CHoCH", color=color.yellow, style=label.style_label_down, size=size.small)
    if bos_found and bos_score >= min_pattern_score
        label.new(bar_index, high, "BOS", color=color.green, style=label.style_label_down, size=size.small)

// Pattern zones
bgcolor(show_pattern_zones and pattern_valid ? color.new(color.blue, 95) : na)

// ============================================================================
// DATA WINDOW OUTPUTS (FOR INTEGRATION)
// ============================================================================

plot(gartley_found ? 1 : 0, "Gartley_Pattern", display=display.data_window)
plot(butterfly_found ? 1 : 0, "Butterfly_Pattern", display=display.data_window)
plot(hs_found ? 1 : 0, "HeadShoulders_Pattern", display=display.data_window)
plot(triangle_found ? 1 : 0, "Triangle_Pattern", display=display.data_window)
plot(choch_found ? 1 : 0, "CHoCH_Pattern", display=display.data_window)
plot(bos_found ? 1 : 0, "BOS_Pattern", display=display.data_window)
plot(best_pattern_score, "Best_Pattern_Score", display=display.data_window)
plot(pattern_valid ? 1 : 0, "Pattern_Valid", display=display.data_window)
plot(any_pattern_found ? 1 : 0, "Any_Pattern_Found", display=display.data_window)

// Legacy compatibility outputs
plot(any_pattern_found ? 1 : 0, "Pattern_Detected", display=display.data_window)
plot(gartley_found ? 1 : butterfly_found ? 2 : hs_found ? 3 : triangle_found ? 4 : choch_found ? 5 : bos_found ? 6 : 0, "Pattern_Type", display=display.data_window)
// TODO: Add division by zero protection (e.g., divisor != 0 ? numerator / divisor : na)