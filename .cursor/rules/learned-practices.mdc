---
description: 
globs: 
alwaysApply: false
---
# BTMM Learned Best Practices Database

## üéØ System Evolution Philosophy
This file continuously grows with each development session, capturing:
- ‚ùå **Mistakes to Avoid**: Common pitfalls and their prevention
- ‚úÖ **Proven Patterns**: Solutions that work consistently
- üîÑ **Recent Fixes**: Latest improvements and their context
- üìà **Performance Optimizations**: Efficiency improvements discovered

## üö® CRITICAL FOUNDATIONAL RULES

### üîí **MAJOR RULE: Automated Commit Process MUST Be Final Step**
- ‚ùå **NEVER** leave changes uncommitted after any development session
- ‚úÖ **ALWAYS** automate the commit process as the last step of any workflow
- üîÑ **MANDATORY** git commit + push sequence for every change cycle
- üìã **ENFORCE** this rule in all automation scripts and CI/CD pipelines
- üéØ **INTEGRATION** All system evolution cycles must end with automated commits

**Implementation Pattern:**
```bash
# Every workflow MUST end with:
npm run git-commit    # Automated commit with descriptive messages
npm run git-push      # Push to remote repository
npm run git-status    # Verify clean working directory
```

**Why This Rule is Critical:**
- **Data Protection**: Prevents loss of development progress
- **Version Control**: Ensures all improvements are tracked
- **Team Coordination**: Keeps remote repository current
- **Backup Security**: Protects against hardware/software failures
- **Audit Trail**: Maintains complete history of system evolution

---

## üö´ Common Mistakes to Avoid

### Pine Script Development
- ‚ùå **Don't use `var` for calculations that need to run every bar**
  - *Learned from:* Template generation optimization (2025-07-02)
  - *Solution:* Use regular variable declarations for bar-by-bar calculations

- ‚ùå **Avoid nested security() calls - causes performance issues**
  - *Impact:* Can cause script timeouts and poor user experience
  - *Solution:* Cache security data in variables outside loops

- ‚ùå **Never use magic numbers - always define constants**
  - *Example:* Use `EMA_FAST = 5` instead of hardcoded `5`
  - *Benefit:* Maintainability and user customization

- ‚ùå **Don't forget input validation for user parameters**
  - *Pattern:* Always include `minval`, `maxval`, and `step` parameters
  - *Reason:* Prevents user errors and script failures

### BTMM System Specific
- ‚ùå **Never exceed the 10-script limit without merge strategy**
  - *Learned from:* Initial consolidation process
  - *Solution:* Always use smart-merger.js before adding new scripts

- ‚ùå **Don't modify protected functions without dependency check**
  - *Critical functions:* session_and_cycle, timeframe_classification, ema_stack_analysis
  - *Solution:* Run dependency-tracker.js before any foundation changes

- ‚ùå **Avoid breaking cross-script data window outputs**
  - *Impact:* Breaks integration between BTMM components
  - *Solution:* Always include `display=display.data_window` for critical outputs

### Template Generation System
- ‚ùå **Don't generate templates without BTMM Foundation integration**
  - *Learned from:* Template generator development
  - *Solution:* All templates must reference BTMMFoundation.pine

- ‚ùå **Never skip anti-repainting validation for security calls**
  - *Pattern:* Include `lookahead=barmerge.lookahead_off`
  - *Alternative:* Use `barstate.isconfirmed` checks

---

## ‚úÖ Proven Patterns That Work

### Pine Script Excellence
- ‚úÖ **Always use `ta.` prefix for technical analysis functions**
  - *Version compatibility:* Ensures Pine Script v5/v6 compliance
  - *Performance:* Optimized built-in functions

- ‚úÖ **Cache complex calculations in variables**
  ```pinescript
  // ‚úÖ GOOD: Cache calculations
  rsi_value = ta.rsi(close, 14)
  rsi_oversold = rsi_value < 30
  rsi_overbought = rsi_value > 70
  ```

- ‚úÖ **Use descriptive variable names following BTMM conventions**
  - *Pattern:* `btmm_ema_stack_strength`, `asian_range_breakout_signal`
  - *Benefit:* Code self-documentation and team understanding

- ‚úÖ **Include proper error handling for edge cases**
  ```pinescript
  // ‚úÖ Handle missing data
  ema_value = na(close) ? na : ta.ema(close, length)
  ```

### BTMM Integration Patterns
- ‚úÖ **Modular function design with clear data outputs**
  ```pinescript
  // ‚úÖ BTMM Pattern
  [bull_stack, bear_stack, stack_strength] = btmm_ema_analysis()
  plot(stack_strength, "Stack Strength", display=display.data_window)
  ```

- ‚úÖ **Session-based analysis with proper timezone handling**
  ```pinescript
  // ‚úÖ Steve Mauro Asian Range Pattern
  asian_session = input.session("2000-0800", "Asian Session")
  in_asian_session = time(timeframe.period, asian_session)
  ```

- ‚úÖ **Multi-timeframe analysis with HTF bias integration**
  ```pinescript
  // ‚úÖ BTMM HTF Pattern
  htf_bias = request.security(syminfo.tickerid, "4H", ema_direction_confirmed)
  current_setup_valid = htf_bias and current_timeframe_signal
  ```

### Template Generation Best Practices
- ‚úÖ **Three-tier complexity system works effectively**
  - *Basic:* Core concept implementation
  - *Intermediate:* Enhanced with confirmations
  - *Advanced:* Full multi-timeframe integration

- ‚úÖ **Educational content integration improves adoption**
  ```yaml
  educationalContent:
    videoUrl: "steve-mauro-concept-explanation"
    documentation: "step-by-step-guide.md"
    practiceExercises: ["basic", "intermediate", "advanced"]
  ```

---

## üîÑ Recent Fixes Applied

### 2025-07-02: Template Generator Performance Optimization
**Issue:** Missing generatePracticeExercises function caused template loading failure
**Fix:** Replaced dynamic function call with static array
**Learning:** Always validate function dependencies before deployment
**Code Pattern:**
```javascript
// ‚úÖ Static approach for reliability
practiceExercises: ['basic_understanding', 'parameter_modification', 'signal_analysis']
```

### 2025-07-02: CI/CD Pipeline Script Count Integration
**Issue:** Script counter only scanned main directory, missing subdirectory scripts
**Fix:** Updated to recursive scanning including all BTMM* scripts
**Learning:** File system operations need comprehensive path coverage
**Code Pattern:**
```javascript
// ‚úÖ Recursive scanning
function countScripts(dir) {
    // Implementation includes subdirectory traversal
}
```

### 2025-07-02: PowerShell Command Chaining
**Issue:** && operator not supported in PowerShell for complex npm scripts
**Fix:** Simplified echo statements and removed shell-specific operators
**Learning:** Cross-platform compatibility requires simpler command structures
**Resolution:** Use separate commands or PowerShell-specific operators

### 2025-07-02: Continuous Learning System Active
**Pattern:** Automated learning detection working
**Application:** Regular system evolution cycles

### 2025-07-02: System Health Validation
**Pattern:** Continuous improvement cycle maintains stability
**Application:** Apply automated learning updates regularly

### 2025-07-02: Continuous Learning System Active
**Pattern:** Automated learning detection working
**Application:** Regular system evolution cycles

---

## üìà Performance Optimizations Discovered

### Template Generation Speed
- **Optimization:** Pre-compile template patterns instead of dynamic generation
- **Result:** Sub-2-second generation time achieved
- **Application:** Used in btmm-builder-demo for real-time demonstration

### Memory Usage Efficiency
- **Pattern:** Lazy loading of template variants only when requested
- **Benefit:** Reduced memory footprint for large template libraries
- **Implementation:** Template variants generated on-demand

### Cross-Script Communication
- **Method:** Centralized data window outputs for integration
- **Performance:** Eliminates redundant calculations across scripts
- **BTMM Impact:** Maintains real-time responsiveness with 10 scripts

---

## üéØ Steve Mauro Methodology Learnings

### Asian Range Trading Insights
- **Key Learning:** Volume confirmation significantly improves breakout accuracy
- **Implementation:** Add volume threshold validation to all range templates
- **Steve Mauro Principle:** Institutional volume creates valid breakouts

### EMA Stack Analysis Refinements
- **Discovery:** 800 EMA on higher timeframes provides superior bias detection
- **Application:** Integrate HTF 800 EMA in advanced templates
- **Market Insight:** Institutional algorithms respect long-period EMAs

### Stop Hunt Detection Patterns
- **Pattern Recognition:** False breakouts often coincide with RSI extremes
- **Enhancement:** Combine liquidity sweeps with momentum divergence
- **Trading Edge:** Institutional stop hunts create high-probability reversal zones

---

## üõ°Ô∏è Quality Assurance Protocols

### Pre-Deployment Checklist
- [ ] All Pine Script templates pass anti-repainting validation
- [ ] BTMM Foundation integration verified
- [ ] Cross-script data outputs maintained
- [ ] Performance benchmarks under 2 seconds
- [ ] Educational content completeness check

### Continuous Integration Standards
- **Quality Score Threshold:** Minimum 95/100 for production deployment
- **Template Validation:** All variants must compile without errors
- **Integration Health:** 100% dependency validation required
- **Performance Monitoring:** Response time tracking for optimization

---

## üîÑ Learning Loop Implementation

### Session Capture Process
1. **Immediate Learning:** Document mistakes within 5 minutes of discovery
2. **Pattern Recognition:** Weekly review for recurring issues
3. **Rule Evolution:** Update prevention strategies based on frequency
4. **Knowledge Sharing:** Integrate learnings into team documentation

### Automated Learning Triggers
- **Git Hooks:** Capture significant changes in Pine Script files
- **CI/CD Integration:** Log performance improvements and quality metrics
- **Error Tracking:** Automatic documentation of validation failures
- **Success Patterns:** Record configurations that achieve high scores

---

## üìö Reference Patterns for AI

### When Generating Pine Script Code
1. **Always check** this file for relevant mistake patterns
2. **Apply proven patterns** from the ‚úÖ section
3. **Validate against** BTMM methodology requirements
4. **Include appropriate** educational context

### Template Creation Guidelines
1. **Start with complexity level** appropriate for user skill
2. **Integrate BTMM Foundation** for cross-script compatibility
3. **Add educational value** through comments and documentation
4. **Validate performance** against established benchmarks

### System Integration Rules
1. **Preserve 10-script limit** through intelligent merging
2. **Maintain data window outputs** for cross-script communication
3. **Follow Steve Mauro principles** in all trading logic
4. **Test integration health** before deployment

---

## üöÄ Future Learning Priorities

### Emerging Patterns to Monitor
- Template marketplace performance metrics
- User adoption patterns for different complexity levels
- Educational content effectiveness measurements
- Cross-platform compatibility improvements

### Technology Evolution Tracking
- Pine Script version updates and migration patterns
- Cursor IDE feature integrations and optimizations
- GitHub Actions improvements and automation opportunities
- Community feedback integration and response patterns

---

**Learning Philosophy:** Every mistake is a learning opportunity that strengthens the entire BTMM system. This file evolves continuously to capture institutional knowledge and prevent regression.

**Next Update:** Automatically triggered by significant development sessions or weekly manual review.


### 2025-07-02: Automated Commit Enforcement Success
**Context:** test-automation-rule
**Pattern:** All workflows ending with mandatory commits
**Application:** Bulletproof version control achieved
